<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://activej.io/blog</id>
    <title>ActiveJ 5.1 Blog</title>
    <updated>2021-10-29T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://activej.io/blog"/>
    <subtitle>ActiveJ 5.1 Blog</subtitle>
    <icon>https://activej.io/./img/favicon.png</icon>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.0 - New major release]]></title>
        <id>ActiveJ 5.0 - New major release</id>
        <link href="https://activej.io/blog/2021/10/29/v5.0"/>
        <updated>2021-10-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.0 was released Oct 29,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.0 was released Oct 29,
2021 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.0">see on Maven</a>). This release includes
major changes in <a href="/inject">ActiveJ Inject</a>, <a href="/codegen">ActiveJ Codegen</a>, <a href="/serializer">ActiveJ Serializer</a>
<a href="/async-io/promise">promises API</a>. The release also introduced improved type scanning facility and
overall minor improvements in other components.</p><ul><li><a href="/inject">ActiveJ Inject</a><ul><li>Refactored and simplified inner components to speed up dependency injection and provide better support for binding
<a href="/specializer">specialization</a></li><li>Simplified type resolution in dependency injection</li><li>Added the ability to transform imported and exported bindings using patterns (see <a href="/inject/binding-transformation">example</a>)</li><li>Replaced <code>@Optional</code> annotation with an explicit <a href="https://github.com/activej/activej/blob/v5.0/core-inject/src/main/java/io/activej/inject/binding/OptionalDependency.java">OptionalDependency</a>
class</li></ul></li><li><a href="/codegen">ActiveJ Codegen</a><ul><li>Improved <a href="https://github.com/activej/activej/blob/v5.0/core-codegen/src/main/java/io/activej/codegen/ClassBuilder.java">ClassBuilder</a> and <a href="https://github.com/activej/activej/blob/v5.0/core-codegen/src/main/java/io/activej/codegen/DefiningClassLoader.java">DefiningClassLoader</a> classes</li><li>Class generation may now be 100% lazy</li><li>Added in-memory <a href="https://github.com/activej/activej/blob/v5.0/core-codegen/src/main/java/io/activej/codegen/ClassBuilder.java">ClassBuilder</a> caches</li><li>Added the ability to use <a href="https://github.com/activej/activej/blob/v5.0/core-codegen/src/main/java/io/activej/codegen/BytecodeStorage.java">BytecodeStorage</a> as a persistent cache for generated bytecode</li><li>Added the ability to call super methods as well as protected methods</li><li>Improved built-in expressions for array/collection/map iteration</li></ul></li><li><a href="/serializer">ActiveJ Serializer</a><ul><li>Added the ability to specify serializer annotations directly on type use (see <a href="/serializer/examples#path-based-serialization">example</a>)</li><li>Automatic class member ordering is now supported within the same JVM</li><li>Added support for serializer annotation aliases</li><li>Improved array serialization as well as serialization of booleans</li><li>Refactored class hierarchy of collection serializers. </li><li>Abstract collection serializers now support builder pattern</li></ul></li><li><a href="/async-io/promise">Promise</a><ul><li>Greatly improved exception handling</li><li>Renamed promise chaining methods <code>thenEx</code> and <code>mapEx</code> to <code>then</code> and <code>map</code></li><li>Added new conditional chaining methods as well as dedicated null-handling chaining methods </li><li>All the changing methods now take &quot;throwing&quot; functions. If a checked exception is thrown in a chaining function,
the whole promise is completed exceptionally</li></ul></li><li>Miscellaneous improvements<ul><li>Removed <code>codec</code> module. Components that require JSON marshalling now internally use the
<a href="https://github.com/ngs-doo/dsl-json">DSL-JSON</a> library  </li><li>Added new <a href="https://github.com/activej/activej/tree/v5.0/util-types">types</a> module which contains various reflection and type utilities, including advanced type scanner</li><li><a href="https://github.com/activej/activej/tree/v5.0/util-common">Common</a> module has been massively refactored to make common functions and components more consistent</li><li>Restructured asynchronous exceptions</li><li>Unchecked exception handling can now be precisely configured using a thread-scoped or global
<a href="https://github.com/activej/activej/blob/v5.0/util-common/src/main/java/io/activej/common/exception/FatalErrorHandler.java">FatalErrorHandler facility</a> </li><li>Made ActiveJ compatible with Java 17</li><li>Added various <code>DiscoveryService</code> interfaces for node discovery within server cluster (<a href="/rpc">RPC</a>, <a href="/fs">FS</a>)</li><li>Removed <code>AsyncServletDecorator</code> facility</li><li>Removed <code>StreamCodecRegistry</code> facility</li><li>Multiple small improvements and fixes</li></ul></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 4.3 - Small improvements for multiple modules]]></title>
        <id>ActiveJ 4.3 - Small improvements for multiple modules</id>
        <link href="https://activej.io/blog/2021/05/28/v4.3"/>
        <updated>2021-05-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v4.3 was released May 28,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v4.3 was released May 28,
2021 (<a href="https://mvnrepository.com/artifact/io.activej/activej/4.3">see on Maven</a>). This release introduced
small improvements for multiple modules.</p><ul><li>Added new method <code>onConnecting</code> to <a href="https://github.com/activej/activej/blob/v4.3/core-http/src/main/java/io/activej/http/AsyncHttpClient.java">AsyncHttpClient</a>
&#x27;s <code>Inspector</code>. Now, the number of connection that are being
established can be monitored via <code>JmxInspector#getConnecting</code> attribute</li><li>When HTTP connection closes, the proper exception is propagated to HTTP request and response body suppliers</li><li><a href="https://github.com/activej/activej/blob/v4.3/core-eventloop/src/main/java/io/activej/eventloop/inspector/ThrottlingController.java">ThrottlingController</a>
now throttles all the processing if tasks consecutively execute for abnormally long time</li><li><a href="https://github.com/activej/activej/blob/v4.3/core-datastream/src/main/java/io/activej/datastream/ForwardingStreamSupplier.java">ForwardingStreamSupplier</a>
now correctly binds peer <code>StreamSupplier</code> to <code>StreamConsumer</code></li><li>Fixed asynchronous recursion in <a href="https://github.com/activej/activej/blob/v4.3/core-datastream/src/main/java/io/activej/datastream/csp/ChannelSerializer.java">ChannelSerializer</a></li><li>Missing measures in <a href="https://github.com/activej/activej/blob/v4.3/extra/cloud-lsmt-aggregation/src/main/java/io/activej/aggregation/Aggregation.java">Aggregation</a>
are initialized with default &#x27;zero&#x27; values</li><li><a href="https://github.com/activej/activej/blob/v4.3/extra/cloud-lsmt-aggregation/src/main/java/io/activej/aggregation/measure/HyperLogLog.java">HyperLogLog</a>
now correctly adds <code>int</code> values</li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 4.2 - Expanded functionality]]></title>
        <id>ActiveJ 4.2 - Expanded functionality</id>
        <link href="https://activej.io/blog/2021/04/13/v4.2"/>
        <updated>2021-04-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v4.2 was released Apr 13, 2021 (see on Maven). This release expanded]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v4.2 was released Apr 13, 2021 (<a href="https://mvnrepository.com/artifact/io.activej/activej/4.2">see on Maven</a>). This release expanded
functionality of some components.</p><ul><li><strong><a href="https://github.com/activej/activej/tree/v4.2/extra/cloud-redis">ActiveJ Redis client</a></strong><ul><li>Added <code>connect()</code> methods
to <a href="https://github.com/activej/activej/blob/v4.2/extra/cloud-redis/src/main/java/io/activej/redis/RedisClient.java">RedisClient</a>
that take up authentication credentials</li><li>Added new specialized exceptions for ActiveJ Redis module:<ul><li><a href="https://github.com/activej/activej/blob/v4.2/extra/cloud-redis/src/main/java/io/activej/redis/RedisAuthenticationException.java">RedisAuthenticationException</a></li><li><a href="https://github.com/activej/activej/blob/v4.2/extra/cloud-redis/src/main/java/io/activej/redis/RedisPermissionException.java">RedisPermissionException</a></li></ul></li></ul></li><li><strong><a href="https://github.com/activej/activej/blob/v4.2/core-codegen/src/main/java/io/activej/record/RecordScheme.java">RecordScheme</a></strong><ul><li>Added ability to specify fields in <code>RecordScheme</code> that would be used for <code>equals()</code> and <code>hashCode()</code> implementation</li><li>Added ability to specify fields that would be used to generate a record <code>Comparator</code></li></ul></li><li><strong><a href="https://github.com/activej/activej/blob/v4.2/util-common/src/main/java/io/activej/common/FileLocker.java">FileLocker</a></strong><ul><li>Made <code>FileLocker</code> constructors public</li><li><code>FileLocker</code> now implements <code>java.io.Closeable</code> interface</li></ul></li><li><strong><a href="https://github.com/activej/activej/blob/v4.2/util-state/src/main/java/io/activej/state/StateManager.java">StateManager</a></strong><ul><li>Added <code>tryLoadSnapshot()</code> and <code>tryLoadDiff()</code> methods that return <code>null</code> rather than throwing an exception</li><li>Added <code>tryLoad()</code> method to <a href="https://github.com/activej/activej/blob/v4.2/util-state/src/main/java/io/activej/state/file/FileStateManager.java">FileStateManager</a>
that returns <code>null</code> rather than throwing an exception</li><li>Added <code>save()</code> method to <a href="https://github.com/activej/activej/blob/v4.2/util-state/src/main/java/io/activej/state/file/FileStateManager.java">FileStateManager</a>
that takes up a revision for the state to be saved with</li></ul></li><li>Improved processing of HTTP requests with large URLs</li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 4.1 - Optimization and simplification]]></title>
        <id>ActiveJ 4.1 - Optimization and simplification</id>
        <link href="https://activej.io/blog/2021/03/19/v4.1"/>
        <updated>2021-03-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v4.1 was released Mar 19, 2021 (see on Maven).]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v4.1 was released Mar 19, 2021 (<a href="https://mvnrepository.com/artifact/io.activej/activej/4.1">see on Maven</a>).
This release included optimization and simplification of HTTP code, expanding functionality of some components.</p><ul><li><strong>HTTP refactoring and optimizations</strong><ul><li>Optimized and simplified processing of incoming HTTP messages, headers and URLs</li><li>Added preconditions for an HTTP message which guard against using recycled messages</li><li>User-created HTTP messages (<a href="https://github.com/activej/activej/blob/v4.1/core-http/src/main/java/io/activej/http/HttpRequest.java">HttpRequest</a>
for <a href="https://github.com/activej/activej/blob/v4.1/core-http/src/main/java/io/activej/http/AsyncHttpClient.java">AsyncHttpClient</a> /
<a href="https://github.com/activej/activej/blob/v4.1/core-http/src/main/java/io/activej/http/HttpResponse.java">HttpResponse</a> in
<a href="https://github.com/activej/activej/blob/v4.1/core-http/src/main/java/io/activej/http/AsyncServlet.java">AsyncServlet</a>) are not recycled anymore
(only message body is recycled if present), thus making it possible to cache and reuse them</li></ul></li><li>Added <code>Promise&lt;Void&gt; fetch()</code> method to <a href="https://github.com/activej/activej/blob/v4.1/extra/cloud-ot/src/main/java/io/activej/ot/OTStateManager.java">OTStateManager</a>.
Fetched changes are stored without being applied to the current state.</li><li>Improved casting of deserialized fields in <a href="https://serializer.activej.io/">ActiveJ Serializer</a></li><li>Added default <a href="https://github.com/activej/activej/blob/v4.1/util-common/src/main/java/io/activej/common/api/Initializer.java">Initializer</a>s
for common components</li><li>Added preconditions when applying operations to <a href="https://github.com/activej/activej/blob/v4.1/extra/cloud-etl/src/main/java/io/activej/etl/LogOTState.java">LogOTState</a></li><li>Removed <a href="https://github.com/activej/activej/blob/v4.1/boot-jmx/src/main/java/io/activej/jmx/JmxModule.java">JmxModule</a> from common HTTP launchers</li><li>Added new JMX stats to <a href="https://github.com/activej/activej/blob/v4.1/cloud-rpc/src/main/java/io/activej/rpc/client/RpcClient.java">RpcClient</a>
for monitoring unresponsive RPC servers</li><li>Added <a href="https://github.com/activej/activej/blob/v4.1/util-common/src/main/java/io/activej/common/ApplicationSettings.java">ApplicationSettings</a>
method for obtaining a default <code>Locale</code></li><li>Stick to using <code>en-US</code> locale when formatting <a href="https://github.com/activej/activej/blob/v4.1/boot-jmx-stats/src/main/java/io/activej/jmx/stats/EventStats.java">EventStats</a>
and <a href="https://github.com/activej/activej/blob/v4.1/boot-jmx-stats/src/main/java/io/activej/jmx/stats/ValueStats.java">ValueStats</a></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 4.0 - Refactoring of exceptions]]></title>
        <id>ActiveJ 4.0 - Refactoring of exceptions</id>
        <link href="https://activej.io/blog/2021/02/16/v4.0"/>
        <updated>2021-02-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v4.0 was released Feb 16, 2021 (see on Maven).]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v4.0 was released Feb 16, 2021 (<a href="https://mvnrepository.com/artifact/io.activej/activej/4.0">see on Maven</a>).
This release included major refactoring of exceptions. This release also introduces asynchronous high-performance
ActiveJ Redis client. Other components were optimized for the performance.</p><ul><li><strong>Exceptions refactoring</strong><ul><li>All public constant exceptions were removed/hidden.</li><li><strong>StacklessException</strong> was removed. Classes that extended <strong>StacklessException</strong> now extend regular <strong>Exception</strong>,
some of them are still <em>stackless</em>. <em>Stackless</em> exceptions provide the ability to include stack trace for debugging purposes.
This can be achieved by setting exception&#x27;s <a href="https://github.com/activej/activej/blob/v4.0/util-common/src/main/java/io/activej/common/ApplicationSettings.java">ApplicationSetting</a><code>withStackTrace</code> to <strong>true</strong>.</li><li>Renamed exceptions:<ul><li><strong>ParseException</strong> -&gt; <a href="https://github.com/activej/activej/blob/v4.0/util-common/src/main/java/io/activej/common/exception/MalformedDataException.java">MalformedDataException</a></li><li><strong>HttpException</strong> -&gt; <a href="https://github.com/activej/activej/blob/v4.0/core-http/src/main/java/io/activej/http/HttpError.java">HttpError</a>
(<a href="https://github.com/activej/activej/blob/v4.0/core-http/src/main/java/io/activej/http/HttpException.java">HttpException</a>
is now a parent class for other HTTP exceptions)</li><li><strong>OTTransformException</strong> -&gt; <a href="https://github.com/activej/activej/blob/v4.0/extra/cloud-ot/src/main/java/io/activej/ot/exception/TransformException.java">TransformException</a></li><li><strong>OTNoCommitException</strong> -&gt; <a href="https://github.com/activej/activej/blob/v4.0/extra/cloud-ot/src/main/java/io/activej/ot/exception/NoCommitException.java">NoCommitException</a></li></ul></li><li>Added new exceptions for top-level components, etc.</li></ul></li><li>Introduced asynchronous lightweight high-performance <a href="https://github.com/activej/activej/tree/v4.0/extra/cloud-redis">ActiveJ Redis Client</a>
with extendable API. <a href="https://github.com/activej/activej/tree/v4.0/examples/cloud/redis">Examples</a> and <a href="https://github.com/activej/activej/tree/v4.0/benchmarks/redis">benchmarks</a>
for Redis client were added as well.</li><li>Optimizations in network code, HTTP processing (especially in pipelining mode), and data serialization.</li><li>Renamed <strong>ByteBufQueue</strong> -&gt; <a href="https://github.com/activej/activej/blob/v4.0/core-bytebuf/src/main/java/io/activej/bytebuf/ByteBufs.java">ByteBufs</a>.
Added byte index to <strong>ByteScanner</strong>, refactored <code>ByteBufs::scanBytes</code>.
Added <code>ByteBufs::consumeBytes</code> method that works like <code>ByteBufs::scanBytes</code>, but actually consumes scanned bytes/bufs.</li><li>Removed <strong>StreamMapper</strong>, now stream mapping can be achieved via <code>StreamFilter.mapper(Function&lt;I, O&gt;)</code></li><li>Removed <strong>Transducer</strong>, <strong>StreamTransducer</strong>, <strong>AbstractStreamReducer</strong>, <strong>StreamMerger</strong> classes. Merging of streams can be
done via <a href="https://github.com/activej/activej/blob/v4.0/core-datastream/src/main/java/io/activej/datastream/processor/StreamReducer.java">StreamReducer</a></li><li>Renamed <strong>MergeSortReducer</strong> -&gt; <strong>MergeReducer</strong>, <strong>MergeDistinctReducer</strong> -&gt; <strong>DeduplicateReducer</strong></li><li>Added ability to obtain irrelevant chunks from <a href="https://github.com/activej/activej/blob/v4.0/extra/cloud-lsmt-cube/src/main/java/io/activej/cube/Cube.java">Cube</a>
by calling <code>Cube::getIrrelevantChunks</code>. Irrelevant chunks can be cleaned up by calling <code>CubeConsolidationController::cleanupIrrelevantChunks</code>.</li><li>Added JUnit test rule <a href="https://github.com/activej/activej/blob/v4.0/test/src/main/java/io/activej/test/rules/ClassBuilderConstantsRule.java">ClassBuilderConstantsRule</a>
which validates that all of the <a href="https://github.com/activej/activej/blob/v4.0/core-codegen/src/main/java/io/activej/codegen/ClassBuilder.java">ClassBuilder</a>&#x27;s
static constants are cleared after test passes.</li><li>Renamed most classes/methods that contained <em>parse</em> to contain <em>decode</em> instead.</li></ul>]]></content>
    </entry>
</feed>
"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[6487],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return t?i.createElement(h,c(c({ref:n},l),{},{components:t})):i.createElement(h,c({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,c[1]=o;for(var p=2;p<a;p++)c[p]=t[p];return i.createElement.apply(null,c)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},77618:function(e,n,t){var i=t(67294),r=t(39962);n.Z=function(e){var n=e.url,t=e.text,a=e.isInline,c=void 0===a||a,o=e.children,s=(0,r.Z)().siteConfig,p=n.startsWith("/examples")?s.customFields.githubExamplesBranch:s.customFields.githubBranch;return i.createElement("a",{style:c?{}:{display:"block",marginBottom:"16px"},href:s.customFields.githubUrl+"/"+p+n,target:"_blank"},t||o)}},77210:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var i=t(83117),r=t(80102),a=(t(67294),t(3905)),c=t(77618),o=["components"],s={sidebar_label:"Speeding up dependency injection"},p="Speeding up dependency injection",l={unversionedId:"inject/speeding-up-injection",id:"inject/speeding-up-injection",isDocsHomePage:!1,title:"Speeding up dependency injection",description:"ActiveJ Specializer optimization",source:"@site/docs/inject/speeding-up-injection.mdx",sourceDirName:"inject",slug:"/inject/speeding-up-injection",permalink:"/ru/inject/speeding-up-injection",tags:[],version:"current",frontMatter:{sidebar_label:"Speeding up dependency injection"},sidebar:"docs",previous:{title:"Transient bindings",permalink:"/ru/inject/transient-bindings"},next:{title:"Under the hood",permalink:"/ru/inject/under-the-hood"}},u=[{value:"ActiveJ Specializer optimization",id:"activej-specializer-optimization",children:[],level:2},{value:"How it works",id:"how-it-works",children:[],level:2},{value:"Speeding up RPC request processing",id:"speeding-up-rpc-request-processing",children:[],level:2}],d={toc:u};function m(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"speeding-up-dependency-injection"},"Speeding up dependency injection"),(0,a.kt)("h2",{id:"activej-specializer-optimization"},"ActiveJ Specializer optimization"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/ru/specializer"},(0,a.kt)("strong",{parentName:"a"},"ActiveJ Specializer"))," is a library that optimizes code for the JVM. You can simply combine\nit with ActiveJ Inject and speed up your code by ",(0,a.kt)(c.Z,{text:"up to 30%",url:"/benchmarks/inject/src/main/java/io/activej/inject/ActiveJDirectScopebindBenchmark.java",mdxType:"Githublink"}),"\nTo set up ActiveJ Specializer, simply use ",(0,a.kt)("inlineCode",{parentName:"p"},"Injector.useSpecializer()")," before instantiating the ",(0,a.kt)("strong",{parentName:"p"},"Injector"),".\nActiveJ Inject compiles bindings at runtime into a highly efficient representation. When combined with ActiveJ Specializer,\nbindings can be turned into bytecode, which will be just as efficient as manually written code. This way, you get\nmaximum performance in real-life projects without having to maintain complex manual code."),(0,a.kt)("h2",{id:"how-it-works"},"How it works"),(0,a.kt)("p",null,"To understand how ActiveJ Specializer works, you can read the ",(0,a.kt)("a",{parentName:"p",href:"/ru/specializer"},"specializer documentation"),".\nHere we will use a simple example to try to explain how the specializer works in relation to ActiveJ Inject."),(0,a.kt)("p",null,"The specializer transforms class instances into a special classes in which instance methods are replaced with static methods\nand instance fields are replaced with static fields. Instances that are specialized are actually instances of a ",(0,a.kt)(c.Z,{text:"CompiledBinding",url:"/core-inject/src/main/java/io/activej/inject/impl/CompiledBinding",mdxType:"Githublink"})," class."),(0,a.kt)("p",null,"Suppose we have a module that defines the following binding:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Provides\nInteger length(String string) {\n    return string.length();\n}\n")),(0,a.kt)("p",null,"The compiled bindings here may look like this (a simplified version):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class CompiledBindingImpl<R, U> implements CompiledBinding<R> {\n    private final CompiledBinding<U> otherBinding;\n\n    private R instance;\n\n    public CompiledBindingImpl(CompiledBinding<U> otherBinding) {\n        this.otherBinding = otherBinding;\n    }\n\n    public R getInstance() {\n        if (instance != null) {\n            return instance;\n        } else {\n            U otherInstance = otherBinding.getInstance();\n            this.instance = createInstance(otherInstance);\n            return this.instance;\n        }\n    }\n\n    protected R createInstance(U otherInstance) {\n        // ...\n    }\n}\n")),(0,a.kt)("p",null,"If we use ",(0,a.kt)("inlineCode",{parentName:"p"},"Injector.useSpecializer()")," before creating the injector, we get a specialized compiled binding (a simplified version):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class CompiledBindingInteger implements CompiledBinding<Integer> {\n    private static Integer instance;\n\n    public Integer getInstance() {\n        return getInstanceSpecialized();\n    }\n\n    public static Integer getInstanceSpecialized() {\n        if (instance != null) {\n            return instance;\n        } else {\n            String stringInstance = CompiledBindingString.getInstanceSpecialized();\n            this.instance = createInstance(stringInstance);\n            return this.instance;\n        }\n    }\n\n    public static Integer createInstance(String otherInstance) {\n        // ...\n    }\n}\n")),(0,a.kt)("p",null,"Because the specializer replaced instance methods with static methods and instance fields with static fields, this allows for\nadditional JVM optimizations and also neglects the overhead of dynamic dispatching. Also, this may seem like minimal\noptimization, but imagine if you have a huge dependency graph and need to create instances at runtime. For example, when\nusing ActiveJ Inject to handle HTTP requests, when you need to instantiate new objects at every HTTP request. In this\nscenario, the performance boost of using the specializer would be significant."),(0,a.kt)("h2",{id:"speeding-up-rpc-request-processing"},"Speeding up RPC request processing"),(0,a.kt)("p",null,"We created an ",(0,a.kt)(c.Z,{text:"example",url:"/examples/cloud/rpc/src/main/java/specializer/ScopedRpcServerExample.java",mdxType:"Githublink"})," of\nusing ActiveJ Inject + ActiveJ Specializer to improve the performance of an RPC server that uses dependency injection to process RPC\nrequests. To learn more about ActiveJ RPC you can visit ",(0,a.kt)("a",{parentName:"p",href:"/rpc"},"this page"),"."),(0,a.kt)("p",null,"The dependency graph on the server is similar to the one show in the ",(0,a.kt)("a",{parentName:"p",href:"/inject/cookbook-example"},"Cookbook example"),". Each incoming RPC\nrequest is handled within the RPC ",(0,a.kt)("a",{parentName:"p",href:"/inject/scopes"},"scope"),"."),(0,a.kt)("p",null,"The example also comes with a dedicated ",(0,a.kt)(c.Z,{text:"benchmark tool",url:"/examples/cloud/rpc/src/main/java/specializer/ScopedRpcBenchmarkClient.java",mdxType:"Githublink"})," that\nyou can run to measure server performance."),(0,a.kt)("p",null,"Try running the server and the benchmark tool as-is and measure the performance. Then comment out the ",(0,a.kt)("inlineCode",{parentName:"p"},"Injector.useSpecializer()")," line\nin ",(0,a.kt)(c.Z,{text:"ScopedRpcServerExample",url:"/examples/cloud/rpc/src/main/java/specializer/ScopedRpcServerExample.java",mdxType:"Githublink"})," and run\nthe server and the benchmark tool again. You should see significant performance gains over not using ActiveJ Specializer.\nWe have measured server performance gains of up to 2x."))}m.isMDXComponent=!0}}]);
(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[3023],{77618:function(e,n,t){"use strict";var a=t(67294),r=t(39962);n.Z=function(e){var n=e.url,t=e.text,i=e.isInline,o=void 0===i||i,l=e.children,c=(0,r.Z)().siteConfig,p=n.startsWith("/examples")?c.customFields.githubExamplesBranch:c.customFields.githubBranch;return a.createElement("a",{style:o?{}:{display:"block",marginBottom:"16px"},href:c.customFields.githubUrl+"/"+p+n,target:"_blank"},t||l)}},14304:function(e,n,t){"use strict";var a=t(67294),r=t(21140),i=t.n(r);i().initialize({startOnLoad:!0});n.Z=function(e){var n=e.chart;return(0,a.useEffect)((function(){i().contentLoaded()}),[]),a.createElement("div",{className:"mermaid"},n)}},77815:function(e,n,t){"use strict";t(67294);var a=t(39962);n.Z=function(e){var n=e.name,t=(0,a.Z)().siteConfig;if(!n)throw new Error("Variable name is required");if(void 0===t.customFields[n])throw new Error("Variable "+n+" not exist");return t.customFields[n]}},2915:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return m},metadata:function(){return u},toc:function(){return v},default:function(){return k}});var a=t(83117),r=t(80102),i=(t(67294),t(3905)),o=t(77618),l=t(77815),c=t(14304),p=["components"],s={title:"ActiveJ | Net, \u0432\u044b\u0441\u043e\u043a\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 Netty \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0431\u0435\u0437 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432",description:"\u0421\u043b\u043e\u0439 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u043a\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 HTTP, RPC, TCP \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0431\u0435\u0437 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c.",sidebar_label:"Net",keywords:["tcp","rpc","http","java","java framework","\u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 spring","jetty \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430","netty \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430","eventloop","\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0441\u0435\u0440\u0432\u0435\u0440","async"]},m="Net",u={unversionedId:"async-io/net",id:"async-io/net",isDocsHomePage:!1,title:"ActiveJ | Net, \u0432\u044b\u0441\u043e\u043a\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 Netty \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0431\u0435\u0437 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432",description:"\u0421\u043b\u043e\u0439 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u043a\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 HTTP, RPC, TCP \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0431\u0435\u0437 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c.",source:"@site/i18n/ru/docusaurus-plugin-content-docs/current/async-io/net.mdx",sourceDirName:"async-io",slug:"/async-io/net",permalink:"/ru/async-io/net",tags:[],version:"current",frontMatter:{title:"ActiveJ | Net, \u0432\u044b\u0441\u043e\u043a\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 Netty \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0431\u0435\u0437 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432",description:"\u0421\u043b\u043e\u0439 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u0431\u043e\u0440\u043a\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 HTTP, RPC, TCP \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0431\u0435\u0437 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c.",sidebar_label:"Net",keywords:["tcp","rpc","http","java","java framework","\u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 spring","jetty \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430","netty \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430","eventloop","\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0441\u0435\u0440\u0432\u0435\u0440","async"]},sidebar:"docs",previous:{title:"Datastream",permalink:"/ru/async-io/datastream"},next:{title:"Launcher",permalink:"/ru/boot/launcher"}},v=[{value:"\u041e\u0431\u0437\u043e\u0440",id:"\u043e\u0431\u0437\u043e\u0440",children:[],level:2},{value:"\u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438",id:"\u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438",children:[],level:2},{value:"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u043e\u043a\u0435\u0442\u044b",id:"\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435-\u0441\u043e\u043a\u0435\u0442\u044b",children:[],level:2},{value:"\u0421\u0435\u0440\u0432\u0435\u0440",id:"\u0441\u0435\u0440\u0432\u0435\u0440",children:[],level:2},{value:"\u041f\u0440\u0438\u043c\u0435\u0440\u044b",id:"\u043f\u0440\u0438\u043c\u0435\u0440\u044b",children:[{value:"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0440\u043e\u0437\u0435\u0442\u043a\u0438 \u043f\u0438\u043d\u0433-\u043f\u043e\u043d\u0433",id:"\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435-\u0440\u043e\u0437\u0435\u0442\u043a\u0438-\u043f\u0438\u043d\u0433-\u043f\u043e\u043d\u0433",children:[],level:3},{value:"\u041a\u043b\u0438\u0435\u043d\u0442 CSP TCP",id:"\u043a\u043b\u0438\u0435\u043d\u0442-csp-tcp",children:[],level:3},{value:"\u0421\u0435\u0440\u0432\u0435\u0440 CSP TCP",id:"\u0441\u0435\u0440\u0432\u0435\u0440-csp-tcp",children:[],level:3},{value:"\u041a\u043b\u0438\u0435\u043d\u0442 Datastream TCP",id:"\u043a\u043b\u0438\u0435\u043d\u0442-datastream-tcp",children:[],level:3},{value:"Datastream TCP Server",id:"datastream-tcp-server",children:[],level:3}],level:2}],d={toc:v};function k(e){var n=e.components,t=(0,r.Z)(e,p);return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"net"},"Net"),(0,i.kt)("h2",{id:"\u043e\u0431\u0437\u043e\u0440"},"\u041e\u0431\u0437\u043e\u0440"),(0,i.kt)("p",null,"\u0423\u0434\u043e\u0431\u043d\u0430\u044f \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430 Netty, Apache Mina \u0438 \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u043c \u0434\u043b\u044f \u0432\u044b\u0441\u043e\u043a\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0439. \u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0441\u043b\u043e\u0439 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u0438 \u043f\u043e\u0432\u0435\u0440\u0445 ",(0,i.kt)("a",{parentName:"p",href:"/ru/async-io/eventloop"},(0,i.kt)("inlineCode",{parentName:"a"},"Eventloop"))," \u0438 Java NIO Adapters \u0434\u043b\u044f ",(0,i.kt)(o.Z,{url:"/core-net/src/main/java/io/activej/net/socket/tcp/AsyncTcpSocket.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"p"},"AsyncTcpSocket"))," \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 ",(0,i.kt)(o.Z,{url:"/core-net/src/main/java/io/activej/net/socket/udp/AsyncUdpSocket.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"p"},"AsyncUdpSocket"))),(0,i.kt)("h2",{id:"\u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438"},"\u0425\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 ",(0,i.kt)("inlineCode",{parentName:"li"},"Promises")," \u0434\u043b\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0447\u0442\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u043f\u0438\u0441\u0438"),(0,i.kt)("li",{parentName:"ul"},"\u0421\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0441 ",(0,i.kt)("a",{parentName:"li",href:"/ru/async-io/csp"},(0,i.kt)("inlineCode",{parentName:"a"},"CSP"))," ",(0,i.kt)(o.Z,{url:"/core-csp/src/main/java/io/activej/csp/ChannelSupplier.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"li"},"ChannelSupplier"))," \u0438 ",(0,i.kt)(o.Z,{url:"/core-csp/src/main/java/io/activej/csp/ChannelConsumer.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"li"},"ChannelConsumer"))," AsyncTcpSocket \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043a\u0430\u043a CSP-\u043a\u0430\u043d\u0430\u043b \u0441\u043e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u043c \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0434\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u043a ",(0,i.kt)("a",{parentName:"li",href:"/ru/async-io/csp"},(0,i.kt)("inlineCode",{parentName:"a"},"CSP")),"/",(0,i.kt)("a",{parentName:"li",href:"/ru/async-io/datastream"},(0,i.kt)("inlineCode",{parentName:"a"},"Datastream"))," \u043a\u043e\u043d\u0432\u0435\u0439\u0435\u0440\u0443 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0435\u0433\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c\u0438 (\u0442\u0430\u043a\u0438\u043c\u0438 \u043a\u0430\u043a \u0431\u0443\u0444\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f, \u0441\u0436\u0430\u0442\u0438\u0435, \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f/\u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445, \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0438 \u0442.\u0434.)."),(0,i.kt)("li",{parentName:"ul"},"\u042d\u043a\u0441\u0442\u0435\u043d\u0441\u0438\u0432\u043d\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 ",(0,i.kt)("a",{parentName:"li",href:"/ru/misc/bytebuf#bytebufpool"},(0,i.kt)("inlineCode",{parentName:"a"},"ByteBufPool"))," \u0448\u0438\u0440\u043e\u043a\u043e.")),(0,i.kt)("h2",{id:"\u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435-\u0441\u043e\u043a\u0435\u0442\u044b"},"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u043e\u043a\u0435\u0442\u044b"),(0,i.kt)("p",null,"\u041f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 ",(0,i.kt)(o.Z,{url:"/core-net/src/main/java/io/activej/net/socket/tcp/AsyncTcpSocket.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"p"},"TCP \u0441\u043e\u043a\u0435\u0442"))," \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 TLS. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c/\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432/\u0438\u0437 \u0441\u0435\u0442\u0438. \u041c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0431\u043b\u043e\u043a \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 TCP-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432/\u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u0432. Socket \u0438\u043c\u0435\u0435\u0442 \u0447\u0440\u0435\u0437\u0432\u044b\u0447\u0430\u0439\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438 \u0438\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 API, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 ",(0,i.kt)("inlineCode",{parentName:"p"},"read"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"write")," . ",(0,i.kt)("a",{parentName:"p",href:"/ru/async-io/csp"},"CSP")," \u043c\u043e\u0434\u0443\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d \u0434\u043b\u044f \u043e\u0431\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043a\u0435\u0442\u0430 \u0432 ",(0,i.kt)(o.Z,{url:"/core-csp/src/main/java/io/activej/csp/ChannelSupplier.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"p"},"ChannelSupplier"))," \u0438\u043b\u0438 ",(0,i.kt)(o.Z,{url:"/core-csp/src/main/java/io/activej/csp/ChannelConsumer.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"p"},"ChannelConsumer"))),(0,i.kt)("p",null,"\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u0430\u043a\u0436\u0435 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 ",(0,i.kt)(o.Z,{url:"/core-net/src/main/java/io/activej/net/socket/udp/AsyncUdpSocket.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"p"},"UDP \u0441\u043e\u043a\u0435\u0442"))," \u0434\u043b\u044f UDP-\u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u0439."),(0,i.kt)("h2",{id:"\u0441\u0435\u0440\u0432\u0435\u0440"},"\u0421\u0435\u0440\u0432\u0435\u0440"),(0,i.kt)("p",null,"\u0421\u0430\u0439\u0442 ",(0,i.kt)(o.Z,{url:"/core-net/src/main/java/io/activej/net/AbstractServer.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"p"},"AbstractServer"))," \u043a\u043b\u0430\u0441\u0441 \u0441\u043b\u0443\u0436\u0438\u0442 \u043e\u0441\u043d\u043e\u0432\u043e\u0439 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f TCP-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 Eventloop (HTTP-\u0441\u0435\u0440\u0432\u0435\u0440\u044b, RPC-\u0441\u0435\u0440\u0432\u0435\u0440\u044b, \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0435 \u0441\u043b\u0443\u0436\u0431\u044b TCP \u0438 \u0442.\u0434.):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u043a\u0438 ",(0,i.kt)("em",{parentName:"li"},"start/stop")),(0,i.kt)("li",{parentName:"ul"},"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 ",(0,i.kt)(o.Z,{url:"/core-net/src/main/java/io/activej/net/EventloopServer.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"li"},"EventloopServer"))),(0,i.kt)("li",{parentName:"ul"},"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 ",(0,i.kt)(o.Z,{url:"/core-net/src/main/java/io/activej/net/WorkerServer.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"li"},"WorkerServer"))," \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u0441\u0435 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u044b ",(0,i.kt)("inlineCode",{parentName:"li"},"AbstractServer")," \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043b\u0435\u0433\u043a\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432."),(0,i.kt)("li",{parentName:"ul"},"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 ",(0,i.kt)(o.Z,{url:"/core-eventloop/src/main/java/io/activej/eventloop/net/ServerSocketSettings.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"li"},"ServerSocketSettings"))," \u0438 ",(0,i.kt)(o.Z,{url:"/core-eventloop/src/main/java/io/activej/eventloop/net/SocketSettings.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"li"},"SocketSettings")))),(0,i.kt)("p",null,"\u0413\u043e\u0442\u043e\u0432\u044b\u0435 \u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e ",(0,i.kt)(o.Z,{url:"/core-net/src/main/java/io/activej/net/PrimaryServer.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"p"},"PrimaryServer")),' \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0445 Eventloops \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0449\u0438\u043a\u0430. \u041e\u043d \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b "\u043f\u0440\u0438\u043d\u044f\u0442\u044c" \u0438 \u043f\u0435\u0440\u0435\u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0438\u0445 \u0440\u0430\u0431\u043e\u0447\u0438\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b "\u043f\u0440\u0438\u043d\u044f\u0442\u044c" \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u043f\u043e\u0442\u043e\u043a\u0430\u0445 Eventloop.'),(0,i.kt)("h2",{id:"\u043f\u0440\u0438\u043c\u0435\u0440\u044b"},"\u041f\u0440\u0438\u043c\u0435\u0440\u044b"),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440\u044b, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043a\u043b\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c ActiveJ \u0441 GitHub"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/activej/activej\n")),(0,i.kt)("p",{parentName:"div"},"\u0418 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0435\u0433\u043e \u043a\u0430\u043a \u043f\u0440\u043e\u0435\u043a\u0442 Maven. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0442\u0435\u0433 ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(l.Z,{name:"currentVersion",mdxType:"Variable"})),". \u041f\u0435\u0440\u0435\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u0431\u043e\u0440\u043a\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430. \u042d\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 ",(0,i.kt)("inlineCode",{parentName:"p"},"activej/examples/core/net.")))),(0,i.kt)("h3",{id:"\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435-\u0440\u043e\u0437\u0435\u0442\u043a\u0438-\u043f\u0438\u043d\u0433-\u043f\u043e\u043d\u0433"},"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0440\u043e\u0437\u0435\u0442\u043a\u0438 \u043f\u0438\u043d\u0433-\u043f\u043e\u043d\u0433"),(0,i.kt)("p",null,"\u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractServer"),"-... ",(0,i.kt)(o.Z,{url:"/core-net/src/main/java/io/activej/net/SimpleServer.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"p"},"SimpleServer"))," \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 (",(0,i.kt)("inlineCode",{parentName:"p"},"PONG"),"). \u041c\u044b \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c ",(0,i.kt)(o.Z,{url:"/core-net/src/main/java/io/activej/net/socket/tcp/AsyncTcpSocketNio.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"p"},"AsyncTcpSocketNio"))," \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c 3 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (",(0,i.kt)("inlineCode",{parentName:"p"},"PING"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/net/src/main/java/PingPongSocketConnection.java tag=REGION_1",url:"/examples/core/net/src/main/java/PingPongSocketConnection.java",tag:"REGION_1"},"public static void main(String[] args) throws IOException {\n  Eventloop eventloop = Eventloop.create().withCurrentThread();\n\n  SimpleServer server = SimpleServer.create(\n      socket -> {\n        BinaryChannelSupplier bufsSupplier = BinaryChannelSupplier.of(ChannelSupplier.ofSocket(socket));\n        repeat(() ->\n            bufsSupplier.decode(DECODER)\n                .whenResult(x -> System.out.println(x))\n                .then(() -> socket.write(wrapAscii(RESPONSE_MSG)))\n                .map($ -> true))\n            .whenComplete(socket::close);\n      })\n      .withListenAddress(ADDRESS)\n      .withAcceptOnce();\n\n  server.listen();\n\n  AsyncTcpSocketNio.connect(ADDRESS)\n      .whenResult(socket -> {\n        BinaryChannelSupplier bufsSupplier = BinaryChannelSupplier.of(ChannelSupplier.ofSocket(socket));\n        loop(0,\n            i -> i < ITERATIONS,\n            i -> socket.write(wrapAscii(REQUEST_MSG))\n                .then(() -> bufsSupplier.decode(DECODER)\n                    .whenResult(x -> System.out.println(x))\n                    .map($2 -> i + 1)))\n            .whenComplete(socket::close);\n      })\n      .whenException(e -> { throw new RuntimeException(e); });\n\n  eventloop.run();\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(o.Z,{url:"/examples/core/net/src/main/java/PingPongSocketConnection.java",mdxType:"Githublink"},"\u041f\u043e\u043b\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043d\u0430 GitHub."))),(0,i.kt)("h3",{id:"\u043a\u043b\u0438\u0435\u043d\u0442-csp-tcp"},"\u041a\u043b\u0438\u0435\u043d\u0442 CSP TCP"),(0,i.kt)("p",null,"\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 TCP, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 TCP:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/net/src/main/java/csp/TcpClientExample.java tag=REGION_1",url:"/examples/core/net/src/main/java/csp/TcpClientExample.java",tag:"REGION_1"},'private void run() {\n  System.out.println("Connecting to server at localhost (port 9922)...");\n  eventloop.connect(new InetSocketAddress("localhost", 9922), (socketChannel, e) -> {\n    if (e == null) {\n      System.out.println("Connected to server, enter some text and send it by pressing \'Enter\'.");\n      AsyncTcpSocket socket;\n      try {\n        socket = AsyncTcpSocketNio.wrapChannel(getCurrentEventloop(), socketChannel, null);\n      } catch (IOException ioException) {\n        throw new RuntimeException(ioException);\n      }\n\n      BinaryChannelSupplier.of(ChannelSupplier.ofSocket(socket))\n          .decodeStream(ByteBufsDecoder.ofCrlfTerminatedBytes())\n          .streamTo(ChannelConsumer.ofConsumer(buf -> System.out.println(buf.asString(UTF_8))));\n\n      startCommandLineInterface(socket);\n    } else {\n      System.out.printf("Could not connect to server, make sure it is started: %s%n", e);\n    }\n  });\n  eventloop.run();\n}\n\npublic static void main(String[] args) {\n  new TcpClientExample().run();\n}\n')),(0,i.kt)("p",null,"\u041e\u043d \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0447\u0435\u0440\u0435\u0437 \u043a\u0430\u043d\u0430\u043b CSP, \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0438\u0445 \u0438 \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u043a\u043e\u043d\u0441\u043e\u043b\u044c.\n",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(o.Z,{url:"/examples/core/net/src/main/java/csp/TcpClientExample.java",mdxType:"Githublink"},"\u041f\u043e\u043b\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043d\u0430 GitHub."))),(0,i.kt)("h3",{id:"\u0441\u0435\u0440\u0432\u0435\u0440-csp-tcp"},"\u0421\u0435\u0440\u0432\u0435\u0440 CSP TCP"),(0,i.kt)("p",null,"\u041f\u0440\u043e\u0441\u0442\u043e\u0439 TCP \u044d\u0445\u043e-\u0441\u0435\u0440\u0432\u0435\u0440, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0439 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 eventloop:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/net/src/main/java/csp/TcpServerExample.java tag=REGION_1",url:"/examples/core/net/src/main/java/csp/TcpServerExample.java",tag:"REGION_1"},'public static void main(String[] args) throws Exception {\n  Eventloop eventloop = Eventloop.create().withCurrentThread();\n\n  SimpleServer server = SimpleServer.create(socket ->\n      BinaryChannelSupplier.of(ChannelSupplier.ofSocket(socket))\n          .decodeStream(ByteBufsDecoder.ofCrlfTerminatedBytes())\n          .peek(buf -> System.out.println("client:" + buf.getString(UTF_8)))\n          .map(buf -> {\n            ByteBuf serverBuf = ByteBufStrings.wrapUtf8("Server> ");\n            return ByteBufPool.append(serverBuf, buf);\n          })\n          .map(buf -> ByteBufPool.append(buf, CRLF))\n          .streamTo(ChannelConsumer.ofSocket(socket)))\n      .withListenPort(PORT);\n\n  server.listen();\n\n  System.out.println("Server is running");\n  System.out.println("You can connect from telnet with command: telnet localhost 9922 or by running csp.TcpClientExample");\n\n  eventloop.run();\n}\n')),(0,i.kt)("p",null,"\u042d\u0442\u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f, \u0438 \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f, \u043e\u043d \u0440\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u0442 \u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043a\u0430\u043a \u043a\u0430\u043d\u0430\u043b CSP \u0447\u0435\u0440\u0435\u0437 \u0441\u043e\u043a\u0435\u0442.\n",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(o.Z,{url:"/examples/core/net/src/main/java/csp/TcpServerExample.java",mdxType:"Githublink"},"\u041f\u043e\u043b\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043d\u0430 GitHub."))),(0,i.kt)("h3",{id:"\u043a\u043b\u0438\u0435\u043d\u0442-datastream-tcp"},"\u041a\u043b\u0438\u0435\u043d\u0442 Datastream TCP"),(0,i.kt)(c.Z,{chart:"\ngraph TB\n    id3-.->id4\n    \u043f\u043e\u0434\u0433\u0440\u0430\u0444 Client\n    id1(\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u044c \u0438\u043d\u0442\u044b)--\x3eid2(\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0439\u0442\u044b)\n    id2--\x3eid3(\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0431\u0430\u0439\u0442\u044b \u043f\u043e \u0441\u0435\u0442\u0438)\n    id9(\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0431\u0430\u0439\u0442\u044b \u0438\u0437 \u0441\u0435\u0442\u0438)--\x3eid10(\u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0430\u0439\u0442\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0438)\n    id10 --\x3e id11(\u0441\u043e\u0431\u0438\u0440\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a)\n    end\n    id8-.->id9\n    subgraph Server\n    id4(\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0431\u0430\u0439\u0442\u044b \u0438\u0437 \u0441\u0435\u0442\u0438)--\x3eid5(\u0434\u0435\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0430\u0439\u0442\u044b \u0432 ints)\n    id5--\x3eid6(\u043a\u0430\u043a\u0438\u043c-\u0442\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u044d\u0442\u0438\u0445 ints)\n    id6--\x3eid7(\u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0431\u0430\u0439\u0442\u044b)\n    id7--\x3eid8(\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u044d\u0442\u0438 \u0431\u0430\u0439\u0442\u044b \u043f\u043e \u0441\u0435\u0442\u0438)\n    end\n",mdxType:"Mermaid"}),(0,i.kt)("p",null,"\u042d\u0442\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438\u043b\u043b\u044e\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 TCP-\u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u043c ",(0,i.kt)("a",{parentName:"p",href:"/ru/async-io/datastream"},"Datastream")," \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/net/src/main/java/datastream/TcpClientExample.java tag=EXAMPLE",url:"/examples/core/net/src/main/java/datastream/TcpClientExample.java",tag:"EXAMPLE"},'public final class TcpClientExample {\n  public static final int PORT = 9922;\n\n  public static void main(String[] args) {\n    Eventloop eventloop = Eventloop.create().withEventloopFatalErrorHandler(rethrow());\n\n    eventloop.connect(new InetSocketAddress("localhost", PORT), (socketChannel, e) -> {\n      if (e == null) {\n        AsyncTcpSocket socket;\n        try {\n          socket = AsyncTcpSocketNio.wrapChannel(eventloop, socketChannel, null);\n        } catch (IOException ioEx) {\n          throw new RuntimeException(ioEx);\n        }\n\n        StreamSupplier.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n            .transformWith(ChannelSerializer.create(INT_SERIALIZER))\n            .streamTo(ChannelConsumer.ofSocket(socket));\n\n        StreamConsumerToList<String> consumer = StreamConsumerToList.create();\n\n        ChannelSupplier.ofSocket(socket)\n            .transformWith(ChannelDeserializer.create(UTF8_SERIALIZER))\n            .streamTo(consumer);\n\n        consumer.getResult()\n            .whenResult(list -> list.forEach(System.out::println));\n\n      } else {\n        System.out.printf("Could not connect to server, make sure it is started: %s%n", e);\n      }\n    });\n\n    eventloop.run();\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(o.Z,{url:"/examples/core/net/src/main/java/datastream/TcpClientExample.java",mdxType:"Githublink"},"\u041f\u043e\u043b\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043d\u0430 GitHub."))),(0,i.kt)("h3",{id:"datastream-tcp-server"},"Datastream TCP Server"),(0,i.kt)("p",null,"\u042d\u0442\u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 ",(0,i.kt)("inlineCode",{parentName:"p"},"\u0421\u0435\u0440\u0432\u0435\u0440")," \u0438\u0437 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0439 \u0432\u044b\u0448\u0435 \u0438\u043b\u043b\u044e\u0441\u0442\u0440\u0430\u0446\u0438\u0438:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/net/src/main/java/datastream/TcpServerExample.java tag=EXAMPLE",url:"/examples/core/net/src/main/java/datastream/TcpServerExample.java",tag:"EXAMPLE"},'public final class TcpServerExample {\n\n  public static void main(String[] args) throws IOException {\n    Eventloop eventloop = Eventloop.create();\n\n    eventloop.listen(new InetSocketAddress("localhost", TcpClientExample.PORT), ServerSocketSettings.create(100), channel -> {\n      AsyncTcpSocket socket;\n\n      try {\n        socket = AsyncTcpSocketNio.wrapChannel(eventloop, channel, null);\n        System.out.println("Client connected: " + channel.getRemoteAddress());\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n\n      ChannelSupplier.ofSocket(socket)\n          .transformWith(ChannelDeserializer.create(INT_SERIALIZER))\n          .transformWith(StreamFilter.mapper(x -> x + " times 10 = " + x * 10))\n          .transformWith(ChannelSerializer.create(UTF8_SERIALIZER))\n          .streamTo(ChannelConsumer.ofSocket(socket));\n    });\n\n    System.out.println("Connect to the server by running datastream.TcpClientExample");\n\n    eventloop.run();\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(o.Z,{url:"/examples/core/net/src/main/java/datastream/TcpServerExample.java",mdxType:"Githublink"},"\u041f\u043e\u043b\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0441\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u043d\u0430 GitHub."))))}k.isMDXComponent=!0},11748:function(e,n,t){var a={"./locale":89234,"./locale.js":89234};function r(e){var n=i(e);return t(n)}function i(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}r.keys=function(){return Object.keys(a)},r.resolve=i,e.exports=r,r.id=11748}}]);
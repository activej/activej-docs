<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://activej.io/ru/blog</id>
    <title>ActiveJ 5.5 Blog</title>
    <updated>2023-06-15T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://activej.io/ru/blog"/>
    <subtitle>ActiveJ 5.5 Blog</subtitle>
    <icon>https://activej.io/ru/./img/favicon.png</icon>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.5 - Performance improvements and bug fixes]]></title>
        <id>ActiveJ 5.5 - Performance improvements and bug fixes</id>
        <link href="https://activej.io/ru/blog/2023/06/15/v5.5"/>
        <updated>2023-06-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.5 was released on Jun 15,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.5 was released on Jun 15,
2023 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.5">see on Maven</a>). This release
introduces bug fixes, as well as some performance improvements.</p><ul><li>General<ul><li>Updated dependency versions.</li><li>Changed logging levels in some components to be more appropriate.</li><li>Added method for parsing <code>InetSocketAddress</code> that tries to resolve the address.</li><li>Made <code>Checks</code> enabled by default if Java&#x27;s assertions are enabled.</li></ul></li><li><a href="/misc/bytebuf">ByteBuf</a><ul><li>Fixed UTF-8 encoding in <code>ByteBufStrings</code>.</li></ul></li><li><a href="/async-io/eventloop">Eventloop</a><ul><li>Improved performance of scheduled tasks. Minimized garbage collection required for task scheduling.</li></ul></li><li><a href="/inject">Inject</a><ul><li>Added the ability to create bindings out of Java&#x27;s constructors.</li><li>Simplified wildcard types in <code>KeyPattern</code>.</li></ul></li><li><a href="/rpc">RPC</a><ul><li>Improved <code>RpcClient</code> start/stop routine.</li><li>Added launcher for multithreaded RPC server.</li><li>Added <code>RpcClient#withForcedShutdown</code> method to allow shutting down the <code>RpcClient</code> even if there are
active connections.</li></ul></li><li><a href="/http">HTTP</a><ul><li>Fixed inspector notification about malformed data exceptions.</li><li>Improved shutdown routine of <code>HttpClient</code>.</li><li>Added the ability to forcefully shutdown <code>HttpClient</code>.</li><li>Made response code of <code>HttpResponse</code> mutable.</li><li>Fixed multipart/form-data request parsing by considering the last <code>CRLF</code> optional,
as per <a href="https://datatracker.ietf.org/doc/html/rfc2046#section-5.1.1">RFC</a>.</li></ul></li><li><a href="/async-io/datastream">Datastream</a><ul><li>Fixed <code>ChannelSerializer</code> behavior on exception occurances.</li><li>Added <code>StreamLimiter</code> class that limits number of items that pass via datastream pipeline.</li><li>Added <code>StreamSkip</code> class that omits N first items that pass via datastream pipeline.</li><li>Fixed stats aggregation in <code>StreamStatsForwarder</code>.</li></ul></li><li><a href="/codegen">Codegen</a><ul><li>Fixed method invocations on interfaces.</li><li>Improved class caching in <code>RecordScheme</code>.</li><li>Compared fields in <code>RecordScheme</code> are now transfered to the projection.</li></ul></li><li><a href="/serializer">Serializer</a><ul><li>Restricted non-static inner classes to be used for serialization.</li><li>Fixed closing routine in <code>StreamInput</code>.</li><li>Removed caching from <code>StreamCodecs</code>.</li><li>Added <code>StreamCodecs#reference</code> method that introduces an effective way to serialize/deserialize duplicate item
instances.</li></ul></li><li><a href="/specializer">Specializer</a><ul><li>Refactored ActiveJ Specializer to perform well on conditional code.</li></ul></li><li>JMX<ul><li>Added JMX reducers (<code>Average</code>, <code>Any</code>).</li><li>Added built-in support for JMX attributes/operations of <code>Enum</code> type.</li><li>Added built-in support for JMX attributes/operations of <code>InetSocketAddress</code> type.</li></ul></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.4.3 - Simplified custom serializers]]></title>
        <id>ActiveJ 5.4.3 - Simplified custom serializers</id>
        <link href="https://activej.io/ru/blog/2022/09/16/v5.4.3"/>
        <updated>2022-09-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.4.3 was released on Sep 16,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.4.3 was released on Sep 16,
2022 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.4.3">see on Maven</a>). This release introduces a simplified
approach for creating serializers for custom classes.</p><ul><li>Added an abstract <code>SimpleSerializerDef</code> class that simplifies the creation of custom serializers. Serializers for custom
classes can now be created without the use of the Expressions API</li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.4.2 - Minor bug fixes]]></title>
        <id>ActiveJ 5.4.2 - Minor bug fixes</id>
        <link href="https://activej.io/ru/blog/2022/09/05/v5.4.2"/>
        <updated>2022-09-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.4.2 was released on Sep 5,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.4.2 was released on Sep 5,
2022 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.4.2">see on Maven</a>). This release includes
minor bug fixes for stream codecs.</p><ul><li>Fixed a bug when a stream codec tried to safely decode more items than are present in the input of the stream. </li><li>Relative path tests in <a href="/fs">ActiveJ FS</a> are ignored when the project directory is located on a drive other than the temporary directory.</li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.4.1 - Stream Codecs optimizations]]></title>
        <id>ActiveJ 5.4.1 - Stream Codecs optimizations</id>
        <link href="https://activej.io/ru/blog/2022/08/31/v5.4.1"/>
        <updated>2022-08-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.4.1 was released on Aug 31,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.4.1 was released on Aug 31,
2022 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.4.1">see on Maven</a>). This release includes
optimizations for Stream Codecs to optimize memory usage.</p><ul><li>Optimized encoding and decoding of arrays of primitives, as well as arrays of variable-length ints and longs.</li><li>Minimized the required number of flushes when writing data to a byte array.</li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.4 - Codegen and Serializer optimizations]]></title>
        <id>ActiveJ 5.4 - Codegen and Serializer optimizations</id>
        <link href="https://activej.io/ru/blog/2022/08/19/v5.4"/>
        <updated>2022-08-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.4 was released on Aug 19,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.4 was released on Aug 19,
2022 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.4">see on Maven</a>). This release includes
improvements to <a href="/codegen">ActiveJ Codegen</a>,<a href="/serializer">ActiveJ Serializer</a>, and minor fixes to other
components.</p><ul><li><a href="/codegen">ActiveJ Codegen</a><ul><li>Generated method calls that use <code>self</code> instances as method arguments are now automatically resolved.</li><li>Slightly optimized method lookup.</li></ul></li><li><a href="/serializer">ActiveJ Serializer</a><ul><li>Optimized serializer builder&#x27;s cache. Ensured that previously defined serializers are reused.</li><li>Ensured that dangling references are cleaned up if serialization fails.</li></ul></li><li><a href="/async-io/net">Net</a><ul><li>Fix order of promise completion when SSL socket receives <code>close_notify</code> message.</li></ul></li><li><a href="/http">HTTP</a><ul><li>Multimap of HTTP headers is now properly resized.</li><li>Fatal errors in HTTP server connections are now handled correctly.</li><li>Added the <code>HttpMessage#takeBodyStream</code> method instead of the <code>HttpMessage#getBodyStream</code> method as it has a more
semantically correct name. <code>HttpMessage#getBodyStream</code> method is now deprecated and is a candidate for removal in
the next major release.</li></ul></li><li>Misc<ul><li>Added additional application error logging in Launcher.</li><li>Fixed <code>@NotNull</code> annotations for function parameters.</li></ul></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.3 - JMX improvements]]></title>
        <id>ActiveJ 5.3 - JMX improvements</id>
        <link href="https://activej.io/ru/blog/2022/06/17/v5.3"/>
        <updated>2022-06-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.3 was released Jun 17,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.3 was released Jun 17,
2022 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.3">see on Maven</a>). This release includes
minor improvements to JMX, as well as several bug fixes.</p><ul><li>JMX<ul><li>Added the ability to use custom <code>JmxReducer</code>s for <code>@JmxOperation</code>s. </li><li>JMX attributes and operations of <code>Map</code> type now respect the specified <code>JmxReducer</code> when reducing map values.</li><li>Added the ability to specify a predicate for whether worker instances should be registered in JMX or not.</li></ul></li><li><a href="/codegen">ActiveJ Codegen</a><ul><li>Ability to use parameterized types for record fields has been added.</li></ul></li><li><a href="/http">HTTP</a><ul><li>Fixed a bug with quality factors parsing in headers.</li><li>Improved handling of runtime exceptions.</li></ul></li><li><a href="/async-io/datastream">Datastream</a><ul><li>Fixed acknowledgement completion in <code>StreamReducer</code> as well as in several <code>StreamConsumer</code>s</li></ul></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.2 - Minor improvements]]></title>
        <id>ActiveJ 5.2 - Minor improvements</id>
        <link href="https://activej.io/ru/blog/2022/04/19/v5.2"/>
        <updated>2022-04-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.2 was released Apr 19,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.2 was released Apr 19,
2022 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.2">see on Maven</a>). This release includes
minor improvements mainly for <a href="/http">HTTP client/server</a> and <a href="/serializer">ActiveJ Serializer</a>.</p><ul><li><a href="/http">HTTP</a><ul><li>Added dedicated enum for setting <code>SameSite</code> policy on cookies. </li><li>Malformed HTTP requests now result in a code <code>400</code> response rather than connection drop.</li><li>HTTP inspectors can now inspect malformed HTTP requests and responses.</li><li><a href="https://github.com/activej/activej/blob/v5.1.1/core-http/src/main/java/io/activej/http/RoutingServlet.java">RoutingServlet</a> now correctly decodes percent-encoded URL path parts.</li><li>Added checks for DNS label sizes.</li><li>Minor improvements of the <a href="https://github.com/activej/activej/blob/v5.1.1/core-http/src/main/java/io/activej/http/UrlParser.java">UrlParser</a>.</li></ul></li><li><a href="/serializer">ActiveJ Serializer</a><ul><li>Added additional preconditions for subclass serializer.</li><li>Removed unnecessary caching from <a href="https://github.com/activej/activej/blob/v5.1.1/core-serializer/src/main/java/io/activej/serializer/SerializerBuilder.java">SerializerBuilder</a>.</li></ul></li><li><a href="/fs">ActiveJ FS</a><ul><li>Storage paths are now normalized, so local file systems now work properly with relative storage paths.</li></ul></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.1 - Boot and ActiveJ FS improvements]]></title>
        <id>ActiveJ 5.1 - Boot and ActiveJ FS improvements</id>
        <link href="https://activej.io/ru/blog/2022/01/04/v5.1"/>
        <updated>2022-01-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.1 was released Jan 4,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.1 was released Jan 4,
2022 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.1">see on Maven</a>). This release includes
improvements to <a href="/fs">ActiveJ FS</a>, <a href="/inject">ActiveJ Inject</a> and <a href="/boot/launcher">boot</a> modules in general.</p><ul><li><a href="/inject">ActiveJ Inject</a> and <a href="/boot/launcher">boot</a> modules<ul><li><a href="https://github.com/activej/activej/blob/v5.1/boot-triggers/src/main/java/io/activej/trigger/TriggersModule.java">TriggersModule</a>
now properly handles <a href="/inject/optional-dependencies">optional dependencies</a></li><li>Nested optional dependencies (e.g. <code>OptionalDependency&lt;OptionalDependency&lt;?&gt;&gt;</code>) are prohibited</li><li>Services (as well as those obtained from an optional dependencies) are guaranteed to start/stop exactly once</li><li>Added shortcuts for obtaining optional dependencies from <a href="https://github.com/activej/activej/blob/v5.1/core-inject/src/main/java/io/activej/inject/Injector.java">Injector</a></li></ul></li><li><a href="/fs">ActiveJ FS</a><ul><li>Added a new <a href="https://github.com/activej/activej/blob/v5.1/cloud-fs/src/main/java/io/activej/fs/exception/ActiveFsStructureException.java">exception</a> to
indicate errors in a structure of a file system.</li><li>Added a precondition that checks whether local file systems (<a href="https://github.com/activej/activej/blob/v5.1/cloud-fs/src/main/java/io/activej/fs/LocalActiveFs.java">LocalActiveFs</a> and
<a href="https://github.com/activej/activej/blob/v5.1/cloud-fs/src/main/java/io/activej/fs/LocalBlockingFs.java">LocalBlockingFs</a>) were started before being used.</li></ul></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.0 - New major release]]></title>
        <id>ActiveJ 5.0 - New major release</id>
        <link href="https://activej.io/ru/blog/2021/10/29/v5.0"/>
        <updated>2021-10-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.0 was released Oct 29,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.0 was released Oct 29,
2021 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.0">see on Maven</a>). This release includes
major changes in <a href="/inject">ActiveJ Inject</a>, <a href="/codegen">ActiveJ Codegen</a>, <a href="/serializer">ActiveJ Serializer</a>
<a href="/async-io/promise">promises API</a>. The release also introduced improved type scanning facility and
overall minor improvements in other components.</p><ul><li><a href="/inject">ActiveJ Inject</a><ul><li>Refactored and simplified inner components to speed up dependency injection and provide better support for binding
<a href="/specializer">specialization</a></li><li>Simplified type resolution in dependency injection</li><li>Added the ability to transform imported and exported bindings using patterns (see <a href="/inject/binding-transformation">example</a>)</li><li>Replaced <code>@Optional</code> annotation with an explicit <a href="https://github.com/activej/activej/blob/v5.0/core-inject/src/main/java/io/activej/inject/binding/OptionalDependency.java">OptionalDependency</a>
class</li></ul></li><li><a href="/codegen">ActiveJ Codegen</a><ul><li>Improved <a href="https://github.com/activej/activej/blob/v5.0/core-codegen/src/main/java/io/activej/codegen/ClassBuilder.java">ClassBuilder</a> and <a href="https://github.com/activej/activej/blob/v5.0/core-codegen/src/main/java/io/activej/codegen/DefiningClassLoader.java">DefiningClassLoader</a> classes</li><li>Class generation may now be 100% lazy</li><li>Added in-memory <a href="https://github.com/activej/activej/blob/v5.0/core-codegen/src/main/java/io/activej/codegen/ClassBuilder.java">ClassBuilder</a> caches</li><li>Added the ability to use <a href="https://github.com/activej/activej/blob/v5.0/core-codegen/src/main/java/io/activej/codegen/BytecodeStorage.java">BytecodeStorage</a> as a persistent cache for generated bytecode</li><li>Added the ability to call super methods as well as protected methods</li><li>Improved built-in expressions for array/collection/map iteration</li></ul></li><li><a href="/serializer">ActiveJ Serializer</a><ul><li>Added the ability to specify serializer annotations directly on type use (see <a href="/serializer/examples#path-based-serialization">example</a>)</li><li>Automatic class member ordering is now supported within the same JVM</li><li>Added support for serializer annotation aliases</li><li>Improved array serialization as well as serialization of booleans</li><li>Refactored class hierarchy of collection serializers. </li><li>Abstract collection serializers now support builder pattern</li></ul></li><li><a href="/async-io/promise">Promise</a><ul><li>Greatly improved exception handling</li><li>Renamed promise chaining methods <code>thenEx</code> and <code>mapEx</code> to <code>then</code> and <code>map</code></li><li>Added new conditional chaining methods as well as dedicated null-handling chaining methods </li><li>All the changing methods now take &quot;throwing&quot; functions. If a checked exception is thrown in a chaining function,
the whole promise is completed exceptionally</li></ul></li><li>Miscellaneous improvements<ul><li>Removed <code>codec</code> module. Components that require JSON marshalling now internally use the
<a href="https://github.com/ngs-doo/dsl-json">DSL-JSON</a> library  </li><li>Added new <a href="https://github.com/activej/activej/tree/v5.0/util-types">types</a> module which contains various reflection and type utilities, including advanced type scanner</li><li><a href="https://github.com/activej/activej/tree/v5.0/util-common">Common</a> module has been massively refactored to make common functions and components more consistent</li><li>Restructured asynchronous exceptions</li><li>Unchecked exception handling can now be precisely configured using a thread-scoped or global
<a href="https://github.com/activej/activej/blob/v5.0/util-common/src/main/java/io/activej/common/exception/FatalErrorHandler.java">FatalErrorHandler facility</a> </li><li>Made ActiveJ compatible with Java 17</li><li>Added various <code>DiscoveryService</code> interfaces for node discovery within server cluster (<a href="/rpc">RPC</a>, <a href="/fs">FS</a>)</li><li>Removed <code>AsyncServletDecorator</code> facility</li><li>Removed <code>StreamCodecRegistry</code> facility</li><li>Multiple small improvements and fixes</li></ul></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 4.3 - Небольшие улучшения для нескольких модулей]]></title>
        <id>ActiveJ 4.3 - Небольшие улучшения для нескольких модулей</id>
        <link href="https://activej.io/ru/blog/2021/05/28/v4.3"/>
        <updated>2021-05-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v4.3 был выпущен 28 мая 2021 (см. на Maven). В этой версии были внесены небольшие улучшения для нескольких модулей.]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v4.3 был выпущен 28 мая 2021 (<a href="https://mvnrepository.com/artifact/io.activej/activej/4.3">см. на Maven</a>). В этой версии были внесены небольшие улучшения для нескольких модулей.</p><ul><li>Добавлен новый метод <code>onConnecting</code> в <a href="https://github.com/activej/activej/blob/v4.3/core-http/src/main/java/io/activej/http/AsyncHttpClient.java">AsyncHttpClient</a> &#x27;s <code>Inspector</code>. Теперь, количество соединений которые создаются могут быть промониторены через <code>JmxInspector#getConnecting</code> аттрибут</li><li>Когда HTTP-соединение закрывается, соответствующее исключение распространяется на поставщиков HTTP-запроса и тела ответа</li><li><a href="https://github.com/activej/activej/blob/v4.3/core-eventloop/src/main/java/io/activej/eventloop/inspector/ThrottlingController.java">ThrottlingController</a> теперь тротлит всю обработку, если задачи последовательно выполняются слишком долго</li><li><a href="https://github.com/activej/activej/blob/v4.3/core-datastream/src/main/java/io/activej/datastream/ForwardingStreamSupplier.java">ForwardingStreamSupplier</a> теперь корректно связывает узел <code>StreamSupplier</code> до <code>StreamConsumer</code></li><li>Исправлена асинхронная рекурсия в <a href="https://github.com/activej/activej/blob/v4.3/core-datastream/src/main/java/io/activej/datastream/csp/ChannelSerializer.java">ChannelSerializer</a></li><li>Отсутствующие показатели в <a href="https://github.com/activej/activej/blob/v4.3/extra/cloud-lsmt-aggregation/src/main/java/io/activej/aggregation/Aggregation.java">Агрегации</a> инициализированы с нулевыми значениями</li><li><a href="https://github.com/activej/activej/blob/v4.3/extra/cloud-lsmt-aggregation/src/main/java/io/activej/aggregation/measure/HyperLogLog.java">HyperLogLog</a> теперь корректно добавляет <code>int</code></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 4.2 - Расширенная функциональность]]></title>
        <id>ActiveJ 4.2 - Расширенная функциональность</id>
        <link href="https://activej.io/ru/blog/2021/04/13/v4.2"/>
        <updated>2021-04-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[* ActiveJ Redis client]]></summary>
        <content type="html"><![CDATA[<ul><li><strong><a href="https://github.com/activej/activej/tree/v4.2/extra/cloud-redis">ActiveJ Redis client</a></strong><ul><li>Добавлен метод <code>connect()</code> в <a href="https://github.com/activej/activej/blob/v4.2/extra/cloud-redis/src/main/java/io/activej/redis/RedisClient.java">RedisClient</a> , который принимают учетные данные для проверки подлинности</li><li>Добавлены новые специальные исключения для модуля ActiveJ:<ul><li><a href="https://github.com/activej/activej/blob/v4.2/extra/cloud-redis/src/main/java/io/activej/redis/RedisAuthenticationException.java">Исключение повторной аутентификации</a></li><li><a href="https://github.com/activej/activej/blob/v4.2/extra/cloud-redis/src/main/java/io/activej/redis/RedisPermissionException.java">Исключение повторного доступа</a></li></ul></li></ul></li><li><strong><a href="https://github.com/activej/activej/blob/v4.2/core-codegen/src/main/java/io/activej/record/RecordScheme.java">RecordScheme</a></strong><ul><li>Добавлена возможность указывать поля в <code>RecordScheme</code>, которые будут использоваться для реализации <code>equals()</code> и <code>hashCode()</code></li><li>Добавлена возможность указывать поля, которые будут использоваться для создания записи <code>Comparator</code></li></ul></li><li><strong><a href="https://github.com/activej/activej/blob/v4.2/util-common/src/main/java/io/activej/common/FileLocker.java">FileLocker</a></strong><ul><li><code>FileLocker</code> - общедоступный конструктор</li><li><code>FileLocker</code> реализует <code>java.io.Closeable</code> интерфейс</li></ul></li><li><strong><a href="https://github.com/activej/activej/blob/v4.2/util-state/src/main/java/io/activej/state/StateManager.java">StateManager</a></strong><ul><li>Добавлены методы <code>tryLoadSnapshot()</code> и <code>tryLoadDiff()</code> , возвращающие <code>null</code> вместо того, чтобы бросать исключение</li><li>Добавлен метод <code>tryLoad()</code> в <a href="https://github.com/activej/activej/blob/v4.2/util-state/src/main/java/io/activej/state/file/FileStateManager.java">FileStateManager</a> , который возвращает <code>null</code> вместо того, чтобы выбросить исключение</li><li>Добавлен метод <code>save()</code> в <a href="https://github.com/activej/activej/blob/v4.2/util-state/src/main/java/io/activej/state/file/FileStateManager.java">FileStateManager</a> , который берет на себя ревизию для сохранения состояния с</li></ul></li><li>Улучшена обработка HTTP-запросов с большими URL-адресами</li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 4.1 - Оптимизация и упрощение]]></title>
        <id>ActiveJ 4.1 - Оптимизация и упрощение</id>
        <link href="https://activej.io/ru/blog/2021/03/19/v4.1"/>
        <updated>2021-03-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v4.1 был выпущен Mar 19, 2021 (см. на Maven). Этот выпуск включал в себя оптимизацию и упрощение HTTP-кода, расширение функциональности некоторых компонентов.]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v4.1 был выпущен Mar 19, 2021 (<a href="https://mvnrepository.com/artifact/io.activej/activej/4.1">см. на Maven</a>). Этот выпуск включал в себя оптимизацию и упрощение HTTP-кода, расширение функциональности некоторых компонентов.</p><ul><li><strong>HTTP рефакторинг и оптимизация</strong><ul><li>Оптимизирована и упрощена обработка входящих сообщений HTTP, заголовков и URL-адресов</li><li>Добавлены предварительные условия для сообщений HTTP, которые защищают от использования переработанных сообщений</li><li>Пользовательские сообщения HTTP (<a href="https://github.com/activej/activej/blob/v4.1/core-http/src/main/java/io/activej/http/HttpRequest.java">HttpRequest</a> для <a href="https://github.com/activej/activej/blob/v4.1/core-http/src/main/java/io/activej/http/AsyncHttpClient.java">AsyncHttpClient</a> / <a href="https://github.com/activej/activej/blob/v4.1/core-http/src/main/java/io/activej/http/HttpResponse.java">HttpResponse</a> в <a href="https://github.com/activej/activej/blob/v4.1/core-http/src/main/java/io/activej/http/AsyncServlet.java">AsyncServlet</a>) больше не утилизируются (только тело сообщения при наличии), таким образом давая возможность кэшировать и повторно использовать их</li></ul></li><li>Добавлен метод <code>Promise&lt;Void&gt; fetch()</code> в <a href="https://github.com/activej/activej/blob/v4.1/extra/cloud-ot/src/main/java/io/activej/ot/OTStateManager.java">OTStateManager</a>. Полученные изменения хранятся без применения к текущему состоянию.</li><li>Улучшена обработка десериализованных полей в <a href="https://serializer.activej.io/">Serializer ActiveJ</a></li><li>Добавлен по умолчанию <a href="https://github.com/activej/activej/blob/v4.1/util-common/src/main/java/io/activej/common/api/Initializer.java">Initializer</a>с для общих компонентов</li><li>Добавлены предварительные условия при применении операций к <a href="https://github.com/activej/activej/blob/v4.1/extra/cloud-etl/src/main/java/io/activej/etl/LogOTState.java">LogOTState</a></li><li>Удален <a href="https://github.com/activej/activej/blob/v4.1/boot-jmx/src/main/java/io/activej/jmx/JmxModule.java">JmxModule</a> из стандартных HTTP-лаунчеров</li><li>Добавлена новая статистика JMX в <a href="https://github.com/activej/activej/blob/v4.1/cloud-rpc/src/main/java/io/activej/rpc/client/RpcClient.java">RpcClient</a> для мониторинга не отвечающих RPC-серверов</li><li>Добавлен <a href="https://github.com/activej/activej/blob/v4.1/util-common/src/main/java/io/activej/common/ApplicationSettings.java">ApplicationSettings</a> метод для получения по умолчанию <code>Locale</code></li><li>Чтобы использовать локаль <code>en-US</code> при форматировании <a href="https://github.com/activej/activej/blob/v4.1/boot-jmx-stats/src/main/java/io/activej/jmx/stats/EventStats.java">EventStats</a> и <a href="https://github.com/activej/activej/blob/v4.1/boot-jmx-stats/src/main/java/io/activej/jmx/stats/ValueStats.java">ValueStats</a></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 4.0 - Рефакторинг исключений]]></title>
        <id>ActiveJ 4.0 - Рефакторинг исключений</id>
        <link href="https://activej.io/ru/blog/2021/02/16/v4.0"/>
        <updated>2021-02-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v4.0 был выпущен в свет 16 февраля 2021 (см. на Maven). Этот выпуск включал в себя существенное рефакторинг исключений. Этот релиз также представляет асинхронную высокую производительность ActiveJ Redis. Другие компоненты оптимизированы для производительности.]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v4.0 был выпущен в свет 16 февраля 2021 (<a href="https://mvnrepository.com/artifact/io.activej/activej/4.0">см. на Maven</a>). Этот выпуск включал в себя существенное рефакторинг исключений. Этот релиз также представляет асинхронную высокую производительность ActiveJ Redis. Другие компоненты оптимизированы для производительности.</p><ul><li><strong>Рефакторинг исключений</strong><ul><li>Все публичные исключения были удалены/скрыты.</li><li><strong>StacklessException</strong> был удален. Классы, которые расширили <strong>StacklessException</strong> теперь продлевают регулярное <strong>Exception</strong>, некоторые из них все еще <em>stackless</em>. <em>Stackless</em> исключения предоставляют возможность включать трассировку стека для целей отладки. Это может быть достигнуто путем установки <a href="https://github.com/activej/activej/blob/v4.0/util-common/src/main/java/io/activej/common/ApplicationSettings.java">ApplicationSetting</a> <code>withStackTrace</code> на <strong>true</strong>.</li><li>Переименованные исключения:<ul><li><strong>ParseException</strong> -&gt; <a href="https://github.com/activej/activej/blob/v4.0/util-common/src/main/java/io/activej/common/exception/MalformedDataException.java">MalformedDataException</a></li><li><strong>HttpException</strong> -&gt; <a href="https://github.com/activej/activej/blob/v4.0/core-http/src/main/java/io/activej/http/HttpError.java">HttpError</a> (<a href="https://github.com/activej/activej/blob/v4.0/core-http/src/main/java/io/activej/http/HttpException.java">HttpException</a> теперь родительский класс для других HTTP исключений)</li><li><strong>OTTransformException</strong> -&gt; <a href="https://github.com/activej/activej/blob/v4.0/extra/cloud-ot/src/main/java/io/activej/ot/exception/TransformException.java">Преобразование Исключение</a></li><li><strong>OTNoCommitException</strong> -&gt; <a href="https://github.com/activej/activej/blob/v4.0/extra/cloud-ot/src/main/java/io/activej/ot/exception/NoCommitException.java">NoCommitException</a></li></ul></li><li>Добавлены новые исключения для компонентов верхнего уровня и т.д.</li></ul></li><li>Представлен асинхронный легкий высокопроизводительный <a href="https://github.com/activej/activej/tree/v4.0/extra/cloud-redis">ActiveJ Redis клиент</a> с расширяемым API. <a href="https://github.com/activej/activej/tree/v4.0/examples/cloud/redis">Примеры</a> и <a href="https://github.com/activej/activej/tree/v4.0/benchmarks/redis">бенчмарки</a> для Redis клиента также были добавлены.</li><li>Оптимизация в сетевом коде, HTTP-обработке (особенно в режиме pipelining) и сериализации данных.</li><li>Переименован <strong>ByteBufQueue</strong> -&gt; <a href="https://github.com/activej/activej/blob/v4.0/core-bytebuf/src/main/java/io/activej/bytebuf/ByteBufs.java">ByteBufs</a>. Добавлен byte index <strong>ByteScanner</strong>, улучшен <code>ByteBufs::scanBytes</code>. Добавлен метод <code>ByteBufs::consumeBytes</code>, который работает как <code>ByteBufs::scanBytes</code>, но на самом деле потребляет сканированные bytes/bufs.</li><li>Удалено <strong>StreamMapper</strong>, теперь сопоставление потоков может быть достигнуто с помощью <code>StreamFilter.mapper(Function&lt;I, O&gt;)</code></li><li>Удалены <strong>Преобразователь</strong>, <strong>Преобразователь Стрима</strong>, <strong>AbstractStreamReducer</strong>, <strong>классы StreamMerger</strong>. Слияние потоков может быть произведено через <a href="https://github.com/activej/activej/blob/v4.0/core-datastream/src/main/java/io/activej/datastream/processor/StreamReducer.java">StreamReducer</a></li><li>Переименовано <strong>MergeSortReducer</strong> -&gt; <strong>MergeReducer</strong>, <strong>MergeDistinctReducer</strong> -&gt; <strong>DeduplicateReducer</strong></li><li>Добавлена возможность получения чужих чанков из <a href="https://github.com/activej/activej/blob/v4.0/extra/cloud-lsmt-cube/src/main/java/io/activej/cube/Cube.java">Cube</a> через вызов <code>Cube::getIrrelevantChunks</code>. Нерелевантные чанки можно очистить, вызвав <code>CubeConsolidationController:::cleanupIrrelevantChunks</code>.</li><li>Добавлено правило JUnit тест правило <a href="https://github.com/activej/activej/blob/v4.0/test/src/main/java/io/activej/test/rules/ClassBuilderConstantsRule.java">ClassBuilderConstantsRule</a> которое проверяет что все <a href="https://github.com/activej/activej/blob/v4.0/core-codegen/src/main/java/io/activej/codegen/ClassBuilder.java">ClassBuilder</a> статические константы очищены после выполнения теста.</li><li>Переименовано большинство классов/методов, содержащих <em>parse</em>, чтобы содержать <em>decode</em>.</li></ul>]]></content>
    </entry>
</feed>
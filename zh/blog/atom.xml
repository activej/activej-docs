<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://activej.io/zh/blog</id>
    <title>ActiveJ 6.0 Blog</title>
    <updated>2023-06-15T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://activej.io/zh/blog"/>
    <subtitle>ActiveJ 6.0 Blog</subtitle>
    <icon>https://activej.io/zh/./img/favicon.png</icon>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.5 - Performance improvements and bug fixes]]></title>
        <id>ActiveJ 5.5 - Performance improvements and bug fixes</id>
        <link href="https://activej.io/zh/blog/2023/06/15/v5.5"/>
        <updated>2023-06-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.5 was released on Jun 15,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.5 was released on Jun 15,
2023 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.5">see on Maven</a>). This release
introduces bug fixes, as well as some performance improvements.</p><ul><li>General<ul><li>Updated dependency versions.</li><li>Changed logging levels in some components to be more appropriate.</li><li>Added method for parsing <code>InetSocketAddress</code> that tries to resolve the address.</li><li>Made <code>Checks</code> enabled by default if Java&#x27;s assertions are enabled.</li></ul></li><li><a href="/misc/bytebuf">ByteBuf</a><ul><li>Fixed UTF-8 encoding in <code>ByteBufStrings</code>.</li></ul></li><li><a href="/async-io/eventloop">Eventloop</a><ul><li>Improved performance of scheduled tasks. Minimized garbage collection required for task scheduling.</li></ul></li><li><a href="/inject">Inject</a><ul><li>Added the ability to create bindings out of Java&#x27;s constructors.</li><li>Simplified wildcard types in <code>KeyPattern</code>.</li></ul></li><li><a href="/rpc">RPC</a><ul><li>Improved <code>RpcClient</code> start/stop routine.</li><li>Added launcher for multithreaded RPC server.</li><li>Added <code>RpcClient#withForcedShutdown</code> method to allow shutting down the <code>RpcClient</code> even if there are
active connections.</li></ul></li><li><a href="/http">HTTP</a><ul><li>Fixed inspector notification about malformed data exceptions.</li><li>Improved shutdown routine of <code>HttpClient</code>.</li><li>Added the ability to forcefully shutdown <code>HttpClient</code>.</li><li>Made response code of <code>HttpResponse</code> mutable.</li><li>Fixed multipart/form-data request parsing by considering the last <code>CRLF</code> optional,
as per <a href="https://datatracker.ietf.org/doc/html/rfc2046#section-5.1.1">RFC</a>.</li></ul></li><li><a href="/async-io/datastream">Datastream</a><ul><li>Fixed <code>ChannelSerializer</code> behavior on exception occurances.</li><li>Added <code>StreamLimiter</code> class that limits number of items that pass via datastream pipeline.</li><li>Added <code>StreamSkip</code> class that omits N first items that pass via datastream pipeline.</li><li>Fixed stats aggregation in <code>StreamStatsForwarder</code>.</li></ul></li><li><a href="/codegen">Codegen</a><ul><li>Fixed method invocations on interfaces.</li><li>Improved class caching in <code>RecordScheme</code>.</li><li>Compared fields in <code>RecordScheme</code> are now transfered to the projection.</li></ul></li><li><a href="/serializer">Serializer</a><ul><li>Restricted non-static inner classes to be used for serialization.</li><li>Fixed closing routine in <code>StreamInput</code>.</li><li>Removed caching from <code>StreamCodecs</code>.</li><li>Added <code>StreamCodecs#reference</code> method that introduces an effective way to serialize/deserialize duplicate item
instances.</li></ul></li><li><a href="/specializer">Specializer</a><ul><li>Refactored ActiveJ Specializer to perform well on conditional code.</li></ul></li><li>JMX<ul><li>Added JMX reducers (<code>Average</code>, <code>Any</code>).</li><li>Added built-in support for JMX attributes/operations of <code>Enum</code> type.</li><li>Added built-in support for JMX attributes/operations of <code>InetSocketAddress</code> type.</li></ul></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.4.3 - Simplified custom serializers]]></title>
        <id>ActiveJ 5.4.3 - Simplified custom serializers</id>
        <link href="https://activej.io/zh/blog/2022/09/16/v5.4.3"/>
        <updated>2022-09-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.4.3 was released on Sep 16,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.4.3 was released on Sep 16,
2022 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.4.3">see on Maven</a>). This release introduces a simplified
approach for creating serializers for custom classes.</p><ul><li>Added an abstract <code>SimpleSerializerDef</code> class that simplifies the creation of custom serializers. Serializers for custom
classes can now be created without the use of the Expressions API</li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.4.2 - Minor bug fixes]]></title>
        <id>ActiveJ 5.4.2 - Minor bug fixes</id>
        <link href="https://activej.io/zh/blog/2022/09/05/v5.4.2"/>
        <updated>2022-09-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.4.2 was released on Sep 5,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.4.2 was released on Sep 5,
2022 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.4.2">see on Maven</a>). This release includes
minor bug fixes for stream codecs.</p><ul><li>Fixed a bug when a stream codec tried to safely decode more items than are present in the input of the stream. </li><li>Relative path tests in <a href="/fs">ActiveJ FS</a> are ignored when the project directory is located on a drive other than the temporary directory.</li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.4.1 - Stream Codecs optimizations]]></title>
        <id>ActiveJ 5.4.1 - Stream Codecs optimizations</id>
        <link href="https://activej.io/zh/blog/2022/08/31/v5.4.1"/>
        <updated>2022-08-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.4.1 was released on Aug 31,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.4.1 was released on Aug 31,
2022 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.4.1">see on Maven</a>). This release includes
optimizations for Stream Codecs to optimize memory usage.</p><ul><li>Optimized encoding and decoding of arrays of primitives, as well as arrays of variable-length ints and longs.</li><li>Minimized the required number of flushes when writing data to a byte array.</li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.4 - Codegen and Serializer optimizations]]></title>
        <id>ActiveJ 5.4 - Codegen and Serializer optimizations</id>
        <link href="https://activej.io/zh/blog/2022/08/19/v5.4"/>
        <updated>2022-08-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.4 was released on Aug 19,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.4 was released on Aug 19,
2022 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.4">see on Maven</a>). This release includes
improvements to <a href="/codegen">ActiveJ Codegen</a>,<a href="/serializer">ActiveJ Serializer</a>, and minor fixes to other
components.</p><ul><li><a href="/codegen">ActiveJ Codegen</a><ul><li>Generated method calls that use <code>self</code> instances as method arguments are now automatically resolved.</li><li>Slightly optimized method lookup.</li></ul></li><li><a href="/serializer">ActiveJ Serializer</a><ul><li>Optimized serializer builder&#x27;s cache. Ensured that previously defined serializers are reused.</li><li>Ensured that dangling references are cleaned up if serialization fails.</li></ul></li><li><a href="/async-io/net">Net</a><ul><li>Fix order of promise completion when SSL socket receives <code>close_notify</code> message.</li></ul></li><li><a href="/http">HTTP</a><ul><li>Multimap of HTTP headers is now properly resized.</li><li>Fatal errors in HTTP server connections are now handled correctly.</li><li>Added the <code>HttpMessage#takeBodyStream</code> method instead of the <code>HttpMessage#getBodyStream</code> method as it has a more
semantically correct name. <code>HttpMessage#getBodyStream</code> method is now deprecated and is a candidate for removal in
the next major release.</li></ul></li><li>Misc<ul><li>Added additional application error logging in Launcher.</li><li>Fixed <code>@NotNull</code> annotations for function parameters.</li></ul></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.3 - JMX improvements]]></title>
        <id>ActiveJ 5.3 - JMX improvements</id>
        <link href="https://activej.io/zh/blog/2022/06/17/v5.3"/>
        <updated>2022-06-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.3 was released Jun 17,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.3 was released Jun 17,
2022 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.3">see on Maven</a>). This release includes
minor improvements to JMX, as well as several bug fixes.</p><ul><li>JMX<ul><li>Added the ability to use custom <code>JmxReducer</code>s for <code>@JmxOperation</code>s. </li><li>JMX attributes and operations of <code>Map</code> type now respect the specified <code>JmxReducer</code> when reducing map values.</li><li>Added the ability to specify a predicate for whether worker instances should be registered in JMX or not.</li></ul></li><li><a href="/codegen">ActiveJ Codegen</a><ul><li>Ability to use parameterized types for record fields has been added.</li></ul></li><li><a href="/http">HTTP</a><ul><li>Fixed a bug with quality factors parsing in headers.</li><li>Improved handling of runtime exceptions.</li></ul></li><li><a href="/async-io/datastream">Datastream</a><ul><li>Fixed acknowledgement completion in <code>StreamReducer</code> as well as in several <code>StreamConsumer</code>s</li></ul></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.2 - Minor improvements]]></title>
        <id>ActiveJ 5.2 - Minor improvements</id>
        <link href="https://activej.io/zh/blog/2022/04/19/v5.2"/>
        <updated>2022-04-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.2 was released Apr 19,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.2 was released Apr 19,
2022 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.2">see on Maven</a>). This release includes
minor improvements mainly for <a href="/http">HTTP client/server</a> and <a href="/serializer">ActiveJ Serializer</a>.</p><ul><li><a href="/http">HTTP</a><ul><li>Added dedicated enum for setting <code>SameSite</code> policy on cookies. </li><li>Malformed HTTP requests now result in a code <code>400</code> response rather than connection drop.</li><li>HTTP inspectors can now inspect malformed HTTP requests and responses.</li><li><a href="https://github.com/activej/activej/blob/v5.1.1/core-http/src/main/java/io/activej/http/RoutingServlet.java">RoutingServlet</a> now correctly decodes percent-encoded URL path parts.</li><li>Added checks for DNS label sizes.</li><li>Minor improvements of the <a href="https://github.com/activej/activej/blob/v5.1.1/core-http/src/main/java/io/activej/http/UrlParser.java">UrlParser</a>.</li></ul></li><li><a href="/serializer">ActiveJ Serializer</a><ul><li>Added additional preconditions for subclass serializer.</li><li>Removed unnecessary caching from <a href="https://github.com/activej/activej/blob/v5.1.1/core-serializer/src/main/java/io/activej/serializer/SerializerBuilder.java">SerializerBuilder</a>.</li></ul></li><li><a href="/fs">ActiveJ FS</a><ul><li>Storage paths are now normalized, so local file systems now work properly with relative storage paths.</li></ul></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.1 - Boot and ActiveJ FS improvements]]></title>
        <id>ActiveJ 5.1 - Boot and ActiveJ FS improvements</id>
        <link href="https://activej.io/zh/blog/2022/01/04/v5.1"/>
        <updated>2022-01-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.1 was released Jan 4,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.1 was released Jan 4,
2022 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.1">see on Maven</a>). This release includes
improvements to <a href="/fs">ActiveJ FS</a>, <a href="/inject">ActiveJ Inject</a> and <a href="/boot/launcher">boot</a> modules in general.</p><ul><li><a href="/inject">ActiveJ Inject</a> and <a href="/boot/launcher">boot</a> modules<ul><li><a href="https://github.com/activej/activej/blob/v5.1/boot-triggers/src/main/java/io/activej/trigger/TriggersModule.java">TriggersModule</a>
now properly handles <a href="/inject/optional-dependencies">optional dependencies</a></li><li>Nested optional dependencies (e.g. <code>OptionalDependency&lt;OptionalDependency&lt;?&gt;&gt;</code>) are prohibited</li><li>Services (as well as those obtained from an optional dependencies) are guaranteed to start/stop exactly once</li><li>Added shortcuts for obtaining optional dependencies from <a href="https://github.com/activej/activej/blob/v5.1/core-inject/src/main/java/io/activej/inject/Injector.java">Injector</a></li></ul></li><li><a href="/fs">ActiveJ FS</a><ul><li>Added a new <a href="https://github.com/activej/activej/blob/v5.1/cloud-fs/src/main/java/io/activej/fs/exception/ActiveFsStructureException.java">exception</a> to
indicate errors in a structure of a file system.</li><li>Added a precondition that checks whether local file systems (<a href="https://github.com/activej/activej/blob/v5.1/cloud-fs/src/main/java/io/activej/fs/LocalActiveFs.java">LocalActiveFs</a> and
<a href="https://github.com/activej/activej/blob/v5.1/cloud-fs/src/main/java/io/activej/fs/LocalBlockingFs.java">LocalBlockingFs</a>) were started before being used.</li></ul></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 5.0 - New major release]]></title>
        <id>ActiveJ 5.0 - New major release</id>
        <link href="https://activej.io/zh/blog/2021/10/29/v5.0"/>
        <updated>2021-10-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v5.0 was released Oct 29,]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v5.0 was released Oct 29,
2021 (<a href="https://mvnrepository.com/artifact/io.activej/activej/5.0">see on Maven</a>). This release includes
major changes in <a href="/inject">ActiveJ Inject</a>, <a href="/codegen">ActiveJ Codegen</a>, <a href="/serializer">ActiveJ Serializer</a>
<a href="/async-io/promise">promises API</a>. The release also introduced improved type scanning facility and
overall minor improvements in other components.</p><ul><li><a href="/inject">ActiveJ Inject</a><ul><li>Refactored and simplified inner components to speed up dependency injection and provide better support for binding
<a href="/specializer">specialization</a></li><li>Simplified type resolution in dependency injection</li><li>Added the ability to transform imported and exported bindings using patterns (see <a href="/inject/binding-transformation">example</a>)</li><li>Replaced <code>@Optional</code> annotation with an explicit <a href="https://github.com/activej/activej/blob/v5.0/core-inject/src/main/java/io/activej/inject/binding/OptionalDependency.java">OptionalDependency</a>
class</li></ul></li><li><a href="/codegen">ActiveJ Codegen</a><ul><li>Improved <a href="https://github.com/activej/activej/blob/v5.0/core-codegen/src/main/java/io/activej/codegen/ClassBuilder.java">ClassBuilder</a> and <a href="https://github.com/activej/activej/blob/v5.0/core-codegen/src/main/java/io/activej/codegen/DefiningClassLoader.java">DefiningClassLoader</a> classes</li><li>Class generation may now be 100% lazy</li><li>Added in-memory <a href="https://github.com/activej/activej/blob/v5.0/core-codegen/src/main/java/io/activej/codegen/ClassBuilder.java">ClassBuilder</a> caches</li><li>Added the ability to use <a href="https://github.com/activej/activej/blob/v5.0/core-codegen/src/main/java/io/activej/codegen/BytecodeStorage.java">BytecodeStorage</a> as a persistent cache for generated bytecode</li><li>Added the ability to call super methods as well as protected methods</li><li>Improved built-in expressions for array/collection/map iteration</li></ul></li><li><a href="/serializer">ActiveJ Serializer</a><ul><li>Added the ability to specify serializer annotations directly on type use (see <a href="/serializer/examples#path-based-serialization">example</a>)</li><li>Automatic class member ordering is now supported within the same JVM</li><li>Added support for serializer annotation aliases</li><li>Improved array serialization as well as serialization of booleans</li><li>Refactored class hierarchy of collection serializers. </li><li>Abstract collection serializers now support builder pattern</li></ul></li><li><a href="/async-io/promise">Promise</a><ul><li>Greatly improved exception handling</li><li>Renamed promise chaining methods <code>thenEx</code> and <code>mapEx</code> to <code>then</code> and <code>map</code></li><li>Added new conditional chaining methods as well as dedicated null-handling chaining methods </li><li>All the changing methods now take &quot;throwing&quot; functions. If a checked exception is thrown in a chaining function,
the whole promise is completed exceptionally</li></ul></li><li>Miscellaneous improvements<ul><li>Removed <code>codec</code> module. Components that require JSON marshalling now internally use the
<a href="https://github.com/ngs-doo/dsl-json">DSL-JSON</a> library  </li><li>Added new <a href="https://github.com/activej/activej/tree/v5.0/util-types">types</a> module which contains various reflection and type utilities, including advanced type scanner</li><li><a href="https://github.com/activej/activej/tree/v5.0/util-common">Common</a> module has been massively refactored to make common functions and components more consistent</li><li>Restructured asynchronous exceptions</li><li>Unchecked exception handling can now be precisely configured using a thread-scoped or global
<a href="https://github.com/activej/activej/blob/v5.0/util-common/src/main/java/io/activej/common/exception/FatalErrorHandler.java">FatalErrorHandler facility</a> </li><li>Made ActiveJ compatible with Java 17</li><li>Added various <code>DiscoveryService</code> interfaces for node discovery within server cluster (<a href="/rpc">RPC</a>, <a href="/fs">FS</a>)</li><li>Removed <code>AsyncServletDecorator</code> facility</li><li>Removed <code>StreamCodecRegistry</code> facility</li><li>Multiple small improvements and fixes</li></ul></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 4.3 - 多个模块的小改进]]></title>
        <id>ActiveJ 4.3 - 多个模块的小改进</id>
        <link href="https://activej.io/zh/blog/2021/05/28/v4.3"/>
        <updated>2021-05-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v4.3已经获释， 2021 (见Maven)。 这个版本为多个模块带来了 个小的改进。]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v4.3已经获释， 2021 (<a href="https://mvnrepository.com/artifact/io.activej/activej/4.3">见Maven</a>)。 这个版本为多个模块带来了 个小的改进。</p><ul><li>添加新方法 <code>重新连接</code> 到 <a href="https://github.com/activej/activej/blob/v4.3/core-http/src/main/java/io/activej/http/AsyncHttpClient.java">AsyncHttpClient</a> 的 <code>检查员</code>。 现在，正在建立的 连接数可以通过 <code>JmxInspector #getConnecting</code> 属性进行监测</li><li>当HTTP连接关闭时，适当的异常会被传播到HTTP请求和响应体的供应商中。</li><li><a href="https://github.com/activej/activej/blob/v4.3/core-eventloop/src/main/java/io/activej/eventloop/inspector/ThrottlingController.java">ThrottlingController</a> 现在，如果任务连续执行的时间异常长，就会节制所有的处理。</li><li><a href="https://github.com/activej/activej/blob/v4.3/core-datastream/src/main/java/io/activej/datastream/ForwardingStreamSupplier.java">ForwardingStreamSupplier</a> 现在可以正确地将同行 <code>StreamSupplier</code> 与 <code>StreamConsumer 绑定。</code></li><li>修正了 <a href="https://github.com/activej/activej/blob/v4.3/core-datastream/src/main/java/io/activej/datastream/csp/ChannelSerializer.java">ChannelSerializer中的异步递归。</a></li><li><a href="https://github.com/activej/activej/blob/v4.3/extra/cloud-lsmt-aggregation/src/main/java/io/activej/aggregation/Aggregation.java">聚会中的缺失措施</a> 被初始化为默认的 &quot;零 &quot;值</li><li><a href="https://github.com/activej/activej/blob/v4.3/extra/cloud-lsmt-aggregation/src/main/java/io/activej/aggregation/measure/HyperLogLog.java">HyperLogLog</a> 现在可以正确地添加 <code>int</code> 的值。</li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 4.2 - 扩展的功能]]></title>
        <id>ActiveJ 4.2 - 扩展的功能</id>
        <link href="https://activej.io/zh/blog/2021/04/13/v4.2"/>
        <updated>2021-04-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[* ActiveJ Redis客户端]]></summary>
        <content type="html"><![CDATA[<ul><li><strong><a href="https://github.com/activej/activej/tree/v4.2/extra/cloud-redis">ActiveJ Redis客户端</a></strong><ul><li>添加了 <code>connect()</code> 方法 到 <a href="https://github.com/activej/activej/blob/v4.2/extra/cloud-redis/src/main/java/io/activej/redis/RedisClient.java">RedisClient</a> ，占用了认证凭证。</li><li>为ActiveJ Redis模块增加了新的专门异常。<ul><li><a href="https://github.com/activej/activej/blob/v4.2/extra/cloud-redis/src/main/java/io/activej/redis/RedisAuthenticationException.java">RedisAuthenticationException</a></li><li><a href="https://github.com/activej/activej/blob/v4.2/extra/cloud-redis/src/main/java/io/activej/redis/RedisPermissionException.java">RedisPermissionException</a></li></ul></li></ul></li><li><strong><a href="https://github.com/activej/activej/blob/v4.2/core-codegen/src/main/java/io/activej/record/RecordScheme.java">记录模式（RecordScheme</a></strong><ul><li>增加了在 <code>RecordScheme</code> 中指定字段的能力，这些字段将用于 <code>equals()</code> 和 <code>hashCode()</code> 的实现。</li><li>增加了指定用于生成记录的字段的能力 <code>比较器</code></li></ul></li><li><strong><a href="https://github.com/activej/activej/blob/v4.2/util-common/src/main/java/io/activej/common/FileLocker.java">文件锁定器（FileLocker</a></strong><ul><li>使得 <code>FileLocker</code> 构造函数公开化。</li><li><code>FileLocker</code> 现在实现 <code>java.io.Closeable</code> 接口。</li></ul></li><li><strong><a href="https://github.com/activej/activej/blob/v4.2/util-state/src/main/java/io/activej/state/StateManager.java">态管理器</a></strong><ul><li>添加了 <code>tryLoadSnapshot()</code> 和 <code>tryLoadDiff()</code> 方法，返回 <code>null</code> ，而不是抛出一个异常。</li><li>为 <a href="https://github.com/activej/activej/blob/v4.2/util-state/src/main/java/io/activej/state/file/FileStateManager.java">FileStateManager</a> 添加了 <code>tryLoad()</code> 方法，返回 <code>null</code> ，而不是抛出一个异常。</li><li>为 <a href="https://github.com/activej/activej/blob/v4.2/util-state/src/main/java/io/activej/state/file/FileStateManager.java">FileStateManager</a> 添加了 <code>save()</code> 方法，该方法为要保存的状态占用了一个修订版，用</li></ul></li><li>改进了对具有大型URL的HTTP请求的处理</li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 4.1 - 优化和简化]]></title>
        <id>ActiveJ 4.1 - 优化和简化</id>
        <link href="https://activej.io/zh/blog/2021/03/19/v4.1"/>
        <updated>2021-03-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v4.1 被释放。19, 2021 (见Maven)。 这个版本包括优化和简化HTTP代码，扩大某些组件的功能。]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v4.1 被释放。19, 2021 (<a href="https://mvnrepository.com/artifact/io.activej/activej/4.1">见Maven</a>)。 这个版本包括优化和简化HTTP代码，扩大某些组件的功能。</p><ul><li><strong>HTTP重构和优化</strong><ul><li>优化和简化对传入的HTTP消息、标头和URL的处理</li><li>增加了HTTP消息的前提条件，以防止使用回收的消息。</li><li>用户创建的HTTP消息(<a href="https://github.com/activej/activej/blob/v4.1/core-http/src/main/java/io/activej/http/HttpRequest.java">HttpRequest</a> for <a href="https://github.com/activej/activej/blob/v4.1/core-http/src/main/java/io/activej/http/AsyncHttpClient.java">AsyncHttpClient</a> / <a href="https://github.com/activej/activej/blob/v4.1/core-http/src/main/java/io/activej/http/HttpResponse.java">HttpResponse</a> in <a href="https://github.com/activej/activej/blob/v4.1/core-http/src/main/java/io/activej/http/AsyncServlet.java">AsyncServlet</a>)不再被回收 (如果存在，只有消息体被回收)，从而使缓存和重复使用它们成为可能。</li></ul></li><li>添加 <code>承诺&lt;Void&gt; fetch()</code> 方法到 <a href="https://github.com/activej/activej/blob/v4.1/extra/cloud-ot/src/main/java/io/activej/ot/OTStateManager.java">OTStateManager</a>. 获取的更改将不会应用于当前状态。</li><li>在 <a href="https://serializer.activej.io/">ActiveJ序列化器中改进了反序列化字段的铸造。</a></li><li>为普通组件添加了默认的 <a href="https://github.com/activej/activej/blob/v4.1/util-common/src/main/java/io/activej/common/api/Initializer.java">Initializer</a>s</li><li>在对 <a href="https://github.com/activej/activej/blob/v4.1/extra/cloud-etl/src/main/java/io/activej/etl/LogOTState.java">LogOTState应用操作时增加了前提条件。</a></li><li>从普通的HTTP启动器中删除了 <a href="https://github.com/activej/activej/blob/v4.1/boot-jmx/src/main/java/io/activej/jmx/JmxModule.java">JmxModule</a></li><li>在 <a href="https://github.com/activej/activej/blob/v4.1/cloud-rpc/src/main/java/io/activej/rpc/client/RpcClient.java">RpcClient</a> ，增加了新的JMX统计信息，用于监控无响应的RPC服务器</li><li>添加了 <a href="https://github.com/activej/activej/blob/v4.1/util-common/src/main/java/io/activej/common/ApplicationSettings.java">ApplicationSettings</a> 方法，用于获取默认的 <code>Locale。</code></li><li>在格式化 <a href="https://github.com/activej/activej/blob/v4.1/boot-jmx-stats/src/main/java/io/activej/jmx/stats/EventStats.java">EventStats</a> 和 <a href="https://github.com/activej/activej/blob/v4.1/boot-jmx-stats/src/main/java/io/activej/jmx/stats/ValueStats.java">ValueStats时，坚持使用 <code>en-US</code> locale。</a></li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ActiveJ 4.0 - 异常的重构]]></title>
        <id>ActiveJ 4.0 - 异常的重构</id>
        <link href="https://activej.io/zh/blog/2021/02/16/v4.0"/>
        <updated>2021-02-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ActiveJ v4.0 被释放，2021 Feb 16.(见Maven)。 这种释放包括对例外情况进行重大调整。 此版本还引入异步高性能 ActiveJ Redis客户端。 为性能优化了其他组件。]]></summary>
        <content type="html"><![CDATA[<p>ActiveJ v4.0 被释放，2021 Feb 16.(<a href="https://mvnrepository.com/artifact/io.activej/activej/4.0">见Maven</a>)。 这种释放包括对例外情况进行重大调整。 此版本还引入异步高性能 ActiveJ Redis客户端。 为性能优化了其他组件。</p><ul><li><strong>异常情况的重构</strong><ul><li>所有的公共常数例外被删除/隐藏。</li><li><strong>StacklessException</strong> 已被删除。 扩展 <strong>的 StacklessException</strong> 现在扩展常规 <strong>Exception</strong>, 其中一些仍然是 <em>无堆栈</em> <em>无堆栈</em> 异常能够包含用于调试目的的堆栈跟踪。 这可以通过设置异常的 <a href="https://github.com/activej/activej/blob/v4.0/util-common/src/main/java/io/activej/common/ApplicationSettings.java">应用程序设置</a> <code>使用StackTrace</code> 到 <strong>true</strong> 来实现。</li><li>重新命名的例外情况。<ul><li><strong>ParseException</strong> -&gt; <a href="https://github.com/activej/activej/blob/v4.0/util-common/src/main/java/io/activej/common/exception/MalformedDataException.java">MalformedDataException</a></li><li><strong>HttpException</strong> -&gt; <a href="https://github.com/activej/activej/blob/v4.0/core-http/src/main/java/io/activej/http/HttpError.java">HttpError</a> (<a href="https://github.com/activej/activej/blob/v4.0/core-http/src/main/java/io/activej/http/HttpException.java">HttpException</a> 现在是其他HTTP异常的父类)</li><li><strong>OTTransformException</strong> -&gt; <a href="https://github.com/activej/activej/blob/v4.0/extra/cloud-ot/src/main/java/io/activej/ot/exception/TransformException.java">TransformException</a></li><li><strong>OTNoCommitException</strong> -&gt; <a href="https://github.com/activej/activej/blob/v4.0/extra/cloud-ot/src/main/java/io/activej/ot/exception/NoCommitException.java">NoCommitException</a></li></ul></li><li>为顶层组件等增加了新的例外情况。</li></ul></li><li>引入了异步轻量高性能 <a href="https://github.com/activej/activej/tree/v4.0/extra/cloud-redis">ActiveJ Redis客户端</a> 与可扩展的 API。 <a href="https://github.com/activej/activej/tree/v4.0/examples/cloud/redis">样例</a> 和 <a href="https://github.com/activej/activej/tree/v4.0/benchmarks/redis">基准</a> 到 Redis 客户端也被添加。</li><li>在网络代码、HTTP处理（特别是在流水线模式下）和数据序列化方面进行优化。</li><li>重命名 <strong>ByteBufQueue</strong> -&gt; <a href="https://github.com/activej/activej/blob/v4.0/core-bytebuf/src/main/java/io/activej/bytebuf/ByteBufs.java">ByteBufs</a>. 已添加字节索引到 <strong>ByteScanner</strong>, 重置 <code>ByteBufs::scanBytes</code> 添加 <code>ByteBufs::consumeBytes</code> 方法可以正常工作，如 <code>ByteBufs::scanBytes</code>，但实际消耗扫描的字节/bufs。</li><li>删除了 <strong>StreamMapper</strong>，现在可以通过 <code>StreamFilter.mapper(Function&lt;I, O&gt;)实现流映射。</code></li><li>已删除 <strong>变压器</strong>, <strong>StreamTransducer</strong>, <strong>AbstractStreamReducer</strong>, <strong>StreamMerger</strong> class。 流的合并可以通过 <a href="https://github.com/activej/activej/blob/v4.0/core-datastream/src/main/java/io/activej/datastream/processor/StreamReducer.java">StreamReducer来完成。</a></li><li>重命名为 <strong>MergeSortReducer</strong> -&gt; <strong>MergeReducer</strong>, <strong>MergeDistinctReducer</strong> -&gt; <strong>DeduplicateReducer</strong></li><li>增加了从 <a href="https://github.com/activej/activej/blob/v4.0/extra/cloud-lsmt-cube/src/main/java/io/activej/cube/Cube.java">Cube</a> ，通过调用 <code>Cube::getIrrelevantChunks</code>，获得无关的块的能力。 通过调用 <code>CubeConsolidationController::cleanup不相关的块可以清理不相关的块</code>。</li><li>添加了JUnit测试规则 <a href="https://github.com/activej/activej/blob/v4.0/test/src/main/java/io/activej/test/rules/ClassBuilderConstantsRule.java">ClassBuilderConstantsRule</a> ，验证所有 <a href="https://github.com/activej/activej/blob/v4.0/core-codegen/src/main/java/io/activej/codegen/ClassBuilder.java">ClassBuilder</a>&#x27;s 静态常量在测试通过后被清空。</li><li>将大多数包含 <em>解析</em> 的类/方法改名为包含 <em>解码</em>。</li></ul>]]></content>
    </entry>
</feed>
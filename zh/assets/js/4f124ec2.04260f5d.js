"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[6487],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return t?i.createElement(h,c(c({ref:n},l),{},{components:t})):i.createElement(h,c({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,c[1]=o;for(var p=2;p<a;p++)c[p]=t[p];return i.createElement.apply(null,c)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},77618:function(e,n,t){var i=t(67294),r=t(39962);n.Z=function(e){var n=e.url,t=e.text,a=e.isInline,c=void 0===a||a,o=e.children,s=(0,r.Z)().siteConfig,p=n.startsWith("/examples")?s.customFields.githubExamplesBranch:s.customFields.githubBranch;return i.createElement("a",{style:c?{}:{display:"block",marginBottom:"16px"},href:s.customFields.githubUrl+"/"+p+n,target:"_blank"},t||o)}},77210:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return d},default:function(){return m}});var i=t(83117),r=t(80102),a=(t(67294),t(3905)),c=t(77618),o=["components"],s={sidebar_label:"Speeding up dependency injection"},p="Speeding up dependency injection",l={unversionedId:"inject/speeding-up-injection",id:"inject/speeding-up-injection",isDocsHomePage:!1,title:"Speeding up dependency injection",description:"ActiveJ Specializer optimization",source:"@site/docs/inject/speeding-up-injection.mdx",sourceDirName:"inject",slug:"/inject/speeding-up-injection",permalink:"/zh/inject/speeding-up-injection",tags:[],version:"current",frontMatter:{sidebar_label:"Speeding up dependency injection"},sidebar:"docs",previous:{title:"Transient bindings",permalink:"/zh/inject/transient-bindings"},next:{title:"Under the hood",permalink:"/zh/inject/under-the-hood"}},d=[{value:"ActiveJ Specializer optimization",id:"activej-specializer-optimization",children:[],level:2},{value:"How it works",id:"how-it-works",children:[],level:2},{value:"RPC request handling speed up",id:"rpc-request-handling-speed-up",children:[],level:2}],u={toc:d};function m(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"speeding-up-dependency-injection"},"Speeding up dependency injection"),(0,a.kt)("h2",{id:"activej-specializer-optimization"},"ActiveJ Specializer optimization"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/zh/specializer"},(0,a.kt)("strong",{parentName:"a"},"ActiveJ Specializer"))," is a library that optimizes code for JVM. You can simply combine\nit with ActiveJ Inject and speed up your code by ",(0,a.kt)(c.Z,{text:"up to 30%",url:"/benchmarks/inject/src/main/java/io/activej/inject/ActiveJDirectScopebindBenchmark.java",mdxType:"Githublink"}),"\nIn order to set up ActiveJ Specializer, simply use ",(0,a.kt)("inlineCode",{parentName:"p"},"Injector.useSpecializer()")," before ",(0,a.kt)("strong",{parentName:"p"},"Injector"),"\ninstantiation.\nActiveJ Inject compiles bindings in runtime into a highly efficient representation. In conjunction with ActiveJ Specializer\nthe bindings can be turned into bytecode that will be as efficient as a manually written code. In this way you get\nthe best performance in real-life projects without maintaining hard to support manual code."),(0,a.kt)("h2",{id:"how-it-works"},"How it works"),(0,a.kt)("p",null,"To understand how ActiveJ Specializer works you can read ",(0,a.kt)("a",{parentName:"p",href:"/zh/specializer"},"specializer documentation"),".\nHere we will use a simple example to try to explain how specializer works in regards of ActiveJ Inject."),(0,a.kt)("p",null,"A specializer transforms class instances into a dedicated classes where instance methods are replaced by static methods\nand instance fields are replaced with static fields. Instances that are specialized are actually instances of ",(0,a.kt)(c.Z,{text:"CompiledBinding",url:"/core-inject/src/main/java/io/activej/inject/impl/CompiledBinding",mdxType:"Githublink"}),"."),(0,a.kt)("p",null,"Let's say we have a module that defines a following binding:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Provides\nInteger length(String string) {\n    return string.length();\n}\n")),(0,a.kt)("p",null,"A compiled bindings here may look like this (a simplified version):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class CompiledBindingImpl<R, U> implements CompiledBinding<R> {\n    private final CompiledBinding<U> otherBinding;\n\n    private R instance;\n\n    public CompiledBindingImpl(CompiledBinding<U> otherBinding) {\n        this.otherBinding = otherBinding;\n    }\n\n    public R getInstance() {\n        if (instance != null) {\n            return instance;\n        } else {\n            U otherInstance = otherBinding.getInstance();\n            this.instance = createInstance(otherInstance);\n            return this.instance;\n        }\n    }\n\n    protected R createInstance(U otherInstance) {\n        // ...\n    }\n}\n")),(0,a.kt)("p",null,"If we use ",(0,a.kt)("inlineCode",{parentName:"p"},"Injector.useSpecializer()")," before creating an injector we would get a specialized compiled binding (a simplified version):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class CompiledBindingInteger implements CompiledBinding<Integer> {\n    private static Integer instance;\n\n    public Integer getInstance() {\n        return getInstanceSpecialized();\n    }\n\n    public static Integer getInstanceSpecialized() {\n        if (instance != null) {\n            return instance;\n        } else {\n            String stringInstance = CompiledBindingString.getInstanceSpecialized();\n            this.instance = createInstance(stringInstance);\n            return this.instance;\n        }\n    }\n\n    public static Integer createInstance(String otherInstance) {\n        // ...\n    }\n}\n")),(0,a.kt)("p",null,"Since specializer replaced instance methods with static methods and instance fields with static fields this allows for\nadditional JVM optimizations as well as neglects an overhead of dynamic dispatch. Also, it may seem as a minimal\noptimization, imagine that you have a huge dependency graph and you need to create instances in a runtime. For example when\nusing ActiveJ Inject for HTTP request handling when you need to instantiate new objects upon every HTTP request. In this\nscenario a performance boost of using a specializer would be significant."),(0,a.kt)("h2",{id:"rpc-request-handling-speed-up"},"RPC request handling speed up"),(0,a.kt)("p",null,"We have created an ",(0,a.kt)(c.Z,{text:"example",url:"/examples/cloud/rpc/src/main/java/specializer/ScopedRpcServerExample.java",mdxType:"Githublink"})," of\nusing ActiveJ Inject + ActiveJ Specializer to boost a performance of RPC server that uses dependency injection for RPC\nrequest processing. To learn more about ActiveJ RPC you can visit ",(0,a.kt)("a",{parentName:"p",href:"/rpc"},"this page"),"."),(0,a.kt)("p",null,"A dependency graph on a server is similar to the one in ",(0,a.kt)("a",{parentName:"p",href:"/inject/cookbook-example"},"Cookbook example"),". Each incoming RPC\nrequest is handled within RPC ",(0,a.kt)("a",{parentName:"p",href:"/inject/scopes"},"scope"),"."),(0,a.kt)("p",null,"The example also comes with a dedicated ",(0,a.kt)(c.Z,{text:"becnhmark tool",url:"/examples/cloud/rpc/src/main/java/specializer/ScopedRpcBenchmarkClient.java",mdxType:"Githublink"})," that\nyou can run to measure the performance on the server."),(0,a.kt)("p",null,"Try to run server and benchmark took as-is and measure the performance. Then, uncomment a ",(0,a.kt)("inlineCode",{parentName:"p"},"Injector.useSpecializer()")," line\nin ",(0,a.kt)(c.Z,{text:"ScopedRpcServerExample",url:"/examples/cloud/rpc/src/main/java/specializer/ScopedRpcServerExample.java",mdxType:"Githublink"})," and re-run\nserver and benchmark tool once again. You should see a significant performance boost compared to not using ActiveJ Specializer.\nWe have measured up to 2 times performance increase on the server."))}m.isMDXComponent=!0}}]);
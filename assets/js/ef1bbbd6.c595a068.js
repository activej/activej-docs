(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[8257],{3905:function(e,n,a){"use strict";a.r(n),a.d(n,{MDXContext:function(){return l},MDXProvider:function(){return p},mdx:function(){return x},useMDXComponents:function(){return m},withMDXComponents:function(){return d}});var t=a(67294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function c(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=t.createContext({}),d=function(e){return function(n){var a=m(n.components);return t.createElement(e,i({},n,{components:a}))}},m=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},p=function(e){var n=m(e.components);return t.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},v=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=m(a),p=r,v=d["".concat(s,".").concat(p)]||d[p]||u[p]||i;return a?t.createElement(v,o(o({ref:n},l),{},{components:a})):t.createElement(v,o({ref:n},l))}));function x(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=v;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=a[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}v.displayName="MDXCreateElement"},77618:function(e,n,a){"use strict";var t=a(95318).default;n.Z=void 0;var r=t(a(67294)),i=t(a(39962)),s=function(e){var n=e.url,a=e.text,t=e.isInline,s=void 0===t||t,o=e.children,c=(0,i.default)().siteConfig;return r.default.createElement("a",{style:s?{}:{display:"block",marginBottom:"16px"},href:c.customFields.githubUrl+"/"+c.customFields.githubBranch+n,target:"_blank"},a||o)};n.Z=s},94801:function(e,n,a){"use strict";a.r(n),a.d(n,{frontMatter:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var t=a(22122),r=a(19756),i=(a(67294),a(3905)),s=a(77618),o=["components"],c={},l={unversionedId:"inject/class-scanning",id:"inject/class-scanning",isDocsHomePage:!1,title:"Class scanning",description:"In this tutorial we will define @Provides methods in arbitrary classes that do not implement Module class.",source:"@site/docs/inject/class-scanning.mdx",sourceDirName:"inject",slug:"/inject/class-scanning",permalink:"/inject/class-scanning",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Injecting instances",permalink:"/inject/injecting-instances"},next:{title:"Basics",permalink:"/inject/basic"}},d=[{value:"Classes with <code>@Provides</code> methods",id:"classes-with-provides-methods",children:[]},{value:"Creating <code>Injector</code>",id:"creating-injector",children:[]}],m={toc:d};function p(e){var n=e.components,a=(0,r.default)(e,o);return(0,i.mdx)("wrapper",(0,t.default)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"In this tutorial we will define ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Provides")," methods in arbitrary classes that do not implement ",(0,i.mdx)(s.Z,{url:"/core-inject/src/main/java/io/activej/inject/module/Module.java",mdxType:"Githublink"},(0,i.mdx)("inlineCode",{parentName:"p"},"Module"))," class.\nWe will then scan those classes to collect providers to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Injector"),"."),(0,i.mdx)("h2",{id:"classes-with-provides-methods"},"Classes with ",(0,i.mdx)("inlineCode",{parentName:"h2"},"@Provides")," methods"),(0,i.mdx)("p",null,"We will define two classes that contain methods annotated with ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Provides")," annotation. The first class ",(0,i.mdx)("inlineCode",{parentName:"p"},"StaticProviders")," will contain only static ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Provides"),"-methods.\nThe other class ",(0,i.mdx)("inlineCode",{parentName:"p"},"MixedProviders")," contains both static and instance ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Provides"),"-methods."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/ClassScanExample.java tag=REGION_1",url:"/examples/core/inject-2/src/main/java/ClassScanExample.java",tag:"REGION_1"},'public static class StaticProviders {\n  @Provides\n  static int port() {\n    return 1234;\n  }\n\n  @Provides\n  static String databaseName() {\n    return "exampleDB";\n  }\n}\n')),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"StaticProviders")," class provides a name of a database as well as a database port number."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/ClassScanExample.java tag=REGION_2",url:"/examples/core/inject-2/src/main/java/ClassScanExample.java",tag:"REGION_2"},"public static class MixedProviders {\n  private final String hostname;\n\n  public MixedProviders(String hostname) {\n    this.hostname = hostname;\n  }\n\n  @Provides\n  InetSocketAddress address(int port) {\n    return new InetSocketAddress(hostname, port);\n  }\n\n  @Provides\n  static DataSource dataSource(InetSocketAddress address, String dbName) {\n    return new DataSource(address, dbName);\n  }\n}\n")),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"MixedProviders")," class provides an address to a database and a ",(0,i.mdx)("inlineCode",{parentName:"p"},"DataSource")," class. ",(0,i.mdx)("inlineCode",{parentName:"p"},"DataSource")," class requires a database name as well as an address to a database.\nThe class looks like this:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/ClassScanExample.java tag=REGION_4",url:"/examples/core/inject-2/src/main/java/ClassScanExample.java",tag:"REGION_4"},'public static final class DataSource {\n  private final InetSocketAddress address;\n  private final String dbName;\n\n  @Inject\n  public DataSource(InetSocketAddress address, String dbName) {\n    this.address = address;\n    this.dbName = dbName;\n  }\n\n  public String queryData() {\n    System.out.printf("Querying %s:%s for data\\n", address, dbName);\n    return "data";\n  }\n}\n')),(0,i.mdx)("h2",{id:"creating-injector"},"Creating ",(0,i.mdx)("inlineCode",{parentName:"h2"},"Injector")),(0,i.mdx)("p",null,"To create an ",(0,i.mdx)("inlineCode",{parentName:"p"},"Injector")," we need to provide some DI modules. But we only have arbitrary classes with ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Provides"),"-methods."),(0,i.mdx)("p",null,"We can use ",(0,i.mdx)(s.Z,{url:"/core-inject/src/main/java/io/activej/inject/module/ModuleBuilder.java",mdxType:"Githublink"},(0,i.mdx)("inlineCode",{parentName:"p"},"ModuleBuilder"))," class to create a module based on those arbitrary classes.\n",(0,i.mdx)("inlineCode",{parentName:"p"},"ModuleBuilder")," has multiple ",(0,i.mdx)("inlineCode",{parentName:"p"},"scan()")," methods that can be used to scan a class or an instance and collect providers. The whole class hierarchy is scanned, so providers defined in superclasses\nwould also be picked up by ",(0,i.mdx)("inlineCode",{parentName:"p"},"scan()"),"."),(0,i.mdx)("p",null,"Here is how we create an ",(0,i.mdx)("inlineCode",{parentName:"p"},"Injector"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/ClassScanExample.java tag=REGION_3",url:"/examples/core/inject-2/src/main/java/ClassScanExample.java",tag:"REGION_3"},'public static void main(String[] args) {\n  Injector injector = Injector.of(\n      ModuleBuilder.create()\n          .scan(StaticProviders.class)\n          .scan(new MixedProviders("example.com"))\n          .build()\n  );\n\n  DataSource dataSource = injector.getInstance(DataSource.class);\n  System.out.println(dataSource.queryData());\n}\n')),(0,i.mdx)("p",null,"For ",(0,i.mdx)("inlineCode",{parentName:"p"},"StaticProviders")," class that contains only static providers we do not need an instance of a class. That is why we only pass a class to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"scan()")," method.\nAlternatively, ",(0,i.mdx)("inlineCode",{parentName:"p"},"MixedProviders")," class also contains a non-static provider method so we need to pass an instance of ",(0,i.mdx)("inlineCode",{parentName:"p"},"MixedProviders")," to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"scan()")," method."),(0,i.mdx)("p",null,"All of the collected providers form a new ",(0,i.mdx)("inlineCode",{parentName:"p"},"Module")," that is then being passed to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Injcetor"),"."))}p.isMDXComponent=!0}}]);
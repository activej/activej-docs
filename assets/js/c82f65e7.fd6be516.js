(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[6105],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},77815:function(e,t,r){"use strict";r(67294);var n=r(39962);t.Z=function(e){var t=e.name,r=(0,n.Z)().siteConfig;if(!t)throw new Error("Variable name is required");if(void 0===r.customFields[t])throw new Error("Variable "+t+" not exist");return r.customFields[t]}},67715:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var n=r(22122),a=r(19756),i=(r(67294),r(3905)),o=r(77815),s=["components"],l={description:"ActiveJ FS | Java library for efficient and scalable distributed storage with data redundancy, rebalancing, and resharding",sidebar_label:"Overview",keywords:["storage","distributed storage","redundancy","rebelancing","kernel-space","java framework","ftp protocol","append-only"],slug:"/fs"},c="Overview",p={unversionedId:"fs/overview",id:"fs/overview",isDocsHomePage:!1,title:"Overview",description:"ActiveJ FS | Java library for efficient and scalable distributed storage with data redundancy, rebalancing, and resharding",source:"@site/docs/fs/overview.mdx",sourceDirName:"fs",slug:"/fs",permalink:"/fs",version:"current",frontMatter:{description:"ActiveJ FS | Java library for efficient and scalable distributed storage with data redundancy, rebalancing, and resharding",sidebar_label:"Overview",keywords:["storage","distributed storage","redundancy","rebelancing","kernel-space","java framework","ftp protocol","append-only"],slug:"/fs"},sidebar:"docs",previous:{title:"Memcached-like Application",permalink:"/rpc/memcached-like-application"},next:{title:"Examples",permalink:"/fs/examples"}},u=[{value:"Why ActiveJ FS?",id:"why-activej-fs",children:[]},{value:"Where ActiveJ FS can be used?",id:"where-activej-fs-can-be-used",children:[]},{value:"Streaming file access",id:"streaming-file-access",children:[]},{value:"Add ActiveJ FS to your project",id:"add-activej-fs-to-your-project",children:[]}],d={toc:u};function m(e){var t=e.components,r=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"overview"},"Overview"),(0,i.kt)("p",null,"ActiveJ FS is a lightweight asynchronous Java library that provides a tiny abstraction on top of common file operations. It provides upload, download, append, list, copy, move, delete, and other methods for operating with local, remote or distributed storage."),(0,i.kt)("h2",{id:"why-activej-fs"},"Why ActiveJ FS?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Asynchronous file system"),(0,i.kt)("li",{parentName:"ul"},"Lightweight by design"),(0,i.kt)("li",{parentName:"ul"},"Intuitive API that consists of well-known file operations"),(0,i.kt)("li",{parentName:"ul"},"Supports atomic file uploads"),(0,i.kt)("li",{parentName:"ul"},"Support for client-server communication using custom binary protocol as well as HTTP protocol"),(0,i.kt)("li",{parentName:"ul"},"Can be launched as a distributed file system cluster")),(0,i.kt)("h2",{id:"where-activej-fs-can-be-used"},"Where ActiveJ FS can be used?"),(0,i.kt)("p",null,"There are several ActiveJ FS implementations:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Local ActiveJ FS")," designed for working with file systems located on a single machine. Ideal to implement a ",(0,i.kt)("strong",{parentName:"li"},"local file storage for your application"),", for example database storage, backup data storage, local logs storage, etc."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Client/Server implementations")," for operating with files that are stored remotely. This implementation supports two protocols:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Custom ",(0,i.kt)("strong",{parentName:"li"},"TCP-based binary protocol")," with zero overhead. Resembles FTP, but simpler and more efficient."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"HTTP protocol")," that allows to define a REST API. It also provides third-party clients like browsers access remote ActiveJ FS servers."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Cluster ActiveJ FS")," is designed for distributed big data workload. It's optimized for processing large immutable datasets or append-only files. Cluster ActiveJ FS was intentionally made ",(0,i.kt)("strong",{parentName:"li"},"not POSIX-compilant")," and works only with ",(0,i.kt)("strong",{parentName:"li"},"immutable files"),". In this way the whole system is simple, lightweight and resilient to server or network failures. Also, this approach allows to avoid the overhead of master-slave architecture and synchronization of mutable files. With ActiveJ FS you can create distributed, scalable P2P file systems with built-in support for rebalancing, failover, and scalability."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"ActiveJ FS Adapters")," enable filtering, mounting, transforming file names, adding and removing prefixes, subdirectories, etc.")),(0,i.kt)("h2",{id:"streaming-file-access"},"Streaming file access"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"upload()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"download()")," operations utilize ",(0,i.kt)("a",{parentName:"p",href:"/async-io/csp"},"CSP")," module so files are uploaded/downloaded using asynchronous data streams."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'String filename = "hello.txt";\n\nEventloop eventloop = Eventloop.create().withCurrentThread();\nExecutor executor = Executors.newSingleThreadExecutor();\n\nLocalActiveFs fs = LocalActiveFs.create(eventloop, executor, Paths.get("/tmp/file-storage"));\n\nfs.start()\n        .then(() -> ChannelSupplier.of(ByteBufStrings.wrapAscii("Hello World"))\n                .streamTo(fs.upload(filename)))\n        .then(() -> fs.download(filename))\n        .map(supplier -> supplier.map(buf -> buf.asString(StandardCharsets.US_ASCII)))\n        .then(supplier -> supplier.streamTo(ChannelConsumer.ofConsumer(System.out::println)));\n\neventloop.run();\n')),(0,i.kt)("h2",{id:"add-activej-fs-to-your-project"},"Add ActiveJ FS to your project"),(0,i.kt)("p",null,"You can add ActiveJ FS to your project by importing its Maven repository.\nThese docs cover the most recent release of ActiveJ FS ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(o.Z,{name:"currentVersion",mdxType:"Variable"}))," (see on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/activej/activej/tree/master/core-fs"},"Github")," or ",(0,i.kt)("a",{parentName:"p",href:"https://mvnrepository.com/artifact/io.activej/activej-fs"},"Maven"),")."))}m.isMDXComponent=!0}}]);
(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[8176],{77618:function(e,t,a){"use strict";var r=a(67294),n=a(39962);t.Z=function(e){var t=e.url,a=e.text,s=e.isInline,i=void 0===s||s,o=e.children,m=(0,n.Z)().siteConfig,l=t.startsWith("/examples")?m.customFields.githubExamplesBranch:m.customFields.githubBranch;return r.createElement("a",{style:i?{}:{display:"block",marginBottom:"16px"},href:m.customFields.githubUrl+"/"+l+t,target:"_blank"},a||o)}},14304:function(e,t,a){"use strict";var r=a(67294),n=a(21140),s=a.n(n);s().initialize({startOnLoad:!0});t.Z=function(e){var t=e.chart;return(0,r.useEffect)((function(){s().contentLoaded()}),[]),r.createElement("div",{className:"mermaid"},t)}},77815:function(e,t,a){"use strict";a(67294);var r=a(39962);t.Z=function(e){var t=e.name,a=(0,r.Z)().siteConfig;if(!t)throw new Error("Variable name is required");if(void 0===a.customFields[t])throw new Error("Variable "+t+" not exist");return a.customFields[t]}},81136:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return p},contentTitle:function(){return u},metadata:function(){return d},toc:function(){return c},default:function(){return k}});var r=a(83117),n=a(80102),s=(a(67294),a(3905)),i=a(77618),o=a(14304),m=a(77815),l=["components"],p={title:"ActiveJ | Datastream, asynchronous reactive Java streams with minimal overhead",description:"Asynchronous reactive Java streams with extremely low overhead",sidebar_label:"Datastream",keywords:["datastream","reactive streams","async reactive streams","java","java framework"]},u="Datastream",d={unversionedId:"async-io/datastream",id:"async-io/datastream",isDocsHomePage:!1,title:"ActiveJ | Datastream, asynchronous reactive Java streams with minimal overhead",description:"Asynchronous reactive Java streams with extremely low overhead",source:"@site/docs/async-io/datastream.mdx",sourceDirName:"async-io",slug:"/async-io/datastream",permalink:"/async-io/datastream",tags:[],version:"current",frontMatter:{title:"ActiveJ | Datastream, asynchronous reactive Java streams with minimal overhead",description:"Asynchronous reactive Java streams with extremely low overhead",sidebar_label:"Datastream",keywords:["datastream","reactive streams","async reactive streams","java","java framework"]},sidebar:"docs",previous:{title:"CSP",permalink:"/async-io/csp"},next:{title:"Net",permalink:"/async-io/net"}},c=[{value:"Overview",id:"overview",children:[],level:2},{value:"Features",id:"features",children:[],level:2},{value:"Comparison to CSP",id:"comparison-to-csp",children:[],level:2},{value:"Benchmarks",id:"benchmarks",children:[],level:2},{value:"Examples",id:"examples",children:[{value:"Simple Supplier",id:"simple-supplier",children:[],level:3},{value:"Simple Consumer",id:"simple-consumer",children:[],level:3},{value:"Custom Transformer",id:"custom-transformer",children:[],level:3},{value:"Built-in Stream Nodes",id:"built-in-stream-nodes",children:[],level:3}],level:2}],h={toc:c};function k(e){var t=e.components,a=(0,n.Z)(e,l);return(0,s.kt)("wrapper",(0,r.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"datastream"},"Datastream"),(0,s.kt)("h2",{id:"overview"},"Overview"),(0,s.kt)("p",null,"Datastream is a high-performance implementation of reactive streams. It is useful for intra and inter-server\ncommunication and asynchronous data processing."),(0,s.kt)("h2",{id:"features"},"Features"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Modern implementation of asynchronous reactive streams (as opposed to streams in Java 8 and traditional thread-based blocking streams)"),(0,s.kt)("li",{parentName:"ul"},"Asynchronous with effective backpressure control to cope with the natural imbalance in the speed of data sources"),(0,s.kt)("li",{parentName:"ul"},"Composable stream operations (mappers, reducers, filters, sorters, mergers/splitters, compression, serialization)"),(0,s.kt)("li",{parentName:"ul"},"Stream-based network and file I/O on top of reactors (",(0,s.kt)("a",{parentName:"li",href:"/async-io/eventloop"},"Eventloop module"),")"),(0,s.kt)("li",{parentName:"ul"},"Compatibility with ",(0,s.kt)("a",{parentName:"li",href:"/async-io/csp"},"CSP module"))),(0,s.kt)("h2",{id:"comparison-to-csp"},"Comparison to CSP"),(0,s.kt)("p",null,"Datastream has a lot in common with the CSP module.\nAlthough they were both designed for I/O processing, there are few important differecnes:"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null}),(0,s.kt)("th",{parentName:"tr",align:null},"Datastream"),(0,s.kt)("th",{parentName:"tr",align:null},"CSP"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},"Overhead:")),(0,s.kt)("td",{parentName:"tr",align:null},"Low: stream can be started with 1 virtual call, short-circuit evaluation optimizes performance"),(0,s.kt)("td",{parentName:"tr",align:null},"No short-circuit evaluation, overhead is higher")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},"Throughput speed:")),(0,s.kt)("td",{parentName:"tr",align:null},"Very fast (",(0,s.kt)("em",{parentName:"td"},"360 880 548 ops/sec"),")"),(0,s.kt)("td",{parentName:"tr",align:null},"Fast (",(0,s.kt)("em",{parentName:"td"},"105 932 203 ops/sec"),"), but slower than Datastream")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},"Optimized for:")),(0,s.kt)("td",{parentName:"tr",align:null},"Small pieces of data"),(0,s.kt)("td",{parentName:"tr",align:null},"Medium-sized objects, ",(0,s.kt)("a",{parentName:"td",href:"/misc/bytebuf"},(0,s.kt)("inlineCode",{parentName:"a"},"ByteBufs")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},"Programming model:")),(0,s.kt)("td",{parentName:"tr",align:null},"More complicated"),(0,s.kt)("td",{parentName:"tr",align:null},"Simple and convenient")))),(0,s.kt)("p",null,"ActiveJ makes extensive use of combinations of CSP and Datastream for maximum efficiency. To do this,\n",(0,s.kt)("inlineCode",{parentName:"p"},"ChannelSupplier"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"ChannelConsumer"),", ",(0,s.kt)(i.Z,{url:"/core-datastream/src/main/java/io/activej/datastream/supplier/StreamSupplier.java",mdxType:"Githublink"},(0,s.kt)("inlineCode",{parentName:"p"},"StreamSupplier")),"\nand ",(0,s.kt)(i.Z,{url:"/core-datastream/src/main/java/io/activej/datastream/supplier/StreamConsumer.java",mdxType:"Githublink"},(0,s.kt)("inlineCode",{parentName:"p"},"StreamConsumer"))," have ",(0,s.kt)("inlineCode",{parentName:"p"},"transformWith()")," methods and special\nTransformer interfaces. Using these methods and interfaces, you can easily transform channels into other channels or datastreams and vice versa, creating chains of such transformations."),(0,s.kt)("h2",{id:"benchmarks"},"Benchmarks"),(0,s.kt)("p",null,"We measured the performance of Datastream (",(0,s.kt)("inlineCode",{parentName:"p"},"StreamSupplier")," streams 100M Integer objects to ",(0,s.kt)("inlineCode",{parentName:"p"},"StreamConsumer")," scenario)\nand got the following result:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"Time: 2771ms; Average time: 277.1ms; Best time: 275ms; Worst time: 281ms; Operations per second: 360 880 548\n")),(0,s.kt)("p",null,"We also measured the performance of the TCP server that uses both Datastream and CSP and got an average result of ",(0,s.kt)("strong",{parentName:"p"},"47 495 905 requests per second"),"."),(0,s.kt)("p",null,"You can find benchmark sources on ",(0,s.kt)(i.Z,{url:"/benchmarks/datastream/src/main/java/io/activej/datastream/DatastreamBenchmark.java",mdxType:"Githublink"},(0,s.kt)("strong",{parentName:"p"},"GitHub"))),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#simple-supplier"},"Simple Supplier")," - shows how to create a simple ",(0,s.kt)("inlineCode",{parentName:"li"},"StreamSupplier")," and stream some data to ",(0,s.kt)("inlineCode",{parentName:"li"},"StreamConsumer")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#simple-consumer"},"Simple Consumer")," - shows how to create a simple ",(0,s.kt)("inlineCode",{parentName:"li"},"StreamConsumer")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#custom-transformer"},"Custom Transformer")," - shows how to create a custom ",(0,s.kt)(i.Z,{url:"/core-datastream/src/main/java/io/activej/datastream/processor/StreamTransformer.java",mdxType:"Githublink"},(0,s.kt)("inlineCode",{parentName:"li"},"StreamTransformer")),", which takes strings and transforms them to their length if it is less than ",(0,s.kt)("inlineCode",{parentName:"li"},"MAX_LENGTH"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#built-in-stream-nodes"},"Built-in Stream Nodes Example")," - demonstrates some of Datastream's built-in features, such as filtering, splitting, union, and mapping.")),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"To run the examples, you need to clone ActiveJ from GitHub"),(0,s.kt)("pre",{parentName:"div"},(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/activej/activej\n")),(0,s.kt)("p",{parentName:"div"},"And import it as a Maven project. Check out tag ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(m.Z,{name:"currentVersion",mdxType:"Variable"})),". Before running the examples, build the project.\nThese examples are located at ",(0,s.kt)("inlineCode",{parentName:"p"},"activej/examples/core/datastream")))),(0,s.kt)("h3",{id:"simple-supplier"},"Simple Supplier"),(0,s.kt)("p",null,"When you run ",(0,s.kt)(i.Z,{url:"/examples/core/datastream/src/main/java/SupplierExample.java",mdxType:"Githublink"},(0,s.kt)("inlineCode",{parentName:"p"},"SupplierExample")),", you'll see the following output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"Consumer received: [0, 1, 2, 3, 4]\n")),(0,s.kt)("p",null,"This output represents the data that our custom ",(0,s.kt)("inlineCode",{parentName:"p"},"StreamSupplier")," provided to ",(0,s.kt)("inlineCode",{parentName:"p"},"StreamConsumer"),". Let's take a\nlook at the implementation:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/datastream/src/main/java/SupplierExample.java tag=EXAMPLE",url:"/examples/core/datastream/src/main/java/SupplierExample.java",tag:"EXAMPLE"},'public final class SupplierExample {\n  public static void main(String[] args) {\n\n    //create an eventloop for streams operations\n    Eventloop eventloop = Eventloop.builder()\n      .withCurrentThread()\n      .build();\n    //create a supplier of some numbers\n    StreamSupplier<Integer> supplier = StreamSuppliers.ofValues(0, 1, 2, 3, 4);\n    //creating a consumer for our supplier\n    ToListStreamConsumer<Integer> consumer = ToListStreamConsumer.create();\n\n    //streaming supplier\'s numbers to consumer\n    supplier.streamTo(consumer);\n\n    //when stream completes, streamed data is printed out\n    consumer.getResult().whenResult(result -> System.out.println("Consumer received: " + result));\n\n    //start eventloop\n    eventloop.run();\n  }\n}\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(i.Z,{url:"/examples/core/datastream/src/main/java/SupplierExample.java",mdxType:"Githublink"},"See full example on GitHub"))),(0,s.kt)("h3",{id:"simple-consumer"},"Simple Consumer"),(0,s.kt)("p",null,"When you run ",(0,s.kt)(i.Z,{url:"/examples/core/datastream/src/main/java/ConsumerExample.java",mdxType:"Githublink"},(0,s.kt)("inlineCode",{parentName:"p"},"ConsumerExample")),", you'll see the following output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"received: 1\nreceived: 2\nreceived: 3\nEnd of stream received\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"ConsumerExample")," represents a custom consumer that extends ",(0,s.kt)(i.Z,{url:"/core-datastream/src/main/java/io/activej/datastream/AbstractStreamConsumer.java",mdxType:"Githublink"},(0,s.kt)("inlineCode",{parentName:"p"},"AbstractStreamConsumer"))," and simply prints the received data. The stream process is managed by the overridden ",(0,s.kt)("inlineCode",{parentName:"p"},"onStarted()"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"onEndOfStream()")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"onError()")," methods:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/datastream/src/main/java/ConsumerExample.java tag=EXAMPLE",url:"/examples/core/datastream/src/main/java/ConsumerExample.java",tag:"EXAMPLE"},'public final class ConsumerExample<T> extends AbstractStreamConsumer<T> {\n  @Override\n  protected void onStarted() {\n    resume(x -> System.out.println("received: " + x));\n  }\n\n  @Override\n  protected void onEndOfStream() {\n    System.out.println("End of stream received");\n    acknowledge();\n  }\n\n  @Override\n  protected void onError(Exception t) {\n    System.out.println("Error handling logic must be here. No confirmation to upstream is needed");\n  }\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(i.Z,{url:"/examples/core/datastream/src/main/java/ConsumerExample.java",mdxType:"Githublink"},"See full example on GitHub"))),(0,s.kt)("h3",{id:"custom-transformer"},"Custom Transformer"),(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"#"},(0,s.kt)(i.Z,{url:"/examples/core/datastream/src/main/java/TransformerExample.java",mdxType:"Githublink"},(0,s.kt)("inlineCode",{parentName:"a"},"Transformer Example")))," shows how to create a custom ",(0,s.kt)("inlineCode",{parentName:"p"},"StreamTransformer")," that takes strings from the input stream and transforms them to their length, if it is less than the given ",(0,s.kt)("inlineCode",{parentName:"p"},"MAX_LENGTH"),". First, we define ",(0,s.kt)("inlineCode",{parentName:"p"},"AbstractStreamConsumer")," and ",(0,s.kt)(i.Z,{url:"/core-datastream/src/main/java/io/activej/datastream/AbstractStreamSupplier.java",mdxType:"Githublink"},(0,s.kt)("inlineCode",{parentName:"p"},"AbstractStreamSupplier")),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/datastream/src/main/java/TransformerExample.java tag=REGION_1",url:"/examples/core/datastream/src/main/java/TransformerExample.java",tag:"REGION_1"},"private final AbstractStreamConsumer<String> input = new AbstractStreamConsumer<>() {\n  @Override\n  protected void onEndOfStream() {\n    output.sendEndOfStream();\n  }\n};\n\nprivate final AbstractStreamSupplier<Integer> output = new AbstractStreamSupplier<>() {\n  @Override\n  protected void onResumed() {\n    input.resume(item -> {\n      int len = item.length();\n      if (len < MAX_LENGTH) {\n        output.send(len);\n      }\n    });\n  }\n\n  @Override\n  protected void onSuspended() {\n    input.suspend();\n  }\n};\n")),(0,s.kt)("p",null,"Now we define the ",(0,s.kt)("inlineCode",{parentName:"p"},"main")," method that creates the test data supplier, an instance of ",(0,s.kt)("inlineCode",{parentName:"p"},"TransformerExample")," and ",(0,s.kt)(i.Z,{url:"/core-datastream/src/main/java/io/activej/datastream/consumer/ToListStreamConsumer.java",mdxType:"Githublink"},(0,s.kt)("inlineCode",{parentName:"p"},"ToListStreamConsumer")),"\nNext, we define the sequence of transformation and output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/datastream/src/main/java/TransformerExample.java tag=REGION_2",url:"/examples/core/datastream/src/main/java/TransformerExample.java",tag:"REGION_2"},'public static void main(String[] args) {\n  Eventloop eventloop = Eventloop.builder()\n    .withCurrentThread()\n    .withFatalErrorHandler(rethrow())\n    .build();\n\n  StreamSupplier<String> source = StreamSuppliers.ofValues("testdata", "testdata1", "testdata1000");\n  TransformerExample transformer = new TransformerExample();\n\n  source.transformWith(transformer)\n    .toList()\n    .whenResult(v -> System.out.println(v));\n\n  eventloop.run();\n}\n')),(0,s.kt)("p",null,"If you run the example, you'll receive the following output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"[8, 9]\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(i.Z,{url:"/examples/core/datastream/src/main/java/TransformerExample.java",mdxType:"Githublink"},"See full example on GitHub"))),(0,s.kt)("h3",{id:"built-in-stream-nodes"},"Built-in Stream Nodes"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"#"},(0,s.kt)(i.Z,{url:"/examples/core/datastream/src/main/java/BuiltinNodesExample.java",mdxType:"Githublink"},(0,s.kt)("inlineCode",{parentName:"a"},"BuiltinStreamNodesExample")))," demonstrates some simple examples of utilizing built-in datastream nodes."),(0,s.kt)("p",null,"The first of these is ",(0,s.kt)("inlineCode",{parentName:"p"},"StreamTransformers#filter"),".\nIt allows you to apply a function to input data and then stream the result of the function to the destination. In this\nparticular example, stream transformer filters the input numbers and then streams only the odd numbers to the consumer ."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/datastream/src/main/java/BuiltinNodesExample.java tag=REGION_1",url:"/examples/core/datastream/src/main/java/BuiltinNodesExample.java",tag:"REGION_1"},"private static void filter() {\n  StreamSupplier<Integer> supplier = StreamSuppliers.ofValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n  StreamTransformer<Integer, Integer> filter = StreamTransformers.filter(input -> input % 2 == 1);\n\n  ToListStreamConsumer<Integer> consumer = ToListStreamConsumer.create();\n\n  supplier.transformWith(filter).streamTo(consumer);\n\n  consumer.getResult().whenResult(v -> System.out.println(v));\n}\n")),(0,s.kt)("p",null,"The output for this example is ",(0,s.kt)("inlineCode",{parentName:"p"},"[1, 3, 5, 7, 9]"),", while the graph of streams is pretty simple and looks as follows:"),(0,s.kt)(o.Z,{chart:"\ngraph TD\n    id1(StreamSuppliers#ofIterator)--\x3eid2(Filter$Input)--\x3eid3([Filter])--\x3eid4(Filter$Output)--\x3eid5(ToListStreamConsumer)\n    style id1 stroke:#3578ep,stroke-width:2px\n    style id2 stroke:#fa383e,stroke-width:2px\n    style id3 stroke:#a4a6a8,stroke-width:2px\n    style id4 stroke:#3578ep,stroke-width:2px\n    style id5 stroke:#fa383e,stroke-width:2px\n",mdxType:"Mermaid"}),(0,s.kt)("p",null,"Another built-in stream node is ",(0,s.kt)("inlineCode",{parentName:"p"},"StreamTransformers#mapper"),"."),(0,s.kt)("p",null,"It changes each input item according to a given function, for example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/datastream/src/main/java/BuiltinNodesExample.java tag=REGION_3",url:"/examples/core/datastream/src/main/java/BuiltinNodesExample.java",tag:"REGION_3"},'private static void mapper() {\n  //creating a supplier of 10 numbers\n  StreamSupplier<Integer> supplier = StreamSuppliers.ofValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n  //creating a mapper for the numbers\n  StreamTransformer<Integer, String> simpleMap = StreamTransformers.mapper(x -> x + " times ten = " + x * 10);\n\n  //creating a consumer which converts received values to list\n  ToListStreamConsumer<String> consumer = ToListStreamConsumer.create();\n\n  //applying the mapper to supplier and streaming the result to consumer\n  supplier.transformWith(simpleMap).streamTo(consumer);\n\n  //when consumer completes receiving values, the result is printed out\n  consumer.getResult().whenResult(v -> System.out.println(v));\n}\n')),(0,s.kt)("p",null,"The output for this example is"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"[\n    1 times ten = 10,\n    2 times ten = 20,\n    3 times ten = 30,\n    4 times ten = 40,\n    5 times ten = 50,\n    6 times ten = 60,\n    7 times ten = 70,\n    8 times ten = 80,\n    9 times ten = 90,\n    10 times ten = 100\n]\n")),(0,s.kt)("p",null,"and the graph of streams looks as follows:"),(0,s.kt)(o.Z,{chart:"\ngraph TD\n    id1(StreamSuppliers#ofIterator)--\x3eid2(Mapper$Input)--\x3eid3([Mapper])--\x3eid4(Mapper$Output)--\x3eid5(ToListStreamConsumer)\n    style id1 stroke:#3578ep,stroke-width:2px\n    style id2 stroke:#fa383e,stroke-width:2px\n    style id3 stroke:#a4a6a8,stroke-width:2px\n    style id4 stroke:#3578ep,stroke-width:2px\n    style id5 stroke:#fa383e,stroke-width:2px\n",mdxType:"Mermaid"}),(0,s.kt)("p",null,"Let's take a look at another built-in node ",(0,s.kt)(i.Z,{url:"/core-datastream/src/main/java/io/activej/datastream/processor/StreamSplitter.java",mdxType:"Githublink"},(0,s.kt)("inlineCode",{parentName:"p"},"StreamSplitter"))),(0,s.kt)("p",null,"This is a stream transformer that distributes input streams according to a given function. In this example it\ndistributes 10 numbers between 3 consumers."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/datastream/src/main/java/BuiltinNodesExample.java tag=REGION_2",url:"/examples/core/datastream/src/main/java/BuiltinNodesExample.java",tag:"REGION_2"},'private static void splitter() {\n  StreamSupplier<Integer> supplier = StreamSuppliers.ofValues(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n  ToIntFunction<Object> hashSharder = item -> (item.hashCode() & Integer.MAX_VALUE) % 3;\n  //creating a sharder of three parts for three consumers\n  StreamSplitter<Integer, Integer> sharder = StreamSplitter.create(\n    (item, acceptors) -> acceptors[hashSharder.applyAsInt(item)].accept(item));\n\n  ToListStreamConsumer<Integer> first = ToListStreamConsumer.create();\n  ToListStreamConsumer<Integer> second = ToListStreamConsumer.create();\n  ToListStreamConsumer<Integer> third = ToListStreamConsumer.create();\n\n  sharder.newOutput().streamTo(first);\n  sharder.newOutput().streamTo(second);\n  sharder.newOutput().streamTo(third);\n\n  supplier.streamTo(sharder.getInput());\n\n  first.getResult().whenResult(x -> System.out.println("first: " + x));\n  second.getResult().whenResult(x -> System.out.println("second: " + x));\n  third.getResult().whenResult(x -> System.out.println("third: " + x));\n}\n')),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"In this example we can't use a shortcut method ",(0,s.kt)("inlineCode",{parentName:"p"},"transformWith")," as it can be\nused only with the transformers that have exactly one input and one output streams."))),(0,s.kt)("p",null,"The output for this example is"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"first: [3, 6, 9]\nsecond: [1, 4, 7, 10]\nthird: [2, 5, 8]`\n")),(0,s.kt)("p",null,"And the streams graph looks as follows:"),(0,s.kt)(o.Z,{chart:"\ngraph TD;\n    id7(StreamSuppliers#ofIterator):::blue--\x3eid8(StreamSplitter$Input);\n    id8--\x3eStreamSplitter:::grey;\n    StreamSplitter--\x3eid1(StreamSplitter$Output);\n    StreamSplitter--\x3eid2(StreamSplitter$Output);\n    StreamSplitter--\x3eid3(StreamSplitter$Output);\n    id1--\x3eid4(ToListStreamConsumer);\n    id2--\x3eid5(ToListStreamConsumer);\n    id3--\x3eid6(ToListStreamConsumer);\n",mdxType:"Mermaid"}),(0,s.kt)("p",null,"When creating a ",(0,s.kt)("strong",{parentName:"p"},"StreamSplitter"),", you can specify any function in the lambda. For\nexample, to create a transformer that sends all input data to all consumers, just create the following lambda expression:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"(item, acceptors) -> {for (StreamDataAcceptor<Integer> acceptor : acceptors) { acceptor.accept(item);}}\n")),(0,s.kt)("p",null,"In this case the output will be"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"first: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsecond: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nthird: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n")),(0,s.kt)("p",null,"Finally, let's take a look at ",(0,s.kt)(i.Z,{url:"/core-datastream/src/main/java/io/activej/datastream/processor/StreamUnion.java",mdxType:"Githublink"},(0,s.kt)("inlineCode",{parentName:"p"},"StreamUnion"))," It works as the opposite of ",(0,s.kt)("inlineCode",{parentName:"p"},"StreamSplitter")," and combines several input streams into one output:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/datastream/src/main/java/BuiltinNodesExample.java tag=REGION_4",url:"/examples/core/datastream/src/main/java/BuiltinNodesExample.java",tag:"REGION_4"},"private static void union() {\n  //creating three suppliers of numbers\n  StreamSupplier<Integer> source0 = StreamSuppliers.ofValues(1, 2);\n  StreamSupplier<Integer> source1 = StreamSuppliers.empty();\n  StreamSupplier<Integer> source2 = StreamSuppliers.ofValues(3, 4, 5);\n\n  //creating a unifying transformer\n  StreamUnion<Integer> streamUnion = StreamUnion.create();\n\n  //creating a consumer which converts received values to list\n  ToListStreamConsumer<Integer> consumer = ToListStreamConsumer.create();\n\n  //stream the sources into new inputs of the unifier\n  source0.streamTo(streamUnion.newInput());\n  source1.streamTo(streamUnion.newInput());\n  source2.streamTo(streamUnion.newInput());\n\n  //and stream the output of the unifier into the consumer\n  streamUnion.getOutput().streamTo(consumer);\n\n  //when consumer completes receiving values, the result is printed out\n  consumer.getResult().whenResult(v -> System.out.println(v));\n}\n")),(0,s.kt)("p",null,"The output for this example is ",(0,s.kt)("inlineCode",{parentName:"p"},"[1, 2, 3, 4, 5]")," and the graph of streams looks as follows:"),(0,s.kt)(o.Z,{chart:"\ngraph TD;\n    id1(StreamSuppliers#ofIterator)--\x3eid2(StreamUnion$Input);\n    id3(StreamSuppliers#ofIterator)--\x3eid4(StreamUnion$Input);\n    id5(StreamSuppliers#ofIterator)--\x3eid6(StreamUnion$Input);\n    id2--\x3eStreamUnion;\n    id4--\x3eStreamUnion;\n    id6--\x3eStreamUnion;\n    StreamUnion--\x3eStreamUnion$Output;\n    StreamUnion$Output--\x3eStreamConsumer;\n    StreamUnion$Output--\x3eToListStreamConsumer;\n",mdxType:"Mermaid"}),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(i.Z,{url:"/examples/core/datastream/src/main/java/BuiltinNodesExample.java",mdxType:"Githublink"},"See full example on GitHub"))))}k.isMDXComponent=!0},11748:function(e,t,a){var r={"./locale":89234,"./locale.js":89234};function n(e){var t=s(e);return a(t)}function s(e){if(!a.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}n.keys=function(){return Object.keys(r)},n.resolve=s,e.exports=n,n.id=11748}}]);
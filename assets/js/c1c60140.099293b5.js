(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[5033],{3905:function(e,t,n){"use strict";n.r(t),n.d(t,{MDXContext:function(){return s},MDXProvider:function(){return u},mdx:function(){return h},useMDXComponents:function(){return d},withMDXComponents:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){return function(t){var n=d(t.components);return a.createElement(e,i({},t,{components:n}))}},d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=d(n),u=r,g=m["".concat(o,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(g,l(l({ref:t},s),{},{components:n})):a.createElement(g,l({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},77618:function(e,t,n){"use strict";var a=n(95318).default;t.Z=void 0;var r=a(n(67294)),i=a(n(39962)),o=function(e){var t=e.url,n=e.text,a=e.isInline,o=void 0===a||a,l=e.children,p=(0,i.default)().siteConfig;return r.default.createElement("a",{style:o?{}:{display:"block",marginBottom:"16px"},href:p.customFields.githubUrl+"/"+p.customFields.githubBranch+t,target:"_blank"},n||l)};t.Z=o},77815:function(e,t,n){"use strict";var a=n(95318).default;t.Z=void 0;a(n(67294));var r=a(n(39962)),i=function(e){var t=e.name,n=(0,r.default)().siteConfig;if(!t)throw new Error("Variable name is required");if(void 0===n.customFields[t])throw new Error("Variable "+t+" not exist");return n.customFields[t]};t.Z=i},28883:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return m},toc:function(){return d},default:function(){return c}});var a=n(22122),r=n(19756),i=(n(67294),n(3905)),o=n(77815),l=n(77618),p=["components"],s={title:"ActiveJ | Simple web application with template engine integration",keywords:["java","java framework","tutorial","java for beginners","guide","http server","spring alternative","netty alternative","jetty alternative","template engine","mustache","poll application"],description:"Create poll web-application using ActiveJ and Mustache template engine. The embedded application server in 100 lines of code and no xml configurations."},m={unversionedId:"tutorials/template-engine-integration",id:"tutorials/template-engine-integration",isDocsHomePage:!1,title:"Template engine integration",description:"Create poll web-application using ActiveJ and Mustache template engine. The embedded application server in 100 lines of code and no xml configurations.",source:"@site/docs/tutorials/template-engine-integration.mdx",sourceDirName:"tutorials",slug:"/tutorials/template-engine-integration",permalink:"/tutorials/template-engine-integration",version:"current",frontMatter:{title:"ActiveJ | Simple web application with template engine integration",keywords:["java","java framework","tutorial","java for beginners","guide","http server","spring alternative","netty alternative","jetty alternative","template engine","mustache","poll application"],description:"Create poll web-application using ActiveJ and Mustache template engine. The embedded application server in 100 lines of code and no xml configurations."},sidebar:"tutorials",previous:{title:"Getting Started",permalink:"/tutorials/getting-started"},next:{title:"Form Validation Using HTTP Decoder",permalink:"/tutorials/http-decoder"}},d=[{value:"Creating launcher",id:"creating-launcher",children:[]},{value:"Running the application",id:"running-the-application",children:[]}],u={toc:d};function c(e){var t=e.components,n=(0,r.default)(e,p);return(0,i.mdx)("wrapper",(0,a.default)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"In this example we will implement template engines in ActiveJ applications. The example shows how to create a simple Poll app which creates new polls with a custom title, description, and options. Each new poll gets a unique generated link that leads to the page where you can vote."),(0,i.mdx)("p",null,"See how simple it is to implement such features using ActiveJ: the embedded application server has only about ",(0,i.mdx)("strong",{parentName:"p"},"100 lines of code")," with ",(0,i.mdx)("strong",{parentName:"p"},"no additional xml configurations"),". In this example we used ",(0,i.mdx)("a",{parentName:"p",href:"https://mustache.github.io/"},(0,i.mdx)("strong",{parentName:"a"},"Mustache"))," as a template engine."),(0,i.mdx)("p",null,"Here we will consider only the ",(0,i.mdx)("a",{parentName:"p",href:"#creating-launcher"},(0,i.mdx)("inlineCode",{parentName:"a"},"ApplicationLauncher")," class"),", which is the main class of the application. You can find full example sources on ",(0,i.mdx)(l.Z,{text:"GitHub",url:"/examples/tutorials/template-engine",mdxType:"Githublink"})),(0,i.mdx)("h2",{id:"creating-launcher"},"Creating launcher"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"ApplicationLauncher")," launches our application, takes care of routing and proper content generation on HTML pages. We will extend ActiveJ's ",(0,i.mdx)("inlineCode",{parentName:"p"},"HttpServerLauncher")," to manage the application's lifecycle:"),(0,i.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,i.mdx)("h5",{parentName:"div"},(0,i.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,i.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.mdx)("div",{parentName:"div",className:"admonition-content"},(0,i.mdx)("p",{parentName:"div"},"In this example we omit error handling to keep everything brief and simple."))),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/template-engine/src/main/java/ApplicationLauncher.java tag=REGION_1",url:"/examples/tutorials/template-engine/src/main/java/ApplicationLauncher.java",tag:"REGION_1"},"public final class ApplicationLauncher extends HttpServerLauncher {\n\n  private static ByteBuf applyTemplate(Mustache mustache, Map<String, Object> scopes) {\n    ByteBufWriter writer = new ByteBufWriter();\n    mustache.execute(writer, scopes);\n    return writer.getBuf();\n  }\n\n  @Provides\n  PollDao pollRepo() {\n    return new PollDaoImpl();\n  }\n\n")),(0,i.mdx)("p",null,"Let's have a closer look at the launcher. It contains two methods:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"applyTemplate(Mustache mustache, Map<String, Object> scopes)")," fills the provided Mustache template with the given data through a ",(0,i.mdx)("a",{parentName:"li",href:"/misc/bytebuf"},(0,i.mdx)("inlineCode",{parentName:"a"},"ByteBuf"))," - a more efficient implementation of ByteBuffer;"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"pollRepo()")," provides the business logic of our app. The ",(0,i.mdx)("inlineCode",{parentName:"li"},"@Provides")," annotation means it's done through ",(0,i.mdx)("a",{parentName:"li",href:"/inject"},"ActiveJ Inject DI"),".")),(0,i.mdx)("p",null,"Next, we provide ",(0,i.mdx)("inlineCode",{parentName:"p"},"AsyncServlet"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/template-engine/src/main/java/ApplicationLauncher.java tag=REGION_1",url:"/examples/tutorials/template-engine/src/main/java/ApplicationLauncher.java",tag:"REGION_1"},"public final class ApplicationLauncher extends HttpServerLauncher {\n\n  private static ByteBuf applyTemplate(Mustache mustache, Map<String, Object> scopes) {\n    ByteBufWriter writer = new ByteBufWriter();\n    mustache.execute(writer, scopes);\n    return writer.getBuf();\n  }\n\n  @Provides\n  PollDao pollRepo() {\n    return new PollDaoImpl();\n  }\n\n")),(0,i.mdx)("p",null,"In the ",(0,i.mdx)("inlineCode",{parentName:"p"},"AsyncServlet")," we create three Mustache objects, one for each HTML page.\nTo define routing, we create a ",(0,i.mdx)("inlineCode",{parentName:"p"},"RoutingServlet"),". You may notice that the routing approach resembles Express.js. In the example above\nwe've added the mapping to the homepage by using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"map")," method."),(0,i.mdx)("p",null,"Method",(0,i.mdx)("inlineCode",{parentName:"p"},"map(@Nullable HttpMethod method, String path, AsyncServlet servlet)")," adds a route to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"RoutingServlet"),":"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"method")," is one of the HTTP methods (",(0,i.mdx)("inlineCode",{parentName:"li"},"GET"),", ",(0,i.mdx)("inlineCode",{parentName:"li"},"POST")," and so on)"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"path")," is the path on the server"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"servlet")," defines the logic of request processing. If you need to get some data from the ",(0,i.mdx)("em",{parentName:"li"},"request")," while processing you can use:"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"request.getPathParameter(String key)"),"/",(0,i.mdx)("inlineCode",{parentName:"li"},"request.getQueryParameter(String key)")," (",(0,i.mdx)(l.Z,{text:"see example of query parameter usage",url:"/examples/core/http/src/main/java/HttpRequestParametersExample.java",mdxType:"Githublink"}),")\nto provide the key of the needed parameter and receive back a corresponding String"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"request.getPostParameters()")," to get a Map of all request parameters")),(0,i.mdx)("p",null,"In this request we get all current polls and info about them in order to generate ",(0,i.mdx)("em",{parentName:"p"},"listPolls")," page."),(0,i.mdx)("p",null,"Let's add one more request:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/template-engine/src/main/java/ApplicationLauncher.java tag=REGION_3",url:"/examples/tutorials/template-engine/src/main/java/ApplicationLauncher.java",tag:"REGION_3"},'.map(GET, "/poll/:id", request -> {\n  int id = Integer.parseInt(request.getPathParameter("id"));\n  return HttpResponse.ok200()\n      .withBody(applyTemplate(singlePollView, map("id", id, "poll", pollDao.find(id))));\n})\n')),(0,i.mdx)("p",null,"This request returns a page with a poll which id was specified in the path.\nPay attention to the provided path ",(0,i.mdx)("inlineCode",{parentName:"p"},"/poll/:id")," syntax. ",(0,i.mdx)("inlineCode",{parentName:"p"},":")," states that the following characters until the next ",(0,i.mdx)("inlineCode",{parentName:"p"},"/")," are a\nvariable; in this case, its keyword is ",(0,i.mdx)("inlineCode",{parentName:"p"},"id"),". This way you don't have to map each poll's id to a different request."),(0,i.mdx)("p",null,"The next requests with ",(0,i.mdx)("inlineCode",{parentName:"p"},"/create"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"/vote"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"/add")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"/delete")," paths take care of providing a page for creating\nnew polls, voting, adding created polls to the ",(0,i.mdx)("em",{parentName:"p"},"pollDao")," and deleting them from it respectively:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/template-engine/src/main/java/ApplicationLauncher.java tag=REGION_4",url:"/examples/tutorials/template-engine/src/main/java/ApplicationLauncher.java",tag:"REGION_4"},'.map(GET, "/create", request ->\n    HttpResponse.ok200()\n        .withBody(applyTemplate(singlePollCreate, emptyMap())))\n.map(POST, "/vote", loadBody()\n    .serve(request -> {\n      Map<String, String> params = request.getPostParameters();\n      String option = params.get("option");\n      String stringId = params.get("id");\n      if (option == null || stringId == null) {\n        return Promise.of(HttpResponse.ofCode(401));\n      }\n\n      int id = Integer.parseInt(stringId);\n      PollDao.Poll question = pollDao.find(id);\n\n      question.vote(option);\n\n      return HttpResponse.redirect302(nullToDefault(request.getHeader(REFERER), "/"));\n    }))\n.map(POST, "/add", loadBody()\n    .serve(request -> {\n      Map<String, String> params = request.getPostParameters();\n      String title = params.get("title");\n      String message = params.get("message");\n\n      String option1 = params.get("option1");\n      String option2 = params.get("option2");\n\n      int id = pollDao.add(new PollDao.Poll(title, message, list(option1, option2)));\n      return HttpResponse.redirect302("poll/" + id);\n    }))\n.map(POST, "/delete", loadBody()\n    .serve(request -> {\n      Map<String, String> params = request.getPostParameters();\n      String id = params.get("id");\n      if (id == null) {\n        return Promise.of(HttpResponse.ofCode(401));\n      }\n      pollDao.remove(Integer.parseInt(id));\n\n      return HttpResponse.redirect302("/");\n    }));\n')),(0,i.mdx)("p",null,"Also, we defined ",(0,i.mdx)("inlineCode",{parentName:"p"},"main()")," method which will start our launcher:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/template-engine/src/main/java/ApplicationLauncher.java tag=REGION_5",url:"/examples/tutorials/template-engine/src/main/java/ApplicationLauncher.java",tag:"REGION_5"},"public static void main(String[] args) throws Exception {\n  Launcher launcher = new ApplicationLauncher();\n  launcher.launch(args);\n}\n")),(0,i.mdx)("p",null,"And that's it, we have a full-functional poll application!"),(0,i.mdx)("h2",{id:"running-the-application"},"Running the application"),(0,i.mdx)("p",null,"If you want to run the example, you need to from GitHub and import\nit as a Maven project. Check out branch ",(0,i.mdx)("strong",{parentName:"p"},(0,i.mdx)(o.Z,{name:"currentVersion",mdxType:"Variable"})),". Before running the example, build the project (",(0,i.mdx)("strong",{parentName:"p"},"Ctrl + F9")," for IntelliJ IDEA).\nOpen ",(0,i.mdx)("inlineCode",{parentName:"p"},"ApplicationLauncher")," class and run its ",(0,i.mdx)("inlineCode",{parentName:"p"},"main()")," method.\nThen open your favourite browser and go to ",(0,i.mdx)("a",{parentName:"p",href:"http://localhost:8080"},"localhost:8080")))}c.isMDXComponent=!0}}]);
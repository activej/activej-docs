(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[8121],{77618:function(e,n,t){"use strict";var a=t(95318).default;n.Z=void 0;var o=a(t(67294)),r=a(t(39962)),i=function(e){var n=e.url,t=e.text,a=e.isInline,i=void 0===a||a,s=e.children,c=(0,r.default)().siteConfig;return o.default.createElement("a",{style:i?{}:{display:"block",marginBottom:"16px"},href:c.customFields.githubUrl+"/"+c.customFields.githubBranch+n,target:"_blank"},t||s)};n.Z=i},14304:function(e,n,t){"use strict";var a=t(95318).default,o=t(20862).default;n.Z=void 0;var r=o(t(67294)),i=a(t(21140));i.default.initialize({startOnLoad:!0});var s=function(e){var n=e.chart;return(0,r.useEffect)((function(){i.default.contentLoaded()}),[]),r.default.createElement("div",{className:"mermaid"},n)};n.Z=s},77815:function(e,n,t){"use strict";var a=t(95318).default;n.Z=void 0;a(t(67294));var o=a(t(39962)),r=function(e){var n=e.name,t=(0,o.default)().siteConfig;if(!n)throw new Error("Variable name is required");if(void 0===t.customFields[n])throw new Error("Variable "+n+" not exist");return t.customFields[n]};n.Z=r},65246:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return d},metadata:function(){return u},toc:function(){return m},default:function(){return g}});var a=t(22122),o=t(19756),r=(t(67294),t(3905)),i=t(77815),s=t(14304),c=t(77618),l=["components"],d={},u={unversionedId:"inject/examples",id:"inject/examples",isDocsHomePage:!1,title:"Examples",description:"To represent the main concepts and features of ActiveJ Inject, we've created an example that starts",source:"@site/docs/inject/examples.mdx",sourceDirName:"inject",slug:"/inject/examples",permalink:"/docs/inject/examples",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Benchmarks",permalink:"/docs/inject/benchmarks"},next:{title:"Overview",permalink:"/docs/codegen/overview"}},m=[{value:"Manual Bind",id:"manual-bind",children:[]},{value:"Bind Using ModuleBuilder",id:"bind-using-modulebuilder",children:[]},{value:"Bind Using <code>@Provides</code>",id:"bind-using-provides",children:[]},{value:"Bind Using Instance or Class Scan",id:"bind-using-instance-or-class-scan",children:[]},{value:"Automatic Bind Using <code>@Inject</code>",id:"automatic-bind-using-inject",children:[]},{value:"Using <code>@Named</code> annotation",id:"using-named-annotation",children:[]},{value:"Non-singleton Instances Using Scopes",id:"non-singleton-instances-using-scopes",children:[]},{value:"Transforming Binds",id:"transforming-binds",children:[]}],p={toc:m};function g(e){var n=e.components,t=(0,o.default)(e,l);return(0,r.mdx)("wrapper",(0,a.default)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"To represent the main concepts and features of ActiveJ Inject, we've created an example that starts\nwith low-level DI concepts and gradually covers more specific advanced features."),(0,r.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,r.mdx)("h5",{parentName:"div"},(0,r.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,r.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.mdx)("div",{parentName:"div",className:"admonition-content"},(0,r.mdx)("p",{parentName:"div"},"To run the examples, you need to clone ActiveJ from GitHub"),(0,r.mdx)("pre",{parentName:"div"},(0,r.mdx)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/activej/activej\n")),(0,r.mdx)("p",{parentName:"div"},"And import it as a Maven project. Check out tag ",(0,r.mdx)("strong",{parentName:"p"},(0,r.mdx)(i.Z,{name:"currentVersion",mdxType:"Variable"})),". Before running the examples, build the project.\nThese examples are located at ",(0,r.mdx)("strong",{parentName:"p"},"activej -> core-inject -> test")," and named ",(0,r.mdx)("strong",{parentName:"p"},"DiFollowUpTest")))),(0,r.mdx)(c.Z,{text:"This example on GitHub",url:"/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java",mdxType:"Githublink"}),(0,r.mdx)("p",null,"In this example we have a kitchen, where you can automatically create tasty cookies with wonderful ActiveJ Inject.\nBefore we get to cooking, note that there are several POJOs with default constructors marked with ",(0,r.mdx)("em",{parentName:"p"},"@Inject")," annotation: ",(0,r.mdx)("strong",{parentName:"p"},"Kitchen"),",\n",(0,r.mdx)("strong",{parentName:"p"},"Sugar"),", ",(0,r.mdx)("strong",{parentName:"p"},"Butter"),", ",(0,r.mdx)("strong",{parentName:"p"},"Flour"),", ",(0,r.mdx)("strong",{parentName:"p"},"Pastry")," and ",(0,r.mdx)("strong",{parentName:"p"},"Cookie"),"."),(0,r.mdx)("h3",{id:"manual-bind"},"Manual Bind"),(0,r.mdx)("p",null,"Let's bake a ",(0,r.mdx)("strong",{parentName:"p"},"Cookie")," using ActiveJ Inject in a hardcore way.\nFirst of all, we need to provide all the ingredients for the cookie: ",(0,r.mdx)("strong",{parentName:"p"},"Sugar"),", ",(0,r.mdx)("strong",{parentName:"p"},"Butter")," and\n",(0,r.mdx)("strong",{parentName:"p"},"Flour"),". Next, there is a recipe for ",(0,r.mdx)("strong",{parentName:"p"},"Pastry"),", which includes\ningredients (",(0,r.mdx)("strong",{parentName:"p"},"Sugar"),", ",(0,r.mdx)("strong",{parentName:"p"},"Butter")," and ",(0,r.mdx)("strong",{parentName:"p"},"Flour"),") we already know how to get. Finally, we can add a recipe of\nhow to bake a ",(0,r.mdx)("strong",{parentName:"p"},"Cookie"),"."),(0,r.mdx)(s.Z,{chart:"\ngraph BT\n    id1(Cookie) --\x3e id2(Pastry)\n    id2 --\x3e Butter\n    id2 --\x3e Flour\n    id2 --\x3e Sugar\n",mdxType:"Mermaid"}),(0,r.mdx)("p",null,"It's baking time now! Just create the ",(0,r.mdx)("strong",{parentName:"p"},"Injector")," with all these recipes and ask it for your ",(0,r.mdx)("strong",{parentName:"p"},"Cookie")," instance."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_1",url:"/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java",tag:"REGION_1"},'public void transformBindingSnippet() {\n  Module cookbook = ModuleBuilder.create()\n      .bind(Sugar.class).to(Sugar::new)\n      .bind(Butter.class).to(Butter::new)\n      .bind(Flour.class).to(() -> new Flour("GoodFlour", 100.0f))\n      .bind(Pastry.class).to(Pastry::new, Sugar.class, Butter.class, Flour.class)\n      .bind(Cookie.class).to(Cookie::new, Pastry.class)\n      .transform(0, (bindings, scope, key, binding) ->\n          binding.onInstance(x -> System.out.println(Instant.now() + " -> " + key)))\n      .build();\n\n  Injector injector = Injector.of(cookbook);\n  assertEquals("GoodFlour", injector.getInstance(Cookie.class).getPastry().getFlour().getName());\n}\n')),(0,r.mdx)("h3",{id:"bind-using-modulebuilder"},"Bind Using ModuleBuilder"),(0,r.mdx)("p",null,"This time we will bake a ",(0,r.mdx)("strong",{parentName:"p"},"Cookie")," with a simple DSL.\nWe will ",(0,r.mdx)("em",{parentName:"p"},"bundle")," our recipes for ",(0,r.mdx)("strong",{parentName:"p"},"Sugar"),", ",(0,r.mdx)("strong",{parentName:"p"},"Butter")," and ",(0,r.mdx)("strong",{parentName:"p"},"Flour")," in a 'cookbook' ",(0,r.mdx)("em",{parentName:"p"},"module"),"."),(0,r.mdx)("p",null,"Instead of creating bindings explicitly and storing them directly in a map, we just ",(0,r.mdx)("em",{parentName:"p"},"bind")," the recipes in our module and\nthen give it to the ",(0,r.mdx)("em",{parentName:"p"},"injector"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_2",url:"/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java",tag:"REGION_2"},'public void moduleBindSnippet() {\n  Module module = ModuleBuilder.create()\n      .bind(Sugar.class).to(() -> new Sugar("WhiteSugar", 10.0f))\n      .bind(Butter.class).to(() -> new Butter("PerfectButter", 20.0f))\n      .bind(Flour.class).to(() -> new Flour("GoodFlour", 100.0f))\n      .bind(Pastry.class).to(Pastry::new, Sugar.class, Butter.class, Flour.class)\n      .bind(Cookie.class).to(Cookie::new, Pastry.class)\n      .build();\n\n  Injector injector = Injector.of(module);\n  assertEquals("PerfectButter", injector.getInstance(Cookie.class).getPastry().getButter().getName());\n}\n')),(0,r.mdx)("h3",{id:"bind-using-provides"},"Bind Using ",(0,r.mdx)("inlineCode",{parentName:"h3"},"@Provides")),(0,r.mdx)("p",null,"It's time for real ",(0,r.mdx)("strong",{parentName:"p"},"Cookie")," business. Instead of making bindings explicitly, we will use the declarative DSL."),(0,r.mdx)("p",null,"Like in the previous example, we create a cookbook module, but this time all bindings for the ingredients will be created\nautomatically from the ",(0,r.mdx)("em",{parentName:"p"},"provider methods"),". These methods are marked with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"@Provides")," annotation:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_3",url:"/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java",tag:"REGION_3"},'public void provideAnnotationSnippet() {\n  Module cookbook = new AbstractModule() {\n    @Provides\n    Sugar sugar() { return new Sugar("WhiteSugar", 10.f); }\n\n    @Provides\n    Butter butter() { return new Butter("PerfectButter", 20.0f); }\n\n    @Provides\n    Flour flour() { return new Flour("GoodFlour", 100.0f); }\n\n    @Provides\n    Pastry pastry(Sugar sugar, Butter butter, Flour flour) {\n      return new Pastry(sugar, butter, flour);\n    }\n\n    @Provides\n    Cookie cookie(Pastry pastry) {\n      return new Cookie(pastry);\n    }\n  };\n\n  Injector injector = Injector.of(cookbook);\n  assertEquals("PerfectButter", injector.getInstance(Cookie.class).getPastry().getButter().getName());\n}\n')),(0,r.mdx)("h3",{id:"bind-using-instance-or-class-scan"},"Bind Using Instance or Class Scan"),(0,r.mdx)("p",null,"Sometimes it happens that you prepare an injection scheme, but this scheme is not a module. But there is a ",(0,r.mdx)("inlineCode",{parentName:"p"},"scan()"),"\nmethod which can help you to make a connection between DI entities and your scheme."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_4",url:"/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java",tag:"REGION_4"},'public void scanObjectSnippet() {\n  Module cookbook = ModuleBuilder.create()\n      .scan(new Object() {\n        @Provides\n        Sugar sugar() { return new Sugar("WhiteSugar", 10.f); }\n\n        @Provides\n        Butter butter() { return new Butter("PerfectButter", 20.0f); }\n\n        @Provides\n        Flour flour() { return new Flour("GoodFlour", 100.0f); }\n\n        @Provides\n        Pastry pastry(Sugar sugar, Butter butter, Flour flour) {\n          return new Pastry(sugar, butter, flour);\n        }\n\n        @Provides\n        Cookie cookie(Pastry pastry) {\n          return new Cookie(pastry);\n        }\n      })\n      .build();\n\n  Injector injector = Injector.of(cookbook);\n  assertEquals("PerfectButter", injector.getInstance(Cookie.class).getPastry().getButter().getName());\n}\n')),(0,r.mdx)("p",null,"If your class provides a scheme, you can use it easily:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_5",url:"/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java",tag:"REGION_5"},'public void scanClassSnippet() {\n  Module cookbook = ModuleBuilder.create().scan(InjectsDefinition.class).build();\n\n  Injector injector = Injector.of(cookbook);\n  assertEquals("PerfectButter", injector.getInstance(Cookie.class).getPastry().getButter().getName());\n}\n')),(0,r.mdx)("h3",{id:"automatic-bind-using-inject"},"Automatic Bind Using ",(0,r.mdx)("inlineCode",{parentName:"h3"},"@Inject")),(0,r.mdx)("p",null,"When we created our POJOs, we've marked their constructors with ",(0,r.mdx)("inlineCode",{parentName:"p"},"@Inject")," annotation:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_8",url:"/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java",tag:"REGION_8"},'static class Sugar {\n  private final String name;\n  private final float weight;\n\n  @Inject\n  public Sugar() {\n    this.name = "WhiteSugar";\n    this.weight = 10.f;\n  }\n')),(0,r.mdx)("p",null,"If a binding depends on a class that has no known binding, ",(0,r.mdx)("em",{parentName:"p"},"injector")," will try to automatically generate binding for it.\nIt will search for ",(0,r.mdx)("inlineCode",{parentName:"p"},"@Inject")," annotation on its constructors, static factory methods or the class itself (in this case\nthe default constructor is used) and use them as a factory in generated binding."),(0,r.mdx)("p",null,"Since nothing depends on the ",(0,r.mdx)("strong",{parentName:"p"},"Cookie")," binding, by default no bindings will be generated at all.\nHere we use a plain ",(0,r.mdx)("em",{parentName:"p"},"bind")," to tell the injector that we want this binding to be present.\nThus the whole tree of bindings it depends on will be generated:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_6",url:"/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java",tag:"REGION_6"},'public void injectAnnotationSnippet() {\n  Module cookbook = ModuleBuilder.create().bind(Cookie.class).build();\n\n  Injector injector = Injector.of(cookbook);\n  assertEquals("WhiteSugar", injector.getInstance(Cookie.class).getPastry().getSugar().getName());\n}\n')),(0,r.mdx)("h3",{id:"using-named-annotation"},"Using ",(0,r.mdx)("inlineCode",{parentName:"h3"},"@Named")," annotation"),(0,r.mdx)("p",null,"Let's be trendy and bake a sugar-free cookie. In order to do so, along with ",(0,r.mdx)("inlineCode",{parentName:"p"},"@Provides")," annotation, we will also use ",(0,r.mdx)(c.Z,{text:"@Named",url:"/core-inject/src/main/java/io/activej/inject/annotation/Named.java",mdxType:"Githublink"})," annotation and provide two different ",(0,r.mdx)("strong",{parentName:"p"},"Sugar"),", ",(0,r.mdx)("strong",{parentName:"p"},"Pastry")," and ",(0,r.mdx)("strong",{parentName:"p"},"Cookie")," factory functions. This approach allows using different instances of the same class. Now we can tell our ",(0,r.mdx)("em",{parentName:"p"},"injector"),", which of the cookies we need - a usual one or sugar-free."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_7",url:"/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java",tag:"REGION_7"},'public void namedAnnotationSnippet() {\n  Module cookbook = new AbstractModule() {\n    @Provides\n    @Named("zerosugar")\n    Sugar sugar1() { return new Sugar("SugarFree", 0.f); }\n\n    @Provides\n    @Named("normal")\n    Sugar sugar2() { return new Sugar("WhiteSugar", 10.f); }\n\n    @Provides\n    Butter butter() { return new Butter("PerfectButter", 20.f); }\n\n    @Provides\n    Flour flour() { return new Flour("GoodFlour", 100.f); }\n\n    @Provides\n    @Named("normal")\n    Pastry pastry1(@Named("normal") Sugar sugar, Butter butter, Flour flour) {\n      return new Pastry(sugar, butter, flour);\n    }\n\n    @Provides\n    @Named("zerosugar")\n    Pastry pastry2(@Named("zerosugar") Sugar sugar, Butter butter, Flour flour) {\n      return new Pastry(sugar, butter, flour);\n    }\n\n    @Provides\n    @Named("normal")\n    Cookie cookie1(@Named("normal") Pastry pastry) {\n      return new Cookie(pastry);\n    }\n\n    @Provides\n    @Named("zerosugar")\n    Cookie cookie2(@Named("zerosugar") Pastry pastry) { return new Cookie(pastry); }\n  };\n\n  Injector injector = Injector.of(cookbook);\n\n  float normalWeight = injector.getInstance(Key.ofName(Cookie.class, "normal"))\n      .getPastry().getSugar().getWeight();\n  float zerosugarWeight = injector.getInstance(Key.ofName(Cookie.class, "zerosugar"))\n      .getPastry().getSugar().getWeight();\n\n  assertEquals(10.f, normalWeight);\n  assertEquals(0.f, zerosugarWeight);\n}\n')),(0,r.mdx)("p",null,"You can also use ",(0,r.mdx)(c.Z,{text:"ModuleBuilder",url:"/core-inject/src/main/java/io/activej/inject/module/ModuleBuilder.java",mdxType:"Githublink"})),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_10",url:"/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java",tag:"REGION_10"},'public void moduleBuilderWithQualifiedBindsSnippet() {\n  Module cookbook = ModuleBuilder.create()\n      .bind(Key.of(Sugar.class, "zerosugar")).to(() -> new Sugar("SugarFree", 0.f))\n      .bind(Key.of(Sugar.class, "normal")).to(() -> new Sugar("WhiteSugar", 10.f))\n      .bind(Key.of(Pastry.class, "zerosugar")).to(Pastry::new, Key.of(Sugar.class).qualified("zerosugar"), Key.of(Butter.class), Key.of(Flour.class))\n      .bind(Key.of(Pastry.class, "normal")).to(Pastry::new, Key.of(Sugar.class).qualified("normal"), Key.of(Butter.class), Key.of(Flour.class))\n      .bind(Key.of(Cookie.class, "zerosugar")).to(Cookie::new, Key.of(Pastry.class).qualified("zerosugar"))\n      .bind(Key.of(Cookie.class, "normal")).to(Cookie::new, Key.of(Pastry.class).qualified("normal"))\n      .build();\n\n  Injector injector = Injector.of(cookbook);\n\n  float normalWeight = injector.getInstance(Key.of(Cookie.class, "normal"))\n      .getPastry().getSugar().getWeight();\n  float zerosugarWeight = injector.getInstance(Key.of(Cookie.class, "zerosugar"))\n      .getPastry().getSugar().getWeight();\n\n  assertEquals(10.f, normalWeight);\n  assertEquals(0.f, zerosugarWeight);\n}\n')),(0,r.mdx)("h3",{id:"non-singleton-instances-using-scopes"},"Non-singleton Instances Using Scopes"),(0,r.mdx)("p",null,"Our cookies turned out to be so tasty, that a lot of people want to try them. However, there is a\nproblem, ActiveJ Inject makes instances singleton by default. Yet, we can't sell the same one cookie to all our\ncustomers."),(0,r.mdx)("p",null,"Luckily, there is a solution: we can use a custom ",(0,r.mdx)(c.Z,{text:"@ScopeAnnotation",url:"/core-inject/src/main/java/io/activej/inject/annotation/ScopeAnnotation.java",mdxType:"Githublink"}),"\n",(0,r.mdx)("inlineCode",{parentName:"p"},"@OrderScope")," to create ",(0,r.mdx)("inlineCode",{parentName:"p"},"ORDER_SCOPE")," scope:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/core-inject/src/test/java/io/activej/inject/OrderScope.java tag=EXAMPLE",url:"/core-inject/src/test/java/io/activej/inject/OrderScope.java",tag:"EXAMPLE"},"@ScopeAnnotation(threadsafe = false)\n@Target({ElementType.METHOD})\n@Retention(RUNTIME)\npublic @interface OrderScope {\n}\n")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_9",url:"/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java",tag:"REGION_9"},"public static final Scope ORDER_SCOPE = Scope.of(OrderScope.class);\n")),(0,r.mdx)("p",null,"So our cookbook will look as follows:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_11",url:"/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java",tag:"REGION_11"},"Module cookbook = ModuleBuilder.create()\n    .bind(Kitchen.class).to(Kitchen::new)\n    .bind(Sugar.class).to(Sugar::new).in(OrderScope.class)\n    .bind(Butter.class).to(Butter::new).in(OrderScope.class)\n    .bind(Flour.class).to(Flour::new).in(OrderScope.class)\n    .bind(Pastry.class).to(Pastry::new, Sugar.class, Butter.class, Flour.class).in(OrderScope.class)\n    .bind(Cookie.class).to(Cookie::new, Pastry.class).in(OrderScope.class)\n    .build();\n")),(0,r.mdx)("p",null,"In this way, only kitchen will remain singleton:"),(0,r.mdx)(s.Z,{style:{margin:"0 auto"},chart:"\ngraph BT\n    subgraph Root Scope\n    Kitchen\n    subgraph N\n    subgraph Order Scope\n    Sugar--\x3eid1(Pastry)\n    Flour--\x3eid1\n    Butter--\x3eid1\n    id1--\x3eCookie\n    end\n    end\n    end\n",mdxType:"Mermaid"}),(0,r.mdx)("p",null,"We received 10 orders from our customers, so now we need 10 instances of cookies:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"First, we inject an instance of ",(0,r.mdx)("strong",{parentName:"li"},"Kitchen"),". Now this instance is stored in the root scope injector."),(0,r.mdx)("li",{parentName:"ul"},"Next, we create 10 subinjectors which enter ",(0,r.mdx)("inlineCode",{parentName:"li"},"ORDER_SCOPE"),"."),(0,r.mdx)("li",{parentName:"ul"},"Each subinjector creates only one instance of ",(0,r.mdx)("strong",{parentName:"li"},"Cookie")," and refers to the single ",(0,r.mdx)("strong",{parentName:"li"},"Kitchen")," instance of their parent root scope.")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_12",url:"/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java",tag:"REGION_12"},"Injector injector = Injector.of(cookbook);\nKitchen kitchen = injector.getInstance(Kitchen.class);\nSet<Cookie> cookies = new HashSet<>();\nfor (int i = 0; i < 10; ++i) {\n  Injector subinjector = injector.enterScope(ORDER_SCOPE);\n\n  assertSame(subinjector.getInstance(Kitchen.class), kitchen);\n  if (i > 0) assertFalse(cookies.contains(subinjector.getInstance(Cookie.class)));\n\n  cookies.add(subinjector.getInstance(Cookie.class));\n}\nassertEquals(10, cookies.size());\n")),(0,r.mdx)("h3",{id:"transforming-binds"},"Transforming Binds"),(0,r.mdx)("p",null,"You can configure the process of how your injector gets instances and transform this process. For example, you can\nsimply add some logging by overriding ",(0,r.mdx)("em",{parentName:"p"},"configure")," method:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java tag=REGION_13",url:"/core-inject/src/test/java/io/activej/inject/DIFollowUpTest.java",tag:"REGION_13"},'public void transformBindingSnippet() {\n  Module cookbook = ModuleBuilder.create()\n      .bind(Sugar.class).to(Sugar::new)\n      .bind(Butter.class).to(Butter::new)\n      .bind(Flour.class).to(() -> new Flour("GoodFlour", 100.0f))\n      .bind(Pastry.class).to(Pastry::new, Sugar.class, Butter.class, Flour.class)\n      .bind(Cookie.class).to(Cookie::new, Pastry.class)\n      .transform(0, (bindings, scope, key, binding) ->\n          binding.onInstance(x -> System.out.println(Instant.now() + " -> " + key)))\n      .build();\n\n  Injector injector = Injector.of(cookbook);\n  assertEquals("GoodFlour", injector.getInstance(Cookie.class).getPastry().getFlour().getName());\n}\n')),(0,r.mdx)("p",null,"Now you will receive an output which will represent the time when an instance was created and the instance itself."))}g.isMDXComponent=!0},11748:function(e,n,t){var a={"./locale":89234,"./locale.js":89234};function o(e){var n=r(e);return t(n)}function r(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}o.keys=function(){return Object.keys(a)},o.resolve=r,e.exports=o,o.id=11748}}]);
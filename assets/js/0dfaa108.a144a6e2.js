(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[2562],{77618:function(e,n,a){"use strict";var t=a(95318).default;n.Z=void 0;var r=t(a(67294)),i=t(a(39962)),o=function(e){var n=e.url,a=e.text,t=e.isInline,o=void 0===t||t,l=e.children,c=(0,i.default)().siteConfig;return r.default.createElement("a",{style:o?{}:{display:"block",marginBottom:"16px"},href:c.customFields.githubUrl+"/"+c.customFields.githubBranch+n,target:"_blank"},a||l)};n.Z=o},14304:function(e,n,a){"use strict";var t=a(95318).default,r=a(20862).default;n.Z=void 0;var i=r(a(67294)),o=t(a(21140));o.default.initialize({startOnLoad:!0});var l=function(e){var n=e.chart;return(0,i.useEffect)((function(){o.default.contentLoaded()}),[]),i.default.createElement("div",{className:"mermaid"},n)};n.Z=l},9871:function(e,n,a){"use strict";a.r(n),a.d(n,{frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p},default:function(){return u}});var t=a(22122),r=a(19756),i=(a(67294),a(3905)),o=a(77618),l=a(14304),c=["components"],s={title:"ActiveJ Inject Advanced | Lightning-fast and ultimately powerful Dependency Injection Java library",description:"Extremely lightweight DI with powerful tools - support of nested scopes, singletons and transient bindings, modules, multi-threaded and single-threaded injectors",keywords:["di","dependency injection","guice alternative","spring di","spring alternative","di benchmarks","java","java di","java dependency injection","java framework"]},d={unversionedId:"inject/advanced",id:"inject/advanced",isDocsHomePage:!1,title:"Advanced",description:"Extremely lightweight DI with powerful tools - support of nested scopes, singletons and transient bindings, modules, multi-threaded and single-threaded injectors",source:"@site/docs/inject/advanced.mdx",sourceDirName:"inject",slug:"/inject/advanced",permalink:"/inject/advanced",version:"current",frontMatter:{title:"ActiveJ Inject Advanced | Lightning-fast and ultimately powerful Dependency Injection Java library",description:"Extremely lightweight DI with powerful tools - support of nested scopes, singletons and transient bindings, modules, multi-threaded and single-threaded injectors",keywords:["di","dependency injection","guice alternative","spring di","spring alternative","di benchmarks","java","java di","java dependency injection","java framework"]},sidebar:"docs",previous:{title:"Basics",permalink:"/inject/basic"},next:{title:"Benchmarks",permalink:"/inject/benchmarks"}},p=[{value:"DI Multibinder",id:"di-multibinder",children:[]},{value:"Instance Injector",id:"instance-injector",children:[]},{value:"Binding Generators",id:"binding-generators",children:[]},{value:"Transient Bindings",id:"transient-bindings",children:[]},{value:"ActiveJ Specializer optimization",id:"activej-specializer-optimization",children:[]},{value:"Instance Provider",id:"instance-provider",children:[]},{value:"Inspecting created dependency graph",id:"inspecting-created-dependency-graph",children:[]},{value:"Optional Generator Module",id:"optional-generator-module",children:[]}],m={toc:p};function u(e){var n=e.components,a=(0,r.default)(e,c);return(0,i.mdx)("wrapper",(0,t.default)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"In the ",(0,i.mdx)("a",{parentName:"p",href:"basic"},"previous part")," we explored some common principles of Dependency Injection concepts and\nActiveJ Inject features. In this part, we will proceed with more advanced and complex ActiveJ Inject use cases."),(0,i.mdx)("p",null,"You can find full example sources on ",(0,i.mdx)(o.Z,{text:"GitHub",url:"/examples/core/inject-2",mdxType:"Githublink"})),(0,i.mdx)("h2",{id:"di-multibinder"},"DI Multibinder"),(0,i.mdx)(o.Z,{text:"Multibinder",url:"/core-inject/src/main/java/io/activej/inject/binding/Multibinder.java",mdxType:"Githublink"})," resolves binding conflicts if there are two or more bindings for a single key. In the following example, we will create an HTTP Server which consists of two ",(0,i.mdx)(o.Z,{text:"AbstractModule",url:"/core-inject/src/main/java/io/activej/inject/module/AbstractModule.java",mdxType:"Githublink"}),"s. Both modules include 2 conflicting keys. In the example we'll use different ways to provide multibinding.",(0,i.mdx)("p",null,"In the first servlet ",(0,i.mdx)("strong",{parentName:"p"},"AbstractModule"),", we provide multibind for the map of ",(0,i.mdx)("strong",{parentName:"p"},"String")," and ",(0,i.mdx)(o.Z,{text:"AsyncServlet",url:"/core-http/src/main/java/io/activej/http/AsyncServlet.java",mdxType:"Githublink"})," by overriding ",(0,i.mdx)("inlineCode",{parentName:"p"},"configure()")," method. We use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"multibindToMap")," method which returns a binding of the map for the provided\nconflicting binding maps:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultibinderExample.java tag=REGION_1",url:"/examples/core/inject-2/src/main/java/MultibinderExample.java",tag:"REGION_1"},'static class ServletMapsModule extends AbstractModule {\n  @Override\n  protected void configure() {\n    multibindToMap(String.class, AsyncServlet.class);\n  }\n\n  @Provides\n  public Map<String, AsyncServlet> firstPage() {\n    return singletonMap("/first",\n        request -> HttpResponse.ok200().withPlainText("Hello from first page!"));\n  }\n\n  @Provides\n  public Map<String, AsyncServlet> lastPage() {\n    return singletonMap("/last",\n        request -> HttpResponse.ok200().withPlainText("Hello from last page!"));\n  }\n\n  @ProvidesIntoSet\n  AsyncServlet primary(Map<String, AsyncServlet> initializers) {\n    RoutingServlet routingServlet = RoutingServlet.create();\n    initializers.forEach(routingServlet::map);\n    return routingServlet;\n  }\n}\n')),(0,i.mdx)("p",null,"Note, that ",(0,i.mdx)("em",{parentName:"p"},"primary")," servlet is marked with ",(0,i.mdx)(o.Z,{text:"@ProvidesIntoSet",url:"/core-inject/src/main/java/io/activej/inject/annotation/ProvidesIntoSet.java",mdxType:"Githublink"})," annotation. We will use this later."),(0,i.mdx)("p",null,"In the second servlet module we'll automatically set up multibinding with a built-in ",(0,i.mdx)("inlineCode",{parentName:"p"},"@ProvidesIntoSet")," annotation. This annotation provides results as a singleton set, which is then provided to our ",(0,i.mdx)("em",{parentName:"p"},"primary")," ",(0,i.mdx)("strong",{parentName:"p"},"AsyncServlet"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultibinderExample.java tag=REGION_2",url:"/examples/core/inject-2/src/main/java/MultibinderExample.java",tag:"REGION_2"},'static class ServletInitializersModule extends AbstractModule {\n  @ProvidesIntoSet\n  public Consumer<RoutingServlet> firstPage() {\n    return routingServlet ->\n        routingServlet.map("/first",\n            request -> HttpResponse.ok200().withPlainText("Hello from first page!"));\n  }\n\n  @ProvidesIntoSet\n  public Consumer<RoutingServlet> lastPage() {\n    return routingServlet ->\n        routingServlet.map("/last",\n            request -> HttpResponse.ok200().withPlainText("Hello from last page!"));\n  }\n\n  @ProvidesIntoSet\n  AsyncServlet primary(Set<Consumer<RoutingServlet>> initializers) {\n    RoutingServlet routingServlet = RoutingServlet.create();\n    initializers.forEach(initializer -> initializer.accept(routingServlet));\n    return routingServlet;\n  }\n}\n')),(0,i.mdx)("p",null,"Finally, we can pull all the modules together. Remember we marked the ",(0,i.mdx)("em",{parentName:"p"},"primary")," servlets with ",(0,i.mdx)("inlineCode",{parentName:"p"},"@ProvidesIntoSet"),"\nannotation? Now we can simply combine and then compile them using ",(0,i.mdx)(o.Z,{text:"Injector",url:"/core-inject/src/main/java/io/activej/inject/Injector.java",mdxType:"Githublink"}),".of()"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultibinderExample.java tag=REGION_4",url:"/examples/core/inject-2/src/main/java/MultibinderExample.java",tag:"REGION_4"},"public static void main(String[] args) {\n  Injector injector = Injector.of(new ServletMapsModule(), new ServletInitializersModule());\n\n  String s = injector.getInstance(new Key<Set<AsyncServlet>>() {}).toString();\n  System.out.println(s);\n}\n")),(0,i.mdx)("p",null,"You can find example sources on ",(0,i.mdx)(o.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/MultibinderExample.java",mdxType:"Githublink"})),(0,i.mdx)("h2",{id:"instance-injector"},"Instance Injector"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},(0,i.mdx)(o.Z,{text:"InstanceInjector",url:"/core-inject/src/main/java/io/activej/inject/InstanceInjector.java",mdxType:"Githublink"}))," can inject instances into ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Inject")," fields and methods of some already existing objects.\nConsider this simple example:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/InstanceInjectorExample.java tag=REGION_1",url:"/examples/core/inject-2/src/main/java/InstanceInjectorExample.java",tag:"REGION_1"},'@Inject\nString message;\n\n@Provides\nString message() {\n  return "Hello, world!";\n}\n\n@Override\nprotected void run() {\n  System.out.println(message);\n}\n\npublic static void main(String[] args) throws Exception {\n  Launcher launcher = new InstanceInjectorExample();\n  launcher.launch(args);\n}\n')),(0,i.mdx)("p",null,"The question that might bother you - how does the ",(0,i.mdx)(o.Z,{text:"Launcher",url:"/launcher/src/main/java/io/activej/launcher/Launcher.java",mdxType:"Githublink"})," actually know that the message variable contains ",(0,i.mdx)("inlineCode",{parentName:"p"},'"Hello, world!"')," string, to display it in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"run()")," method?"),(0,i.mdx)("p",null,"Here during the internal work of DI, the ",(0,i.mdx)("strong",{parentName:"p"},"InstanceInjector")," in fact gives launcher a hand:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/InstanceInjectorExample.java tag=REGION_2",url:"/examples/core/inject-2/src/main/java/InstanceInjectorExample.java",tag:"REGION_2"},"private void postInjectInstances(String[] args) {\n  Injector injector = this.createInjector(args);\n  InstanceInjector<Launcher> instanceInjector = injector.getInstanceInjector(Launcher.class);\n  instanceInjector.injectInto(this);\n}\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"createInjector")," produces ",(0,i.mdx)("em",{parentName:"li"},"injector")," with the given arguments."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"instanceInjector")," gets all the required data from the ",(0,i.mdx)("em",{parentName:"li"},"injector"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"injectInto")," injects the data into our empty instances.")),(0,i.mdx)("p",null,"You can find example sources on ",(0,i.mdx)(o.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/InstanceInjectorExample.java",mdxType:"Githublink"})),(0,i.mdx)("h2",{id:"binding-generators"},"Binding Generators"),(0,i.mdx)("p",null,"Let's consider Cookies example form the ",(0,i.mdx)("a",{parentName:"p",href:"/inject/examples"},"previous part"),". This time we have the same POJO ingredients, but now our cookie is a generic ",(0,i.mdx)("strong",{parentName:"p"},"Cookie","<","T>")," and has a field ",(0,i.mdx)("strong",{parentName:"p"},"Optional","<","T> pastry"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/BindingGeneratorExample.java tag=REGION_1",url:"/examples/core/inject-2/src/main/java/BindingGeneratorExample.java",tag:"REGION_1"},"static class Cookie<T> {\n  private final Optional<T> pastry;\n\n  @Inject\n  Cookie(Optional<T> pastry) {\n    this.pastry = pastry;\n  }\n\n  public Optional<T> getPastry() {\n    return pastry;\n  }\n}\n")),(0,i.mdx)("p",null,"Next, we create an ",(0,i.mdx)("strong",{parentName:"p"},"AbstractModule")," ",(0,i.mdx)("em",{parentName:"p"},"cookbook")," and override its ",(0,i.mdx)("inlineCode",{parentName:"p"},"configure()")," method:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/BindingGeneratorExample.java tag=REGION_2",url:"/examples/core/inject-2/src/main/java/BindingGeneratorExample.java",tag:"REGION_2"},"AbstractModule cookbook = new AbstractModule() {\n  @Override\n  protected void configure() {\n    // note (1)\n    generate(Optional.class, (bindings, scope, key) -> {\n      Binding<Object> binding = bindings.get(key.getTypeParameter(0));\n      return binding != null ?\n          binding.mapInstance(Optional::of) :\n          Binding.toInstance(Optional.empty());\n    });\n\n    bind(new Key<Cookie<Pastry>>() {});\n  }\n")),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"generate()")," adds a ",(0,i.mdx)(o.Z,{text:"BindingGenerator",url:"/core-inject/src/main/java/io/activej/inject/binding/BindingGenerator.java",mdxType:"Githublink"}),"\nfor a given class to this module, in this case it is an ",(0,i.mdx)("strong",{parentName:"p"},"Optional"),".\n",(0,i.mdx)("strong",{parentName:"p"},"BindingGenerator")," tries to generate a missing dependency binding when ",(0,i.mdx)("strong",{parentName:"p"},"Injector")," compiles the final binding graph\ntrie.\nYou can substitute ",(0,i.mdx)("inlineCode",{parentName:"p"},"generate()")," with the following code:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"@Provides\n<T> Optional<T> pastry(@io.activej.di.annotation.Optional T instance) {\n    return Optional.ofNullable(instance);\n")),(0,i.mdx)("p",null,"Now you can create ",(0,i.mdx)("em",{parentName:"p"},"cookbook")," ",(0,i.mdx)("em",{parentName:"p"},"injector")," and get an instance of ",(0,i.mdx)("strong",{parentName:"p"},"Cookie","<","Pastry>"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/BindingGeneratorExample.java tag=REGION_3",url:"/examples/core/inject-2/src/main/java/BindingGeneratorExample.java",tag:"REGION_3"},"Injector injector = Injector.of(cookbook);\nSystem.out.println(injector.getInstance(new Key<Cookie<Pastry>>() {}).getPastry().orElseThrow(AssertionError::new).getButter().getName());\n")),(0,i.mdx)("p",null,"You can find example sources on ",(0,i.mdx)(o.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/BindingGeneratorExample.java",mdxType:"Githublink"})),(0,i.mdx)("h2",{id:"transient-bindings"},"Transient Bindings"),(0,i.mdx)("p",null,"In case you need a non-singleton object so that each binding receives its own instance, you should use ",(0,i.mdx)("strong",{parentName:"p"},"Transient\nBindings"),". Simply add a ",(0,i.mdx)(o.Z,{text:"@Transient",url:"/core-inject/src/main/java/io/activej/inject/annotation/Transient.java",mdxType:"Githublink"})," annotation:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/TransientBindingExample.java tag=REGION_1",url:"/examples/core/inject-2/src/main/java/TransientBindingExample.java",tag:"REGION_1"},"AbstractModule cookbook = new AbstractModule() {\n  @Provides\n  @Transient\n  Integer giveMe() {\n    return random.nextInt(1000);\n  }\n};\n")),(0,i.mdx)("p",null,"After creating an ",(0,i.mdx)("strong",{parentName:"p"},"Injector")," of the ",(0,i.mdx)("em",{parentName:"p"},"cookbook"),", each time you use ",(0,i.mdx)("inlineCode",{parentName:"p"},"injector.getInstance"),", you'll get a new\nnon-singleton ",(0,i.mdx)("strong",{parentName:"p"},"Integer")," instance:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/TransientBindingExample.java tag=REGION_2",url:"/examples/core/inject-2/src/main/java/TransientBindingExample.java",tag:"REGION_2"},'Injector injector = Injector.of(cookbook);\nInteger someInt = injector.getInstance(Integer.class);\nInteger otherInt = injector.getInstance(Integer.class);\nSystem.out.println("First : " + someInt + ", second  : " + otherInt);\n')),(0,i.mdx)("p",null,"The output will illustrate that the created instances are different and will look something like this:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"First : 699, second one : 130\n")),(0,i.mdx)("p",null,"You can find example sources on ",(0,i.mdx)(o.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/TransientBindingExample.java",mdxType:"Githublink"})),(0,i.mdx)("h2",{id:"activej-specializer-optimization"},"ActiveJ Specializer optimization"),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"https://specializer.activej.io"},(0,i.mdx)("strong",{parentName:"a"},"ActiveJ Specializer"))," is a library that optimizes code for JVM. You can simply combine\nit with ActiveJ Inject and speed up your code by ",(0,i.mdx)(o.Z,{text:"up to 30%",url:"/benchmarks/inject/src/main/java/io/activej/inject/ActiveJDirectScopebindBenchmark.java",mdxType:"Githublink"}),"\nIn order to set up ActiveJ Specializer, simply use ",(0,i.mdx)("inlineCode",{parentName:"p"},"Injector.useSpecializer()")," before ",(0,i.mdx)("strong",{parentName:"p"},"Injector"),"\ninstantiation.\nActiveJ Inject compiles bindings in runtime into a highly efficient representation. In conjunction with ActiveJ Specializer\nthe bindings can be turned into bytecode that will be as efficient as a manually written code. In this way you get\nthe best performance in real-life projects without maintaining hard to support manual code."),(0,i.mdx)("h2",{id:"instance-provider"},"Instance Provider"),(0,i.mdx)(o.Z,{text:"InstanceProvider",url:"/core-inject/src/main/java/io/activej/inject/InstanceProvider.java",mdxType:"Githublink"})," is a version of `Injector.getInstance()` with a baked-in key. It can be fluently requested by provider methods.",(0,i.mdx)("p",null,"In the ",(0,i.mdx)("strong",{parentName:"p"},"AbstractModule")," we explicitly add ",(0,i.mdx)("strong",{parentName:"p"},"InstanceProvider")," binding for ",(0,i.mdx)("strong",{parentName:"p"},"Integer")," using ",(0,i.mdx)("inlineCode",{parentName:"p"},"bindInstanceProvider")," helper method and provide ",(0,i.mdx)("strong",{parentName:"p"},"Integer")," factory function:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/InstanceProviderExample.java tag=REGION_1",url:"/examples/core/inject-2/src/main/java/InstanceProviderExample.java",tag:"REGION_1"},"AbstractModule cookbook = new AbstractModule() {\n  @Override\n  protected void configure() {\n    bindInstanceProvider(Integer.class);\n  }\n\n  @Provides\n  Integer giveMe() {\n    return random.nextInt(1000);\n  }\n};\n")),(0,i.mdx)("p",null,"After creating an ",(0,i.mdx)("strong",{parentName:"p"},"Injector")," of the ",(0,i.mdx)("em",{parentName:"p"},"cookbook"),", we get instance of the ",(0,i.mdx)("strong",{parentName:"p"},"Key","<","InstanceProvider","<","Integer",">",">"),".\nNow simply use ",(0,i.mdx)("inlineCode",{parentName:"p"},"provider.get()")," to get a lazy ",(0,i.mdx)("strong",{parentName:"p"},"Integer")," instance."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/InstanceProviderExample.java tag=REGION_2",url:"/examples/core/inject-2/src/main/java/InstanceProviderExample.java",tag:"REGION_2"},"Injector injector = Injector.of(cookbook);\nInstanceProvider<Integer> provider = injector.getInstance(new Key<InstanceProvider<Integer>>() {});\n// lazy value get.\nInteger someInt = provider.get();\nSystem.out.println(someInt);\n")),(0,i.mdx)("p",null,"Unlike the previous example, If you call ",(0,i.mdx)("inlineCode",{parentName:"p"},"provide.get()")," several times, you'll receive the same value."),(0,i.mdx)("p",null,"You can find example sources on ",(0,i.mdx)(o.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/InstanceProviderExample.java",mdxType:"Githublink"})),(0,i.mdx)("h2",{id:"inspecting-created-dependency-graph"},"Inspecting created dependency graph"),(0,i.mdx)("p",null,"ActiveJ Inject provides efficient DSL for inspecting created instances, scopes and dependency graph visualization.\nIn this Cookie example we, as usual, create ",(0,i.mdx)("strong",{parentName:"p"},"Sugar"),", ",(0,i.mdx)("strong",{parentName:"p"},"Butter"),", ",(0,i.mdx)("strong",{parentName:"p"},"Flour"),", ",(0,i.mdx)("strong",{parentName:"p"},"Pastry")," and ",(0,i.mdx)("strong",{parentName:"p"},"Cookie")," POJOs, ",(0,i.mdx)("em",{parentName:"p"},"cookbook"),"\n",(0,i.mdx)("strong",{parentName:"p"},"AbstractModule")," with two scopes (parent scope for ",(0,i.mdx)("strong",{parentName:"p"},"Cookie")," and ",(0,i.mdx)(o.Z,{text:"@OrderScope",url:"/examples/core/inject-2/src/main/java/OrderScope.java",mdxType:"Githublink"}),"\nfor ingredients) and cookbook ",(0,i.mdx)("em",{parentName:"p"},"injector"),"."),(0,i.mdx)("p",null,"First, let's overview three ",(0,i.mdx)("strong",{parentName:"p"},"Injector")," methods: ",(0,i.mdx)("inlineCode",{parentName:"p"},"peekInstance"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"hasInstance")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"getInstance"),". They allow to inspect\ncreated instances:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/DiDependencyGraphExplore.java tag=REGION_1",url:"/examples/core/inject-2/src/main/java/DiDependencyGraphExplore.java",tag:"REGION_1"},'Cookie cookie1 = injector.peekInstance(Cookie.class);\nSystem.out.println("Instance is present in injector before \'get\' : " + injector.hasInstance(Cookie.class));\nSystem.out.println("Instance before get : " + cookie1);\n\nCookie cookie = injector.getInstance(Cookie.class);\n\nCookie cookie2 = injector.peekInstance(Cookie.class);\nSystem.out.println("Instance is present in injector after \'get\' : " + injector.hasInstance(Cookie.class));\nSystem.out.println("Instance after get : " + cookie2);\nSystem.out.println();    /// created instance check.\nSystem.out.println("Instances are same : " + cookie.equals(cookie2));\n')),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"peekInstance")," - returns an instance ",(0,i.mdx)("strong",{parentName:"li"},"only")," if it was already created by ",(0,i.mdx)("inlineCode",{parentName:"li"},"getInstance")," call before"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"hasInstance")," - checks if an instance of the provided ",(0,i.mdx)("em",{parentName:"li"},"key")," was created by ",(0,i.mdx)("inlineCode",{parentName:"li"},"getInstance")," call before"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"getInstance")," - returns an instance of the provided ",(0,i.mdx)("em",{parentName:"li"},"key"))),(0,i.mdx)("p",null,"Next, we'll explore tools for scopes inspecting:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/DiDependencyGraphExplore.java tag=REGION_2",url:"/examples/core/inject-2/src/main/java/DiDependencyGraphExplore.java",tag:"REGION_2"},'final Scope ORDER_SCOPE = Scope.of(OrderScope.class);\n\nSystem.out.println("Parent injector, before entering scope : " + injector);\n\nInjector subInjector = injector.enterScope(ORDER_SCOPE);\nSystem.out.println("Parent injector, after entering scope : " + subInjector.getParent());\nSystem.out.println("Parent injector is \'injector\' : " + injector.equals(subInjector.getParent()));\n')),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/DiDependencyGraphExplore.java tag=REGION_3",url:"/examples/core/inject-2/src/main/java/DiDependencyGraphExplore.java",tag:"REGION_3"},'System.out.println("Pastry binding check : " + subInjector.getBinding(Pastry.class));\n')),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"getParent")," - returns parent scope of the current scope"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"getBinding")," - returns dependencies of provided binding"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"getBindings")," - returns dependencies of the provided scope (including ",(0,i.mdx)("strong",{parentName:"li"},"Injector"),")")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/DiDependencyGraphExplore.java tag=REGION_4",url:"/examples/core/inject-2/src/main/java/DiDependencyGraphExplore.java",tag:"REGION_4"},"Utils.printGraphVizGraph(subInjector.getBindingsTrie());\n")),(0,i.mdx)("p",null,"You'll receive the following output:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},'digraph {\n    rankdir=BT;\n    "()->DiDependencyGraphExplore$Flour" [label="DiDependencyGraphExplore$Flour"];\n    "()->DiDependencyGraphExplore$Sugar" [label="DiDependencyGraphExplore$Sugar"];\n    "()->DiDependencyGraphExplore$Butter" [label="DiDependencyGraphExplore$Butter"];\n    "()->DiDependencyGraphExplore$Cookie" [label="DiDependencyGraphExplore$Cookie"];\n    "()->io.activej.di.core.Injector" [label="Injector"];\n    "()->DiDependencyGraphExplore$Pastry" [label="DiDependencyGraphExplore$Pastry"];\n\n    { rank=same; "()->DiDependencyGraphExplore$Flour" "()->DiDependencyGraphExplore$Sugar" "()->DiDependencyGraphExplore$Butter" "()->io.activej.di.core.Injector" }\n\n    "()->DiDependencyGraphExplore$Cookie" -> "()->DiDependencyGraphExplore$Pastry";\n    "()->DiDependencyGraphExplore$Pastry" -> "()->DiDependencyGraphExplore$Butter";\n    "()->DiDependencyGraphExplore$Pastry" -> "()->DiDependencyGraphExplore$Flour";\n    "()->DiDependencyGraphExplore$Pastry" -> "()->DiDependencyGraphExplore$Sugar";\n}\n')),(0,i.mdx)("p",null,"Which can be transformed into the following graph:"),(0,i.mdx)(l.Z,{chart:"\ngraph BT\n    DiDependencyGraphExplore$Cookie --\x3e id1(DiDependencyGraphExplore$Pastry)\n    id1 --\x3e DiDependencyGraphExplore$Flour\n    id1 --\x3e DiDependencyGraphExplore$Sugar\n    id1 --\x3e DiDependencyGraphExplore$Butter\n    Injector\n",mdxType:"Mermaid"}),(0,i.mdx)("p",null,"You can find example sources on ",(0,i.mdx)(o.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/DiDependencyGraphExplore.java",mdxType:"Githublink"})),(0,i.mdx)("h2",{id:"optional-generator-module"},"Optional Generator Module"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},(0,i.mdx)(o.Z,{text:"OptionalGeneratorModule",url:"/core-inject/src/main/java/io/activej/inject/module/OptionalGeneratorModule.java",mdxType:"Githublink"}))," works similarly to the previous generator module with the difference that ",(0,i.mdx)("strong",{parentName:"p"},"OptionalGeneratorModule")," is responsible for creating ",(0,i.mdx)("strong",{parentName:"p"},"Optional")," objects."),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"In the next example we will need an instance of ",(0,i.mdx)("inlineCode",{parentName:"li"},"Optional<String>"),"."),(0,i.mdx)("li",{parentName:"ul"},"The recipe for creation is placed inside the ",(0,i.mdx)("em",{parentName:"li"},"module"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"install()")," establishes ",(0,i.mdx)("strong",{parentName:"li"},"OptionalGeneratorModule")," for the further automatic creation of ",(0,i.mdx)("strong",{parentName:"li"},"Optional")," object."),(0,i.mdx)("li",{parentName:"ul"},"Then we just ",(0,i.mdx)("em",{parentName:"li"},"bind")," the ",(0,i.mdx)("em",{parentName:"li"},"String")," recipe and in the next line specify the binding to construct an instance\nfor key ",(0,i.mdx)("inlineCode",{parentName:"li"},"Optional<String>"),"."),(0,i.mdx)("li",{parentName:"ul"},"Eventually, we just create an injector of ",(0,i.mdx)("inlineCode",{parentName:"li"},"module"),", ask it to get the instance of ",(0,i.mdx)("inlineCode",{parentName:"li"},"Optional<String>"),"\nand receive ",(0,i.mdx)("inlineCode",{parentName:"li"},'"Hello, World"'),".")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/OptionalGeneratorModuleExample.java tag=REGION_1",url:"/examples/core/inject-2/src/main/java/OptionalGeneratorModuleExample.java",tag:"REGION_1"},'public class OptionalGeneratorModuleExample {\n  public static void main(String[] args) {\n    Injector injector = Injector.of(ModuleBuilder.create()\n        .install(OptionalGeneratorModule.create())\n        .bind(String.class).toInstance("Hello, World")\n        .bind(new Key<Optional<String>>() {})\n        .build());\n    Optional<String> instance = injector.getInstance(new Key<Optional<String>>() {});\n    System.out.println(instance);\n  }\n}\n')),(0,i.mdx)("p",null,"You can find example sources on ",(0,i.mdx)(o.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/OptionalGeneratorModuleExample.java",mdxType:"Githublink"})))}u.isMDXComponent=!0},11748:function(e,n,a){var t={"./locale":89234,"./locale.js":89234};function r(e){var n=i(e);return a(n)}function i(e){if(!a.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}r.keys=function(){return Object.keys(t)},r.resolve=i,e.exports=r,r.id=11748}}]);
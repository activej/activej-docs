(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[1937],{3905:function(e,n,t){"use strict";t.r(n),t.d(n,{MDXContext:function(){return d},MDXProvider:function(){return p},mdx:function(){return g},useMDXComponents:function(){return u},withMDXComponents:function(){return s}});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=a.createContext({}),s=function(e){return function(n){var t=u(n.components);return a.createElement(e,r({},n,{components:t}))}},u=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(d.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},j=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=u(t),p=i,j=s["".concat(l,".").concat(p)]||s[p]||m[p]||r;return t?a.createElement(j,c(c({ref:n},d),{},{components:t})):a.createElement(j,c({ref:n},d))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=j;var c={};for(var o in n)hasOwnProperty.call(n,o)&&(c[o]=n[o]);c.originalType=e,c.mdxType="string"==typeof e?e:i,l[1]=c;for(var d=2;d<r;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}j.displayName="MDXCreateElement"},77618:function(e,n,t){"use strict";var a=t(95318).default;n.Z=void 0;var i=a(t(67294)),r=a(t(39962)),l=function(e){var n=e.url,t=e.text,a=e.isInline,l=void 0===a||a,c=e.children,o=(0,r.default)().siteConfig;return i.default.createElement("a",{style:l?{}:{display:"block",marginBottom:"16px"},href:o.customFields.githubUrl+"/"+o.customFields.githubBranch+n,target:"_blank"},t||c)};n.Z=l},59658:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return d},toc:function(){return s},default:function(){return p}});var a=t(22122),i=t(19756),r=(t(67294),t(3905)),l=t(77618),c=["components"],o={},d={unversionedId:"inject/injecting-instances",id:"inject/injecting-instances",isDocsHomePage:!1,title:"Injecting instances",description:"In this tutorial we will inject instances into classes. We will use 2 approaches:",source:"@site/docs/inject/injecting-instances.mdx",sourceDirName:"inject",slug:"/inject/injecting-instances",permalink:"/inject/injecting-instances",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Quick Start",permalink:"/inject/quick-start"},next:{title:"Class scanning",permalink:"/inject/class-scanning"}},s=[{value:"Modules",id:"modules",children:[]},{value:"Using an <code>InstanceInjector</code>",id:"using-an-instanceinjector",children:[]},{value:"Adding class to bindings graph",id:"adding-class-to-bindings-graph",children:[]}],u={toc:s};function p(e){var n=e.components,t=(0,i.default)(e,c);return(0,r.mdx)("wrapper",(0,a.default)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"In this tutorial we will inject instances into classes. We will use 2 approaches: "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Using an ",(0,r.mdx)(l.Z,{url:"/core-inject/src/main/java/io/activej/inject/InstanceInjector.java",mdxType:"Githublink"},(0,r.mdx)("inlineCode",{parentName:"li"},"InstanceInjector"))),(0,r.mdx)("li",{parentName:"ul"},"Adding class that will have its fields injected to the bindings graph")),(0,r.mdx)("h2",{id:"modules"},"Modules"),(0,r.mdx)("p",null,"We will define two independent modules: one will provide ",(0,r.mdx)("inlineCode",{parentName:"p"},"String")," message, the other one will provide ",(0,r.mdx)("inlineCode",{parentName:"p"},"int")," id."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'public class MessageModule extends AbstractModule {\n    @Provides\n    String message() {\n        return "hello";\n    }\n}\n')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public class IdModule extends AbstractModule {\n    @Provides\n    int id() {\n        return 123;\n    }\n}\n")),(0,r.mdx)("h2",{id:"using-an-instanceinjector"},"Using an ",(0,r.mdx)("inlineCode",{parentName:"h2"},"InstanceInjector")),(0,r.mdx)("p",null,"Here is the class that needs to have its fields injected."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public class Injected {\n    @Inject\n    String value;\n\n    @Inject\n    int id;\n}\n")),(0,r.mdx)("p",null,"We need to create an ",(0,r.mdx)("inlineCode",{parentName:"p"},"Injector")," and pass both ",(0,r.mdx)("inlineCode",{parentName:"p"},"MessageModule")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"IdModule")," as parameters. "),(0,r.mdx)("p",null,"We also need to add a binding for an instance injector. For that we will use a ",(0,r.mdx)("inlineCode",{parentName:"p"},"ModuleBuilder")," to manually build the third module whose sole purpose will be binding an instance injector."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"Injector injector = Injector.of(\n        new MessageModule(),\n        new IdModule(),\n        ModuleBuilder.create()\n                .bindInstanceInjector(Injected.class)\n                .build());\n")),(0,r.mdx)("p",null,"Finally, we need to obtain ",(0,r.mdx)("inlineCode",{parentName:"p"},"InstanceInjector")," from the Injector and use it to inject fields into newly created ",(0,r.mdx)("inlineCode",{parentName:"p"},"Injected")," instance."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"InstanceInjector<Injected> instanceInjector = injector.getInstanceInjector(Injected.class);\n\nInjected injected = new Injected();\ninstanceInjector.injectInto(injected);\n")),(0,r.mdx)("h2",{id:"adding-class-to-bindings-graph"},"Adding class to bindings graph"),(0,r.mdx)("p",null,"Here is once againg the class that needs to have its fields injected. ",(0,r.mdx)("strong",{parentName:"p"},"Notice, that there is an ",(0,r.mdx)("inlineCode",{parentName:"strong"},"@Inject")," annotation this time annotating the type.")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"@Inject\npublic class Injected {\n    @Inject\n    String value;\n\n    @Inject\n    int id;\n}\n")),(0,r.mdx)("p",null,"Alternatively, you may add a constructor and annotate it with ",(0,r.mdx)("inlineCode",{parentName:"p"},"@Inject")," annotation like this:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public class Injected {\n    private final String value;\n    private final int id;\n\n    @Inject\n    public Injected(String value, int id) {\n        this.value = value;\n        this.id = id;\n    }\n    //...\n}\n\n")),(0,r.mdx)("p",null,"We still need to create an ",(0,r.mdx)("inlineCode",{parentName:"p"},"Injector")," and pass both ",(0,r.mdx)("inlineCode",{parentName:"p"},"MessageModule")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"IdModule")," as parameters. "),(0,r.mdx)("p",null,"However, instead of binding instance injector, this time we will bind ",(0,r.mdx)("inlineCode",{parentName:"p"},"Injected")," class. For that we will also use a ",(0,r.mdx)("inlineCode",{parentName:"p"},"ModuleBuilder")," to manually build the third module whose sole purpose will be binding a reuired class."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"Injector injector = Injector.of(\n        new MessageModule(),\n        new IdModule(),\n        ModuleBuilder.create()\n                .bind(Injected.class)\n                .build());\n")),(0,r.mdx)("p",null,"Finally, we may request an instance of ",(0,r.mdx)("inlineCode",{parentName:"p"},"Injected")," from the injector. All of the fields are properly injected."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"Injected instance = injector.getInstance(Injected.class);\n")))}p.isMDXComponent=!0}}]);
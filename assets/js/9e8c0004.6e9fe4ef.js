(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[277],{77618:function(e,t,r){"use strict";var n=r(67294),a=r(39962);t.Z=function(e){var t=e.url,r=e.text,i=e.isInline,c=void 0===i||i,l=e.children,s=(0,a.Z)().siteConfig,o=t.startsWith("/examples")?s.customFields.githubExamplesBranch:s.customFields.githubBranch;return n.createElement("a",{style:c?{}:{display:"block",marginBottom:"16px"},href:s.customFields.githubUrl+"/"+o+t,target:"_blank"},r||l)}},14304:function(e,t,r){"use strict";var n=r(67294),a=r(21140),i=r.n(a);i().initialize({startOnLoad:!0});t.Z=function(e){var t=e.chart;return(0,n.useEffect)((function(){i().contentLoaded()}),[]),n.createElement("div",{className:"mermaid"},t)}},77815:function(e,t,r){"use strict";r(67294);var n=r(39962);t.Z=function(e){var t=e.name,r=(0,n.Z)().siteConfig;if(!t)throw new Error("Variable name is required");if(void 0===r.customFields[t])throw new Error("Variable "+t+" not exist");return r.customFields[t]}},38163:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return p},contentTitle:function(){return v},metadata:function(){return u},toc:function(){return d},default:function(){return h}});var n=r(83117),a=r(80102),i=(r(67294),r(3905)),c=r(77618),l=r(14304),s=r(77815),o=["components"],p={title:"ActiveJ | Service Graph, manages application services according to their dependency graph",sidebar_label:"Service Graph",description:"Service Graph starts and stops application services according to their dependency graph using multithreaded graph traversal algorithm.",keywords:["service graph","java","java framework","spring alternative","netty alternative","jetty alternative","application services","threadpool","closeables","datasource"]},v="Service Graph",u={unversionedId:"boot/servicegraph",id:"boot/servicegraph",isDocsHomePage:!1,title:"ActiveJ | Service Graph, manages application services according to their dependency graph",description:"Service Graph starts and stops application services according to their dependency graph using multithreaded graph traversal algorithm.",source:"@site/docs/boot/servicegraph.mdx",sourceDirName:"boot",slug:"/boot/servicegraph",permalink:"/boot/servicegraph",tags:[],version:"current",frontMatter:{title:"ActiveJ | Service Graph, manages application services according to their dependency graph",sidebar_label:"Service Graph",description:"Service Graph starts and stops application services according to their dependency graph using multithreaded graph traversal algorithm.",keywords:["service graph","java","java framework","spring alternative","netty alternative","jetty alternative","application services","threadpool","closeables","datasource"]},sidebar:"docs",previous:{title:"Launcher",permalink:"/boot/launcher"},next:{title:"Workers",permalink:"/boot/workers"}},d=[{value:"Overview",id:"overview",children:[],level:2},{value:"Features",id:"features",children:[],level:2},{value:"Examples",id:"examples",children:[{value:"SimpleServiceExample",id:"simpleserviceexample",children:[],level:3},{value:"ReactiveServiceExample",id:"reactiveserviceexample",children:[],level:3},{value:"AdvancedServiceExample",id:"advancedserviceexample",children:[],level:3}],level:2}],m={toc:d};function h(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"service-graph"},"Service Graph"),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"ServiceGraph is a tool for managing the procedure of starting and stopping services. At start up, it creates a graph of all required services based on dependencies provided.\nThis graph is used to start and stop services concurrently, resulting in faster startup times without services interfering with each other."),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Designed to be used in combination with ",(0,i.kt)("a",{parentName:"li",href:"/inject"},"ActiveJ Inject")," and ",(0,i.kt)("a",{parentName:"li",href:"/boot/launcher"},"Launcher"),"\nas a means of starting/stopping application services according to their dependency graph"),(0,i.kt)("li",{parentName:"ul"},"It starts services following the multithreaded graph traversal algorithm: leaf services first, and so on"),(0,i.kt)("li",{parentName:"ul"},"It stops services in reverse order"),(0,i.kt)("li",{parentName:"ul"},"The services dependency graph is automatically built based on the ",(0,i.kt)("strong",{parentName:"li"},"ActiveJ Inject")," dependencies graph, but can be customized based on\nuser-specified dependencies."),(0,i.kt)("li",{parentName:"ul"},"Supports many standard services like ",(0,i.kt)("strong",{parentName:"li"},"ThreadPool"),", ",(0,i.kt)("strong",{parentName:"li"},"Closeables"),", ",(0,i.kt)("strong",{parentName:"li"},"DataSource"),", as well as Active-specific\nservices such as ",(0,i.kt)("a",{parentName:"li",href:"/async-io/eventloop"},"eventloops"),", reactive servers and reactive services."),(0,i.kt)("li",{parentName:"ul"},"Can be configured to support other services with user-provided adapters")),(0,i.kt)("p",null,"To get a basic understanding of the ServiceGraph role, let's take a look at a very simple example of an HTTP Server:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/getting-started/src/main/java/HttpHelloWorldExample.java tag=EXAMPLE",url:"/examples/tutorials/getting-started/src/main/java/HttpHelloWorldExample.java",tag:"EXAMPLE"},'public final class HttpHelloWorldExample extends HttpServerLauncher {\n  @Provides\n  AsyncServlet servlet() {\n    return request -> HttpResponse.ok200()\n      .withPlainText("Hello World")\n      .toPromise();\n  }\n\n  public static void main(String[] args) throws Exception {\n    Launcher launcher = new HttpHelloWorldExample();\n    launcher.launch(args);\n  }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This application extends predefined ",(0,i.kt)(c.Z,{url:"/launchers/http/src/main/java/io/activej/launchers/http/HttpServerLauncher.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"li"},"HttpServerLauncher"))," which features ",(0,i.kt)(c.Z,{url:"/boot-servicegraph/src/main/java/io/activej/service/ServiceGraphModule.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"li"},"ServiceGraphModule"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"HttpServerLauncher")," uses two services: ",(0,i.kt)(c.Z,{url:"/core-http/src/main/java/io/activej/http/HttpServer.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"li"},"HttpServer"))," and ",(0,i.kt)("a",{parentName:"li",href:"/async-io/eventloop"},(0,i.kt)("inlineCode",{parentName:"a"},"Eventloop"))," as a reactor.")),(0,i.kt)(l.Z,{chart:"\ngraph LR\n    HttpServer --\x3e Eventloop\n",mdxType:"Mermaid"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"According to this graph, Service Graph starts ",(0,i.kt)("inlineCode",{parentName:"li"},"Eventloop")," first. The dependent ",(0,i.kt)("inlineCode",{parentName:"li"},"HttpServer")," is started afterwards"),(0,i.kt)("li",{parentName:"ul"},"When the application stops, the services will are stopped in reverse order: ",(0,i.kt)("inlineCode",{parentName:"li"},"HttpServer")," first and ",(0,i.kt)("inlineCode",{parentName:"li"},"Eventloop")," next")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"To run the examples, you need to clone ActiveJ from GitHub"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/activej/activej\n")),(0,i.kt)("p",{parentName:"div"},"And import it as a Maven project. Check out tag ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(s.Z,{name:"currentVersion",mdxType:"Variable"})),". Before running the examples, build the project.\nThese examples are located at ",(0,i.kt)("inlineCode",{parentName:"p"},"activej/examples/core/boot")))),(0,i.kt)("h3",{id:"simpleserviceexample"},"SimpleServiceExample"),(0,i.kt)("p",null,"In this example, we create an application that extends Launcher and has a simple custom service that basically only\nstarts and stops:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/boot/src/main/java/SimpleServiceExample.java tag=EXAMPLE",url:"/examples/core/boot/src/main/java/SimpleServiceExample.java",tag:"EXAMPLE"},'public class SimpleServiceExample extends Launcher {\n  public static void main(String[] args) throws Exception {\n    SimpleServiceExample example = new SimpleServiceExample();\n    example.launch(args);\n  }\n\n  @Inject\n  CustomService customService;\n\n  @Override\n  protected Module getModule() {\n    return ServiceGraphModule.create();\n  }\n\n  @Inject\n  private static class CustomService implements Service {\n    @Override\n    public CompletableFuture<?> start() {\n      System.out.println("|SERVICE STARTING|");\n      return CompletableFuture.completedFuture(null);\n    }\n\n    @Override\n    public CompletableFuture<?> stop() {\n      System.out.println("|SERVICE STOPPING|");\n      return CompletableFuture.completedFuture(null);\n    }\n  }\n\n  @Override\n  protected void run() {\n    System.out.println("|RUNNING|");\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(c.Z,{url:"/examples/core/boot/src/main/java/SimpleServiceExample.java",mdxType:"Githublink"},"See full example on GitHub"))),(0,i.kt)("h3",{id:"reactiveserviceexample"},"ReactiveServiceExample"),(0,i.kt)("p",null,"Service Graph is also able to start and stop your custom services:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/boot/src/main/java/ReactiveServiceExample.java tag=EXAMPLE",url:"/examples/core/boot/src/main/java/ReactiveServiceExample.java",tag:"EXAMPLE"},'public class ReactiveServiceExample extends Launcher {\n\n  @Provides\n  Reactor reactor() {\n    return Eventloop.create();\n  }\n\n  @Provides\n  @Eager\n  CustomReactiveService customEventloopService(Reactor reactor) {\n    return new CustomReactiveService(reactor);\n  }\n\n  @Override\n  protected Module getModule() {\n    return ServiceGraphModule.create();\n  }\n\n  @Override\n  protected void run() {\n    System.out.println("|RUNNING|");\n  }\n\n  private static final class CustomReactiveService extends AbstractReactive implements ReactiveService {\n    public CustomReactiveService(Reactor reactor) {\n      super(reactor);\n    }\n\n    @Override\n    public Promise<?> start() {\n      System.out.println("|CUSTOM EVENTLOOP SERVICE STARTING|");\n      return Promises.delay(Duration.ofMillis(10))\n        .whenResult(() -> System.out.println("|CUSTOM EVENTLOOP SERVICE STARTED|"));\n    }\n\n    @Override\n    public Promise<?> stop() {\n      System.out.println("|CUSTOM EVENTLOOP SERVICE STOPPING|");\n      return Promises.delay(Duration.ofMillis(10))\n        .whenResult(() -> System.out.println("|CUSTOM EVENTLOOP SERVICE STOPPED|"));\n    }\n  }\n\n  public static void main(String[] args) throws Exception {\n    ReactiveServiceExample example = new ReactiveServiceExample();\n    example.launch(args);\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(c.Z,{url:"/examples/core/boot/src/main/java/ReactiveServiceExample.java",mdxType:"Githublink"},"See full example on GitHub"))),(0,i.kt)("h3",{id:"advancedserviceexample"},"AdvancedServiceExample"),(0,i.kt)("p",null,"The Service Graph can manage more complex service dependencies. For example, suppose we have a prototype e-mail service.\nIt needs two services to work properly - an authorization service and a database service. The authorization\nservice also requires a database service, as well as Eventloop and Executor. As a result, we have the following service graph:"),(0,i.kt)(l.Z,{chart:"\ngraph LR\n    id1(EmailService) --\x3e id2(AuthService)\n    id2 --\x3e id3(DBService)\n    id1 --\x3e id3\n    id2 --\x3e Executor\n    id2 --\x3e Eventloop\n",mdxType:"Mermaid"}),(0,i.kt)("p",null,"And ",(0,i.kt)("inlineCode",{parentName:"p"},"ServiceGraphModule")," will start and stop all these services in the right order:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"=== STARTING APPLICATION\n\nStarted java.util.concurrent.Executor\nStarted io.activej.eventloop.Eventloop\nStarted AdvancedServiceExample$DBService\n\nStarted AdvancedServiceExample$AuthService\n\nStarted AdvancedServiceExample$EmailService\n\n === STOPPING APPLICATION\n\nStopped AdvancedServiceExample$EmailService\n\nStopped AdvancedServiceExample$AuthService\n\nStopped java.util.concurrent.Executor\nStopped io.activej.eventloop.Eventloop\nStopped AdvancedServiceExample$DBService\n")),(0,i.kt)("p",null,"This application looks as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/boot/src/main/java/AdvancedServiceExample.java tag=EXAMPLE",url:"/examples/core/boot/src/main/java/AdvancedServiceExample.java",tag:"EXAMPLE"},'public class AdvancedServiceExample extends Launcher {\n  @Provides\n  @Eager\n  DBService dbService() {\n    return new DBService();\n  }\n\n  @Provides\n  @Eager\n  EmailService emailService(DBService dbService, AuthService authService) {\n    return new EmailService(dbService, authService);\n  }\n\n  @Provides\n  @Eager\n  AuthService authService(Reactor reactor, Executor executor, DBService dbService) {\n    return new AuthService(reactor, executor, dbService);\n  }\n\n  @Provides\n  Reactor reactor() {\n    return Eventloop.builder()\n      .withCurrentThread()\n      .build();\n  }\n\n  @Provides\n  Executor executor() {\n    return Executors.newCachedThreadPool();\n  }\n\n  @Override\n  protected Module getModule() {\n    return ServiceGraphModule.create();\n  }\n\n  @SuppressWarnings("FieldCanBeLocal")\n  private static class AuthService extends AbstractReactive\n    implements ReactiveService {\n    private final Executor executor;\n    private final DBService dbService;\n\n    public AuthService(Reactor reactor, Executor executor, DBService dbService) {\n      super(reactor);\n      this.executor = executor;\n      this.dbService = dbService;\n    }\n\n    @Override\n    public Promise<?> start() {\n      System.out.println("AuthService starting");\n      return Promise.ofBlocking(executor,\n        () -> System.out.println("AuthService started"));\n    }\n\n    @Override\n    public Promise<?> stop() {\n      return Promise.ofBlocking(executor,\n        () -> System.out.println("AuthService stopped"));\n    }\n  }\n\n  private static class DBService implements Service {\n    @Override\n    public CompletableFuture<?> start() {\n      System.out.println("DBService is starting");\n      return CompletableFuture.runAsync(() -> {\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n          Thread.currentThread().interrupt();\n        }\n        System.out.println("DBService is started");\n      });\n    }\n\n    @Override\n    public CompletableFuture<?> stop() {\n      System.out.println("DBService is stopping");\n      return CompletableFuture.runAsync(() -> {\n        try {\n          Thread.sleep(2000);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n          Thread.currentThread().interrupt();\n        }\n        System.out.println("DBService is stopped");\n      });\n    }\n  }\n\n  @SuppressWarnings("FieldCanBeLocal")\n  private static class EmailService implements Service {\n    private final DBService service;\n    private final AuthService authService;\n\n    public EmailService(DBService service, AuthService authService) {\n      this.service = service;\n      this.authService = authService;\n    }\n\n    @Override\n    public CompletableFuture<?> start() {\n      System.out.println("EmailService is starting");\n      return CompletableFuture.runAsync(() -> {\n        try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n          Thread.currentThread().interrupt();\n        }\n        System.out.println("EmailService is started");\n      });\n    }\n\n    @Override\n    public CompletableFuture<?> stop() {\n      System.out.println("EmailService is stopping");\n      return CompletableFuture.runAsync(() -> System.out.println("EmailService is stopped"));\n    }\n  }\n\n  @Override\n  protected void run() {\n  }\n\n  public static void main(String[] args) throws Exception {\n    AdvancedServiceExample example = new AdvancedServiceExample();\n    example.launch(args);\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(c.Z,{url:"/examples/core/boot/src/main/java/AdvancedServiceExample.java",mdxType:"Githublink"},"See full example on GitHub"))))}h.isMDXComponent=!0},11748:function(e,t,r){var n={"./locale":89234,"./locale.js":89234};function a(e){var t=i(e);return r(t)}function i(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}a.keys=function(){return Object.keys(n)},a.resolve=i,e.exports=a,a.id=11748}}]);
"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[7060],{3905:function(e,a,t){t.d(a,{Zo:function(){return p},kt:function(){return d}});var i=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,i,r=function(e,a){if(null==e)return{};var t,i,r={},n=Object.keys(e);for(i=0;i<n.length;i++)t=n[i],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)t=n[i],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=i.createContext({}),c=function(e){var a=i.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=c(e.components);return i.createElement(o.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},u=i.forwardRef((function(e,a){var t=e.components,r=e.mdxType,n=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,v=u["".concat(o,".").concat(d)]||u[d]||m[d]||n;return t?i.createElement(v,l(l({ref:a},p),{},{components:t})):i.createElement(v,l({ref:a},p))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var n=t.length,l=new Array(n);l[0]=u;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<n;c++)l[c]=t[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},77618:function(e,a,t){var i=t(67294),r=t(39962);a.Z=function(e){var a=e.url,t=e.text,n=e.isInline,l=void 0===n||n,s=e.children,o=(0,r.Z)().siteConfig,c=a.startsWith("/examples")?o.customFields.githubExamplesBranch:o.customFields.githubBranch;return i.createElement("a",{style:l?{}:{display:"block",marginBottom:"16px"},href:o.customFields.githubUrl+"/"+c+a,target:"_blank"},t||s)}},77815:function(e,a,t){t(67294);var i=t(39962);a.Z=function(e){var a=e.name,t=(0,i.Z)().siteConfig;if(!a)throw new Error("Variable name is required");if(void 0===t.customFields[a])throw new Error("Variable "+a+" not exist");return t.customFields[a]}},1e4:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return m},toc:function(){return u},default:function(){return v}});var i=t(83117),r=t(80102),n=(t(67294),t(3905)),l=t(77815),s=t(77618),o=["components"],c={title:"ActiveJ Serializer | World's fastest JVM serializer",description:"ActiveJ Serializer is world's fastest JVM serializer. It is streamlined and features powerful tools with intuitive DSL",sidebar_label:"Examples",keywords:["serializer","java","java framework","java for beginners","object serialization","spring alternative","bytecode generator"]},p="Examples",m={unversionedId:"serializer/examples",id:"serializer/examples",isDocsHomePage:!1,title:"ActiveJ Serializer | World's fastest JVM serializer",description:"ActiveJ Serializer is world's fastest JVM serializer. It is streamlined and features powerful tools with intuitive DSL",source:"@site/docs/serializer/examples.mdx",sourceDirName:"serializer",slug:"/serializer/examples",permalink:"/serializer/examples",tags:[],version:"current",frontMatter:{title:"ActiveJ Serializer | World's fastest JVM serializer",description:"ActiveJ Serializer is world's fastest JVM serializer. It is streamlined and features powerful tools with intuitive DSL",sidebar_label:"Examples",keywords:["serializer","java","java framework","java for beginners","object serialization","spring alternative","bytecode generator"]},sidebar:"docs",previous:{title:"Overview",permalink:"/serializer"},next:{title:"Overview",permalink:"/specializer"}},u=[{value:"Simple Object Serialization",id:"simple-object-serialization",children:[],level:2},{value:"Java record Serialization",id:"java-record-serialization",children:[],level:2},{value:"Generics and Interfaces",id:"generics-and-interfaces",children:[],level:2},{value:"Nested type serialization",id:"nested-type-serialization",children:[],level:2},{value:"Fixed Size and Nullable Fields Serialization",id:"fixed-size-and-nullable-fields-serialization",children:[],level:2},{value:"Custom serializer",id:"custom-serializer",children:[],level:2}],d={toc:u};function v(e){var a=e.components,t=(0,r.Z)(e,o);return(0,n.kt)("wrapper",(0,i.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"examples"},"Examples"),(0,n.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"To run the examples, you need to clone ActiveJ from GitHub"),(0,n.kt)("pre",{parentName:"div"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/activej/activej\n")),(0,n.kt)("p",{parentName:"div"},"And import it as a Maven project. Check out tag ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)(l.Z,{name:"currentVersion",mdxType:"Variable"})),". Before running the examples, build the project.\nThese examples are located at ",(0,n.kt)("inlineCode",{parentName:"p"},"activej/examples/core/serializer")))),(0,n.kt)("h2",{id:"simple-object-serialization"},"Simple Object Serialization"),(0,n.kt)("p",null,"To create classes whose instances can be serialized/deserialized, special annotations must be used:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)(s.Z,{text:"@Serialize",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/Serialize.java",mdxType:"Githublink"})," annotation with order number on property getter. Parameter `order` provides better compatibility if classes are changed."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)(s.Z,{text:"@Deserialize",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/Deserialize.java",mdxType:"Githublink"})," annotation with property name (which should be the same name as the one in getter) in constructor.")),(0,n.kt)("p",null,"This is enough to create serializable POJOs, for example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_1",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",tag:"REGION_1"},'public static class Person {\n  public Person(@Deserialize("age") int age, @Deserialize("name") String name) {\n    this.age = age;\n    this.name = name;\n  }\n\n  @Serialize\n  public final int age;\n\n  @Serialize\n  public final String name;\n\n  private String surname;\n\n  @Serialize\n  public String getSurname() {\n    return surname;\n  }\n\n  public void setSurname(String surname) {\n    this.surname = surname;\n  }\n}\n')),(0,n.kt)("p",null,"Now let's do some serialization. We'll create an instance of a ",(0,n.kt)("inlineCode",{parentName:"p"},"Person")," class, a byte array that will store the result of serialization, and an instance of a ",(0,n.kt)(s.Z,{text:"BinarySerializer",url:"/core-serializer/src/main/java/io/activej/serializer/BinarySerializer.java",mdxType:"Githublink"})," class, which represents the serializer that encodes and decodes ",(0,n.kt)("inlineCode",{parentName:"p"},"<T>")," values into byte arrays (in this case ",(0,n.kt)("inlineCode",{parentName:"p"},"<Person>")," values):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_2",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",tag:"REGION_2"},'Person jim = new Person(34, "Jim");\njim.setSurname("Smith");\nbyte[] buffer = new byte[200];\nBinarySerializer<Person> serializer = SerializerFactory.defaultInstance()\n  .create(Person.class);\n')),(0,n.kt)("p",null,"That's it, now we can serialize and deserialize our ",(0,n.kt)("inlineCode",{parentName:"p"},"Person")," instance:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_3",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",tag:"REGION_3"},"serializer.encode(buffer, 0, jim);\nPerson johnCopy = serializer.decode(buffer, 0);\n")),(0,n.kt)("p",null,"Let's make a simple test to check if everything works correctly:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_4",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",tag:"REGION_4"},'System.out.println(jim.age + " " + johnCopy.age);\nSystem.out.println(jim.name + " " + johnCopy.name);\nSystem.out.println(jim.getSurname() + " " + johnCopy.getSurname());\n')),(0,n.kt)("p",null,"After you run the example, you'll receive the following output:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"34 34\nJim Jim\nSmith Smith\n")),(0,n.kt)("p",null,"Which means that the serialization and deserialization worked correctly."),(0,n.kt)("p",null,"You can explore full example sources on ",(0,n.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",mdxType:"Githublink"})),(0,n.kt)("h2",{id:"java-record-serialization"},"Java record Serialization"),(0,n.kt)("p",null,"ActiveJ Serializer supports serialization/deserialization of Java records out of the box. All you need to do is to mark\nyour record with ",(0,n.kt)(s.Z,{text:"@SerializeRecord",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/SerializeRecord.java",mdxType:"Githublink"})," annotation like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/RecordSerializationExample.java tag=REGION_1",url:"/examples/core/serializer/src/main/java/RecordSerializationExample.java",tag:"REGION_1"},"@SerializeRecord\npublic record Person(int age, String name) {\n}\n")),(0,n.kt)("p",null,"Similarly to the ",(0,n.kt)("a",{parentName:"p",href:"#simple-object-serialization"},"previous example")," we'll create an instance of a ",(0,n.kt)("inlineCode",{parentName:"p"},"Person")," class, a byte array that will store the result of serialization, and an instance of a ",(0,n.kt)(s.Z,{text:"BinarySerializer",url:"/core-serializer/src/main/java/io/activej/serializer/BinarySerializer.java",mdxType:"Githublink"})," class:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/RecordSerializationExample.java tag=REGION_2",url:"/examples/core/serializer/src/main/java/RecordSerializationExample.java",tag:"REGION_2"},'Person jim = new Person(34, "Jim");\nbyte[] buffer = new byte[200];\nBinarySerializer<Person> serializer = SerializerFactory.defaultInstance()\n  .create(Person.class);\n')),(0,n.kt)("p",null,"Now we can serialize and deserialize our ",(0,n.kt)("inlineCode",{parentName:"p"},"Person")," record instance:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/RecordSerializationExample.java tag=REGION_3",url:"/examples/core/serializer/src/main/java/RecordSerializationExample.java",tag:"REGION_3"},"serializer.encode(buffer, 0, jim);\nPerson johnCopy = serializer.decode(buffer, 0);\n")),(0,n.kt)("p",null,"Let's make a simple test to check if everything works correctly:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_4",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",tag:"REGION_4"},'System.out.println(jim.age + " " + johnCopy.age);\nSystem.out.println(jim.name + " " + johnCopy.name);\nSystem.out.println(jim.getSurname() + " " + johnCopy.getSurname());\n')),(0,n.kt)("p",null,"After you run the example, you'll receive the following output:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"34 34\nJim Jim\n")),(0,n.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"If you want to have more control over serialization of records, you can use most ",(0,n.kt)("inlineCode",{parentName:"p"},"@Serialize...")," annotations\n(like ",(0,n.kt)("inlineCode",{parentName:"p"},"@SerializeClass"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"@SerializeNullable"),", etc.) on record components."))),(0,n.kt)("p",null,"You can explore full example sources on ",(0,n.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/RecordSerializationExample.java",mdxType:"Githublink"})),(0,n.kt)("h2",{id:"generics-and-interfaces"},"Generics and Interfaces"),(0,n.kt)("p",null,"ActiveJ Serializer can simply manage more complex objects. For example, let's see how it handles interfaces and\ngenerics."),(0,n.kt)("p",null,"First, create a simple ",(0,n.kt)("inlineCode",{parentName:"p"},"Skill")," class:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_1",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_1"},'public static class Skill<K, V> {\n  private final K key;\n  private final V value;\n\n  public Skill(@Deserialize("key") K key, @Deserialize("value") V value) {\n    this.key = key;\n    this.value = value;\n  }\n\n  @Serialize\n  public K getKey() {\n    return key;\n  }\n\n  @Serialize\n  public V getValue() {\n    return value;\n  }\n}\n')),(0,n.kt)("p",null,"Next, create a ",(0,n.kt)("inlineCode",{parentName:"p"},"Person")," interface that has a single method returning a list of skills:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_2",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_2"},"public interface Person<K, V> {\n  @Serialize\n  List<Skill<K, V>> getSkills();\n}\n")),(0,n.kt)("p",null,"Finally create a ",(0,n.kt)("inlineCode",{parentName:"p"},"Developer")," class that implements ",(0,n.kt)("inlineCode",{parentName:"p"},"Person")," interface:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_3",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_3"},"public static class Developer implements Person<Integer, String> {\n  private List<Skill<Integer, String>> list;\n\n  @Serialize\n  @Override\n  public List<Skill<Integer, String>> getSkills() {\n    return list;\n  }\n\n  public void setSkills(List<Skill<Integer, String>> list) {\n    this.list = list;\n  }\n}\n")),(0,n.kt)("p",null,"Let's proceed to the serialization. Similarly to the previous example, we'll create an instance of the ",(0,n.kt)("inlineCode",{parentName:"p"},"Developer")," class, a\nbyte array to store the result of the serialization and an instance of a ",(0,n.kt)("inlineCode",{parentName:"p"},"BinarySerializer<Developer>")," serializer:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_4",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_4"},'Developer developer = new Developer();\ndeveloper.setSkills(List.of(\n  new Skill<>(1, "Java"),\n  new Skill<>(2, "ActiveJ")));\n\nbyte[] buffer = new byte[200];\nBinarySerializer<Developer> serializer = SerializerFactory.defaultInstance()\n  .create(Developer.class);\n')),(0,n.kt)("p",null,"Now let's serialize and deserialize our ",(0,n.kt)("inlineCode",{parentName:"p"},"Developer")," instance:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_5",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_5"},"serializer.encode(buffer, 0, developer);\nDeveloper developer2 = serializer.decode(buffer, 0);\n")),(0,n.kt)("p",null,"Check if the serialization works correctly:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_6",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_6"},'for (int i = 0; i < developer.getSkills().size(); i++) {\n  System.out.println(\n    developer.getSkills().get(i).getKey() + " - " + developer.getSkills().get(i).getValue() + ", " +\n    developer2.getSkills().get(i).getKey() + " - " + developer2.getSkills().get(i).getValue());\n}\n')),(0,n.kt)("p",null,"If you run the example, you'll receive the following output:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"1 - Java, 1 - Java\n2 - ActiveJ, 2 - ActiveJ\n")),(0,n.kt)("p",null,"Which means that the serialization worked correctly."),(0,n.kt)("p",null,"You can explore full example sources on ",(0,n.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",mdxType:"Githublink"})),(0,n.kt)("h2",{id:"nested-type-serialization"},"Nested type serialization"),(0,n.kt)("p",null,"Sometimes you need to serialize a field that represents a generic type. Let's say a ",(0,n.kt)("inlineCode",{parentName:"p"},"Map"),". All you need to do is put the ",(0,n.kt)("inlineCode",{parentName:"p"},"@Serialize")," annotation on that field."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"@Serialize\npublic Map<Integer, String>> map;\n")),(0,n.kt)("p",null,"But what if you want a map to contain nullable values? You can use the ",(0,n.kt)(s.Z,{text:"@SerializeNullable",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/SerializeNullable.java",mdxType:"Githublink"})," annotation.\nHowever, if you just put this annotation on the field, it would mean that a whole map could be nullable."),(0,n.kt)("p",null,"We have to put the annotation directly on a ",(0,n.kt)("inlineCode",{parentName:"p"},"String"),"! Since ActiveJ v5.0, some serializer annotations are applicable to a type use.\nSo whenever you need to mark some type with additional serializer information, just put the annotation on a type:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"@Serialize\npublic Map<Integer, @SerializeNullable String>> map;\n")),(0,n.kt)("p",null,"In this tutorial we will show you how to write serializers using type use annotations."),(0,n.kt)("p",null,"We will define a parameterized class ",(0,n.kt)("inlineCode",{parentName:"p"},"Nested"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SerializeExample.java tag=Nested",url:"/examples/core/serializer/src/main/java/SerializeExample.java",tag:"Nested"},'public static class Nested<T1, T2> {\n  @Serialize\n  public final T1 first;\n  @Serialize\n  public final T2 second;\n\n  public Nested(@Deserialize("first") T1 first, @Deserialize("second") T2 second) {\n    this.first = first;\n    this.second = second;\n  }\n\n  @Override\n  public String toString() {\n    return "Nested{" + first + ", " + second + \'}\';\n  }\n}\n')),(0,n.kt)("p",null,"Then we define a ",(0,n.kt)("inlineCode",{parentName:"p"},"Storage")," class to be serialized:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SerializeExample.java tag=Storage",url:"/examples/core/serializer/src/main/java/SerializeExample.java",tag:"Storage"},"public static class Storage {\n  @Serialize\n  public List<@SerializeNullable Nested<Integer, @SerializeNullable String>> listOfNested;\n}\n")),(0,n.kt)("p",null,"The class has a single field, which is a ",(0,n.kt)("inlineCode",{parentName:"p"},"List")," of nullable ",(0,n.kt)("inlineCode",{parentName:"p"},"Nested")," elements. In addition, the second type parameter of the ",(0,n.kt)("inlineCode",{parentName:"p"},"Nested")," class (",(0,n.kt)("inlineCode",{parentName:"p"},"String"),") is itself nullable."),(0,n.kt)("p",null,"We create a serializer as follows:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SerializeExample.java tag=Serializer",url:"/examples/core/serializer/src/main/java/SerializeExample.java",tag:"Serializer"},"BinarySerializer<Storage> serializer = SerializerFactory.defaultInstance()\n  .create(Storage.class);\n")),(0,n.kt)("p",null,"We then construct a ",(0,n.kt)("inlineCode",{parentName:"p"},"Storage")," class and add nullable elements to the list. Once we run the example we should see the following output:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"[Nested{1, abc}, null, Nested{5, null}]\n[Nested{1, abc}, null, Nested{5, null}]\n")),(0,n.kt)("p",null,"This shows both an original ",(0,n.kt)("inlineCode",{parentName:"p"},"Storage")," contents as well as deserialized one."),(0,n.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"A special care should be taken when annotating arrays."),(0,n.kt)("pre",{parentName:"div"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"@Foo String @Bar []\n")),(0,n.kt)("p",{parentName:"div"},"Here, ",(0,n.kt)("inlineCode",{parentName:"p"},"@Foo")," annotates ",(0,n.kt)("inlineCode",{parentName:"p"},"String")," while ",(0,n.kt)("inlineCode",{parentName:"p"},"@Bar")," annotates the whole array ",(0,n.kt)("inlineCode",{parentName:"p"},"String[]"),"."),(0,n.kt)("p",{parentName:"div"},"This is in accordance with ",(0,n.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.7.4"},"Java Language Specification")))),(0,n.kt)("p",null,"You can explore full example sources on ",(0,n.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/SerializeExample.java",mdxType:"Githublink"})),(0,n.kt)("h2",{id:"fixed-size-and-nullable-fields-serialization"},"Fixed Size and Nullable Fields Serialization"),(0,n.kt)("p",null,"ActiveJ Serializer has some ",(0,n.kt)(s.Z,{text:"helper annotations",url:"/core-serializer/src/main/java/io/activej/serializer/annotations",mdxType:"Githublink"}),", for example:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)(s.Z,{text:"@SerializeNullable",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/SerializeNullable.java",mdxType:"Githublink"})," on properties that can have null values. This annotation also has a special `path` parameter. It represent a path of the tree of the variable's data types. It allows to indicate which of the 'nodes' is nullable.")),(0,n.kt)("p",null,"As you can see, you can write several annotations for the different paths of the same data structure."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)(s.Z,{text:"@SerializeFixedSize",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/SerializeFixedSize.java",mdxType:"Githublink"})," on properties that should have a fixed size after serialization")),(0,n.kt)("p",null,"Let's create a simple example that illustrates how to use these annotations:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_1",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java",tag:"REGION_1"},"public static class Storage {\n  @Serialize\n  public @SerializeNullable String @SerializeFixedSize(3) [] strings;\n\n  @Serialize\n  public byte @SerializeFixedSize(4) [] bytes;\n}\n")),(0,n.kt)("p",null,"Now let's serialize and deserialize the ",(0,n.kt)("inlineCode",{parentName:"p"},"Storage")," instance similarly to the previous examples. We will create a ",(0,n.kt)("inlineCode",{parentName:"p"},"Storage")," instance, a byte array to store the serialization result, and a ",(0,n.kt)("inlineCode",{parentName:"p"},"BinarySerializer<Storage>")," serializer instance:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_2",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java",tag:"REGION_2"},'Storage storage = new Storage();\nstorage.strings = new String[]{"abc", null, "123", "superfluous"};\nstorage.bytes = new byte[]{1, 2, 3, 4, 5, 6};\n\nbyte[] buffer = new byte[200];\nBinarySerializer<Storage> serializer = SerializerFactory.defaultInstance()\n  .create(Storage.class);\n')),(0,n.kt)("p",null,"Finally, serialize and deserialize ",(0,n.kt)("strong",{parentName:"p"},"Storage")," instance:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_3",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java",tag:"REGION_3"},"serializer.encode(buffer, 0, storage);\nStorage limitedStorage = serializer.decode(buffer, 0);\n")),(0,n.kt)("p",null,"Let's see how serialization affected the ",(0,n.kt)("em",{parentName:"p"},"storage"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_4",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java",tag:"REGION_4"},'System.out.println(Arrays.toString(storage.strings) + " -> " + Arrays.toString(limitedStorage.strings));\nSystem.out.println(Arrays.toString(storage.bytes) + " -> " + Arrays.toString(limitedStorage.bytes));\n')),(0,n.kt)("p",null,"If you run the example, you'll see the following output:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"[abc, null, 123, superfluous] -> [abc, null, 123]\n[1, 2, 3, 4, 5, 6] -> [1, 2, 3, 4]\n")),(0,n.kt)("p",null,"As you can see in the first line, ",(0,n.kt)("em",{parentName:"p"},"storage")," differs from ",(0,n.kt)("em",{parentName:"p"},"limitedStorage"),". This is because ",(0,n.kt)("inlineCode",{parentName:"p"},"@SerializeFixedSize"),"\nannotation  was set at value ",(0,n.kt)("strong",{parentName:"p"},"3")," for the ",(0,n.kt)("em",{parentName:"p"},"strings"),' property. Thus, "superfluous" was removed from the array while serialization took place.'),(0,n.kt)("p",null,"You can explore full example sources on ",(0,n.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java",mdxType:"Githublink"})),(0,n.kt)("h2",{id:"custom-serializer"},"Custom serializer"),(0,n.kt)("p",null,"In this example, we will demonstrate how to write a custom serializer for the ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDate")," class. You can use this example\nas a reference for writing serializers for other classes that you might need to serialize."),(0,n.kt)("p",null,"Let's imagine we need to serialize a class that contains the ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDate")," field:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/LocalDateSerializerExample.java tag=HOLDER",url:"/examples/core/serializer/src/main/java/LocalDateSerializerExample.java",tag:"HOLDER"},'public static class LocalDateHolder {\n  @Serialize\n  public final LocalDate date;\n\n  public LocalDateHolder(@Deserialize("date") LocalDate date) {\n    this.date = date;\n  }\n\n  @Override\n  public String toString() {\n    return "LocalDateHolder{date=" + date + \'}\';\n  }\n}\n')),(0,n.kt)("p",null,"By default, the ActiveJ Serializer does not know how to serialize the ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDate")," class, so it will throw an exception when we\nnaively try to serialize it. We must provide a custom serializer for the ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDate")," class to serialize the ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDateHolder"),"\nclass:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/LocalDateSerializerExample.java tag=SERIALIZER",url:"/examples/core/serializer/src/main/java/LocalDateSerializerExample.java",tag:"SERIALIZER"},"public static class LocalDateSerializerDef extends SimpleSerializerDef<LocalDate> {\n  @Override\n  protected BinarySerializer<LocalDate> createSerializer(int version, CompatibilityLevel compatibilityLevel) {\n    return new BinarySerializer<>() {\n      @Override\n      public void encode(BinaryOutput out, LocalDate localDate) {\n        out.writeVarInt(localDate.getYear());\n        out.writeVarInt(localDate.getMonthValue());\n        out.writeVarInt(localDate.getDayOfMonth());\n      }\n\n      @Override\n      public LocalDate decode(BinaryInput in) throws CorruptedDataException {\n        int year = in.readVarInt();\n        int month = in.readVarInt();\n        int day = in.readVarInt();\n\n        return LocalDate.of(year, month, day);\n      }\n    };\n  }\n}\n")),(0,n.kt)("p",null,"We extend ",(0,n.kt)(s.Z,{text:"SimpleSerializerDef",url:"/core-serializer/src/main/java/io/activej/serializer/def/SimpleSerializerDef.java",mdxType:"Githublink"}),"\nclass and implement methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"void encode(BinaryOutput out, LocalDate localDate)")," - here we instruct the serializer how to serialize a ",(0,n.kt)("inlineCode",{parentName:"li"},"LocalDate")," instance. We actually need to\nserialize 3 ",(0,n.kt)("inlineCode",{parentName:"li"},"int")," values (",(0,n.kt)("inlineCode",{parentName:"li"},"year"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"month"),", and ",(0,n.kt)("inlineCode",{parentName:"li"},"dayOfMonth"),") and write them to ",(0,n.kt)(s.Z,{text:"BinaryOutput",url:"/core-serializer/src/main/java/io/activej/serializer/BinaryOutput.java",mdxType:"Githublink"})," as var ints (integers of variable length)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"LocalDate decode(BinaryInput in)")," - here we need to instruct the serializer how to deserialize raw bytes into a ",(0,n.kt)("inlineCode",{parentName:"li"},"LocalDate")," instance.\nThe process is an inverse to encoding. First, we have to read 3 ",(0,n.kt)("inlineCode",{parentName:"li"},"int")," values (",(0,n.kt)("inlineCode",{parentName:"li"},"year"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"month"),", and ",(0,n.kt)("inlineCode",{parentName:"li"},"dayOfMonth"),") as var ints from ",(0,n.kt)(s.Z,{text:"BinaryInput",url:"/core-serializer/src/main/java/io/activej/serializer/BinaryInput.java",mdxType:"Githublink"}),".\nThen we can create a new ",(0,n.kt)("inlineCode",{parentName:"li"},"LocalDate")," instance by calling static factory method ",(0,n.kt)("inlineCode",{parentName:"li"},"LocalDate.of(year, month, dayOfMonth)"),"\nand passing previously deserialized ",(0,n.kt)("inlineCode",{parentName:"li"},"int")," values.")),(0,n.kt)("p",null,"At last, we need to add our serializer of ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDate")," to ",(0,n.kt)(s.Z,{text:"SerializerFactory",url:"/core-serializer/src/main/java/io/activej/serializer/SerializerFactory.java",mdxType:"Githublink"})," builder."),(0,n.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"Alternatively, you can create a custom serializer by extending not a ",(0,n.kt)("inlineCode",{parentName:"p"},"SimpleSerializerDef")," class but a ",(0,n.kt)(s.Z,{text:"AbstractSerializerDef",url:"/core-serializer/src/main/java/io/activej/serializer/def/AbstractSerializerDef.java",mdxType:"Githublink"})," class.\nYou would need to implement ",(0,n.kt)("inlineCode",{parentName:"p"},"encode()/decode()")," methods that return ",(0,n.kt)("inlineCode",{parentName:"p"},"Expression"),". You would need to use ",(0,n.kt)("a",{parentName:"p",href:"/codegen"},"Expression API")," in order to do so."))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/LocalDateSerializerExample.java tag=SERIALIZER_CREATE",url:"/examples/core/serializer/src/main/java/LocalDateSerializerExample.java",tag:"SERIALIZER_CREATE"},"BinarySerializer<LocalDateHolder> serializer =\n  SerializerFactory.builder()\n    .with(LocalDate.class, ctx -> new LocalDateSerializerDef())\n    .build()\n    .create(LocalDateHolder.class);\n")),(0,n.kt)("p",null,"If we run ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDateSerializerExample#main")," method, we should see the following output:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"Serializing LocalDateHolder: LocalDateHolder{date=2021-03-17}\nByte array with serialized LocalDateHolder: [-27, 15, 3, 17]\nDeserialized LocalDateHolder: LocalDateHolder{date=2021-03-17}\n")),(0,n.kt)("p",null,"You can explore full example sources on ",(0,n.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/LocalDateSerializerExample.java",mdxType:"Githublink"})))}v.isMDXComponent=!0}}]);
(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[8257],{3149:function(e,n,a){"use strict";var t=a(67294),r=a(39962),s=a(41106),i=a.n(s),o=a(15835);a.n(o)().interpolate=/{{([\s\S]+?)}}/g,n.Z=function(e){var n=e.href,a=e.children,s=e.target,o=void 0===s?"_blank":s,c=(0,r.Z)().siteConfig,l=i()(n);return t.createElement("a",{href:l(c.customFields),target:o},a)}},77618:function(e,n,a){"use strict";var t=a(67294),r=a(39962);n.Z=function(e){var n=e.url,a=e.text,s=e.isInline,i=void 0===s||s,o=e.isExample,c=void 0!==o&&o,l=e.children,d=(0,r.Z)().siteConfig;return t.createElement("a",{style:i?{}:{display:"block",marginBottom:"16px"},href:d.customFields.githubUrl+"/"+d.customFields.githubBranch+(c?"-examples":"")+n,target:"_blank"},a||l)}},94801:function(e,n,a){"use strict";a.r(n),a.d(n,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return u},default:function(){return v}});var t=a(87462),r=a(63366),s=(a(67294),a(3905)),i=a(77618),o=a(3149),c=["components"],l={sidebar_label:"Class scanning"},d="Class scanning",p={unversionedId:"inject/class-scanning",id:"inject/class-scanning",isDocsHomePage:!1,title:"Class scanning",description:"In this tutorial we will define @Provides methods in arbitrary classes that do not implement Module interface.",source:"@site/docs/inject/class-scanning.mdx",sourceDirName:"inject",slug:"/inject/class-scanning",permalink:"/inject/class-scanning",version:"current",frontMatter:{sidebar_label:"Class scanning"},sidebar:"docs",previous:{title:"Injecting instances",permalink:"/inject/injecting-instances"},next:{title:"Binding transformations",permalink:"/inject/binding-transformations"}},u=[{value:"Classes with <code>@Provides</code> methods",id:"classes-with-provides-methods",children:[]},{value:"Creating <code>Injector</code>",id:"creating-injector",children:[]}],m={toc:u};function v(e){var n=e.components,a=(0,r.Z)(e,c);return(0,s.kt)("wrapper",(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"class-scanning"},"Class scanning"),(0,s.kt)("p",null,"In this tutorial we will define ",(0,s.kt)("inlineCode",{parentName:"p"},"@Provides")," methods in arbitrary classes that do not implement ",(0,s.kt)(i.Z,{url:"/core-inject/src/main/java/io/activej/inject/module/Module.java",mdxType:"Githublink"},(0,s.kt)("inlineCode",{parentName:"p"},"Module"))," interface.\nWe will then scan those classes to collect providers to the ",(0,s.kt)("inlineCode",{parentName:"p"},"Injector"),"."),(0,s.kt)("h2",{id:"classes-with-provides-methods"},"Classes with ",(0,s.kt)("inlineCode",{parentName:"h2"},"@Provides")," methods"),(0,s.kt)("p",null,"We will define two classes that contain methods annotated with ",(0,s.kt)("inlineCode",{parentName:"p"},"@Provides")," annotation. The first class ",(0,s.kt)("inlineCode",{parentName:"p"},"StaticProviders")," will contain only static ",(0,s.kt)("inlineCode",{parentName:"p"},"@Provides"),"-methods.\nThe other class ",(0,s.kt)("inlineCode",{parentName:"p"},"MixedProviders")," contains both static and instance ",(0,s.kt)("inlineCode",{parentName:"p"},"@Provides"),"-methods."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/ClassScanExample.java tag=REGION_1",url:"/examples/core/inject-2/src/main/java/ClassScanExample.java",tag:"REGION_1"},'public static class StaticProviders {\n  @Provides\n  static int port() {\n    return 1234;\n  }\n\n  @Provides\n  static String databaseName() {\n    return "exampleDB";\n  }\n}\n')),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"StaticProviders")," class provides a name of a database as well as a database port number."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/ClassScanExample.java tag=REGION_2",url:"/examples/core/inject-2/src/main/java/ClassScanExample.java",tag:"REGION_2"},"public static class MixedProviders {\n  private final String hostname;\n\n  public MixedProviders(String hostname) {\n    this.hostname = hostname;\n  }\n\n  @Provides\n  InetSocketAddress address(int port) {\n    return new InetSocketAddress(hostname, port);\n  }\n\n  @Provides\n  static DataSource dataSource(InetSocketAddress address, String dbName) {\n    return new DataSource(address, dbName);\n  }\n}\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"MixedProviders")," class provides an address to a database and a ",(0,s.kt)("inlineCode",{parentName:"p"},"DataSource")," class. ",(0,s.kt)("inlineCode",{parentName:"p"},"DataSource")," class requires a database name as well as an address to a database.\nThe class looks like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/ClassScanExample.java tag=REGION_4",url:"/examples/core/inject-2/src/main/java/ClassScanExample.java",tag:"REGION_4"},'public static final class DataSource {\n  private final InetSocketAddress address;\n  private final String dbName;\n\n  @Inject\n  public DataSource(InetSocketAddress address, String dbName) {\n    this.address = address;\n    this.dbName = dbName;\n  }\n\n  public String queryData() {\n    System.out.printf("Querying %s:%s for data\\n", address, dbName);\n    return "data";\n  }\n}\n')),(0,s.kt)("h2",{id:"creating-injector"},"Creating ",(0,s.kt)("inlineCode",{parentName:"h2"},"Injector")),(0,s.kt)("p",null,"To create an ",(0,s.kt)("inlineCode",{parentName:"p"},"Injector")," we need to provide some DI modules. But we only have arbitrary classes with ",(0,s.kt)("inlineCode",{parentName:"p"},"@Provides"),"-methods."),(0,s.kt)("p",null,"We can use ",(0,s.kt)(i.Z,{url:"/core-inject/src/main/java/io/activej/inject/module/ModuleBuilder.java",mdxType:"Githublink"},(0,s.kt)("inlineCode",{parentName:"p"},"ModuleBuilder"))," class to create a module based on those arbitrary classes.\n",(0,s.kt)("inlineCode",{parentName:"p"},"ModuleBuilder")," has multiple ",(0,s.kt)("inlineCode",{parentName:"p"},"scan()")," methods that can be used to scan a class or an instance and collect providers. The whole class hierarchy is scanned, so providers defined in superclasses\nwould also be picked up by ",(0,s.kt)("inlineCode",{parentName:"p"},"scan()"),"."),(0,s.kt)("p",null,"Here is how we create an ",(0,s.kt)("inlineCode",{parentName:"p"},"Injector"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/ClassScanExample.java tag=REGION_3",url:"/examples/core/inject-2/src/main/java/ClassScanExample.java",tag:"REGION_3"},'public static void main(String[] args) {\n  Injector injector = Injector.of(\n      ModuleBuilder.create()\n          .scan(StaticProviders.class)\n          .scan(new MixedProviders("example.com"))\n          .build()\n  );\n\n  DataSource dataSource = injector.getInstance(DataSource.class);\n  System.out.println(dataSource.queryData());\n}\n')),(0,s.kt)("p",null,"For ",(0,s.kt)("inlineCode",{parentName:"p"},"StaticProviders")," class that contains only static providers we do not need an instance of a class. That is why we only pass a class to the ",(0,s.kt)("inlineCode",{parentName:"p"},"scan()")," method.\nAlternatively, ",(0,s.kt)("inlineCode",{parentName:"p"},"MixedProviders")," class also contains a non-static provider method so we need to pass an instance of ",(0,s.kt)("inlineCode",{parentName:"p"},"MixedProviders")," to the ",(0,s.kt)("inlineCode",{parentName:"p"},"scan()")," method."),(0,s.kt)("p",null,"All of the collected providers form a new ",(0,s.kt)("inlineCode",{parentName:"p"},"Module")," that is then being passed to the ",(0,s.kt)("inlineCode",{parentName:"p"},"Injcetor"),"."),(0,s.kt)("p",null,"You can find example sources on ",(0,s.kt)(o.Z,{href:"https://github.com/activej/activej/tree/{{currentVersion}}-examples/examples/core/inject-2/src/main/java/ClassScanExample.java",mdxType:"DynamicLink"},"Github")))}v.isMDXComponent=!0},18674:function(e){e.exports=function(e){return function(n){return null==e?void 0:e[n]}}},24626:function(e,n,a){var t=a(77813),r=Object.prototype,s=r.hasOwnProperty;e.exports=function(e,n,a,i){return void 0===e||t(e,r[a])&&!s.call(i,a)?n:e}},89464:function(e,n,a){var t=a(18674)({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});e.exports=t},31994:function(e){var n={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"};e.exports=function(e){return"\\"+n[e]}},79865:function(e){e.exports=/<%-([\s\S]+?)%>/g},76051:function(e){e.exports=/<%([\s\S]+?)%>/g},5712:function(e){e.exports=/<%=([\s\S]+?)%>/g},29018:function(e,n,a){var t=a(98363),r=a(21463),s=a(81704),i=r((function(e,n,a,r){t(n,s(n),e,r)}));e.exports=i},9591:function(e,n,a){var t=a(96874),r=a(5976),s=a(64647),i=r((function(e,n){try{return t(e,void 0,n)}catch(a){return s(a)?a:new Error(a)}}));e.exports=i},7187:function(e,n,a){var t=a(89464),r=a(79833),s=/[&<>"']/g,i=RegExp(s.source);e.exports=function(e){return(e=r(e))&&i.test(e)?e.replace(s,t):e}},64647:function(e,n,a){var t=a(44239),r=a(37005),s=a(68630);e.exports=function(e){if(!r(e))return!1;var n=t(e);return"[object Error]"==n||"[object DOMException]"==n||"string"==typeof e.message&&"string"==typeof e.name&&!s(e)}},41106:function(e,n,a){var t=a(29018),r=a(9591),s=a(47415),i=a(24626),o=a(31994),c=a(64647),l=a(16612),d=a(3674),p=a(5712),u=a(15835),m=a(79833),v=/\b__p \+= '';/g,h=/\b(__p \+=) '' \+/g,g=/(__e\(.*?\)|\b__t\)) \+\n'';/g,j=/[()=,{}\[\]\/\s]/,f=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,k=/($^)/,b=/['\n\r\u2028\u2029\\]/g,x=Object.prototype.hasOwnProperty;e.exports=function(e,n,a){var N=u.imports._.templateSettings||u;a&&l(e,n,a)&&(n=void 0),e=m(e),n=t({},n,N,i);var C,_,S=t({},n.imports,N.imports,i),w=d(S),y=s(S,w),I=0,P=n.interpolate||k,E="__p += '",M=RegExp((n.escape||k).source+"|"+P.source+"|"+(P===p?f:k).source+"|"+(n.evaluate||k).source+"|$","g"),D=x.call(n,"sourceURL")?"//# sourceURL="+(n.sourceURL+"").replace(/\s/g," ")+"\n":"";e.replace(M,(function(n,a,t,r,s,i){return t||(t=r),E+=e.slice(I,i).replace(b,o),a&&(C=!0,E+="' +\n__e("+a+") +\n'"),s&&(_=!0,E+="';\n"+s+";\n__p += '"),t&&(E+="' +\n((__t = ("+t+")) == null ? '' : __t) +\n'"),I=i+n.length,n})),E+="';\n";var O=x.call(n,"variable")&&n.variable;if(O){if(j.test(O))throw new Error("Invalid `variable` option passed into `_.template`")}else E="with (obj) {\n"+E+"\n}\n";E=(_?E.replace(v,""):E).replace(h,"$1").replace(g,"$1;"),E="function("+(O||"obj")+") {\n"+(O?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(C?", __e = _.escape":"")+(_?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+E+"return __p\n}";var R=r((function(){return Function(w,D+"return "+E).apply(void 0,y)}));if(R.source=E,c(R))throw R;return R}},15835:function(e,n,a){var t=a(7187),r={escape:a(79865),evaluate:a(76051),interpolate:a(5712),variable:"",imports:{_:{escape:t}}};e.exports=r}}]);
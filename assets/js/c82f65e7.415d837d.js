(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[6105],{3905:function(e,t,r){"use strict";r.r(t),r.d(t,{MDXContext:function(){return c},MDXProvider:function(){return m},mdx:function(){return v},useMDXComponents:function(){return d},withMDXComponents:function(){return p}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){return function(t){var r=d(t.components);return n.createElement(e,a({},t,{components:r}))}},d=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},m=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(r),m=o,f=p["".concat(i,".").concat(m)]||p[m]||u[m]||a;return r?n.createElement(f,s(s({ref:t},c),{},{components:r})):n.createElement(f,s({ref:t},c))}));function v(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},77815:function(e,t,r){"use strict";var n=r(95318).default;t.Z=void 0;n(r(67294));var o=n(r(39962)),a=function(e){var t=e.name,r=(0,o.default)().siteConfig;if(!t)throw new Error("Variable name is required");if(void 0===r.customFields[t])throw new Error("Variable "+t+" not exist");return r.customFields[t]};t.Z=a},67715:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var n=r(22122),o=r(19756),a=(r(67294),r(3905)),i=r(77815),s=["components"],l={slug:"/fs"},c={unversionedId:"fs/overview",id:"fs/overview",isDocsHomePage:!1,title:"Overview",description:"ActiveJ FS is a lightweight asynchronous Java library that provides a tiny abstraction on top of common file operations. It provides upload, download, append, list, copy, move, delete, and other methods for operating with local, remote or distributed storage.",source:"@site/docs/fs/overview.mdx",sourceDirName:"fs",slug:"/fs",permalink:"/fs",version:"current",frontMatter:{slug:"/fs"},sidebar:"docs",previous:{title:"Memcached-like Application",permalink:"/rpc/memcached-like-application"},next:{title:"Examples",permalink:"/fs/examples"}},p=[{value:"Why ActiveJ FS?",id:"why-activej-fs",children:[]},{value:"Where ActiveJ FS can be used?",id:"where-activej-fs-can-be-used",children:[]},{value:"Streaming file access",id:"streaming-file-access",children:[]},{value:"Add ActiveJ FS to your project",id:"add-activej-fs-to-your-project",children:[]}],d={toc:p};function m(e){var t=e.components,r=(0,o.default)(e,s);return(0,a.mdx)("wrapper",(0,n.default)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"ActiveJ FS is a lightweight asynchronous Java library that provides a tiny abstraction on top of common file operations. It provides upload, download, append, list, copy, move, delete, and other methods for operating with local, remote or distributed storage."),(0,a.mdx)("h2",{id:"why-activej-fs"},"Why ActiveJ FS?"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Asynchronous file system"),(0,a.mdx)("li",{parentName:"ul"},"Lightweight by design"),(0,a.mdx)("li",{parentName:"ul"},"Intuitive API that consists of well-known file operations"),(0,a.mdx)("li",{parentName:"ul"},"Supports atomic file uploads"),(0,a.mdx)("li",{parentName:"ul"},"Support for client-server communication using custom binary protocol as well as HTTP protocol"),(0,a.mdx)("li",{parentName:"ul"},"Can be launched as a distributed file system cluster")),(0,a.mdx)("h2",{id:"where-activej-fs-can-be-used"},"Where ActiveJ FS can be used?"),(0,a.mdx)("p",null,"There are several ActiveJ FS implementations:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Local ActiveJ FS")," designed for working with file systems located on a single machine. Ideal to implement a ",(0,a.mdx)("strong",{parentName:"li"},"local file storage for your application"),", for example database storage, backup data storage, local logs storage, etc."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Client/Server implementations")," for operating with files that are stored remotely. This implementation supports two protocols:",(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"Custom ",(0,a.mdx)("strong",{parentName:"li"},"TCP-based binary protocol")," with zero overhead. Resembles FTP, but simpler and more efficient."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"HTTP protocol")," that allows to define a REST API. It also provides third-party clients like browsers access remote ActiveJ FS servers."))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Cluster ActiveJ FS")," is designed for distributed big data workload. It's optimized for processing large immutable datasets or append-only files. Cluster ActiveJ FS was intentionally made ",(0,a.mdx)("strong",{parentName:"li"},"not POSIX-compilant")," and works only with ",(0,a.mdx)("strong",{parentName:"li"},"immutable files"),". In this way the whole system is simple, lightweight and resilient to server or network failures. Also, this approach allows to avoid the overhead of master-slave architecture and synchronization of mutable files. With ActiveJ FS you can create distributed, scalable P2P file systems with built-in support for rebalancing, failover, and scalability."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"ActiveJ FS Adapters")," enable filtering, mounting, transforming file names, adding and removing prefixes, subdirectories, etc.")),(0,a.mdx)("h2",{id:"streaming-file-access"},"Streaming file access"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"upload()")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"download()")," operations utilize ",(0,a.mdx)("a",{parentName:"p",href:"/async-io/csp"},"CSP")," module so files are uploaded/downloaded using asynchronous data streams."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},'String filename = "hello.txt";\n\nEventloop eventloop = Eventloop.create().withCurrentThread();\nExecutor executor = Executors.newSingleThreadExecutor();\n\nLocalActiveFs fs = LocalActiveFs.create(eventloop, executor, Paths.get("/tmp/file-storage"));\n\nfs.start()\n        .then(() -> ChannelSupplier.of(ByteBufStrings.wrapAscii("Hello World"))\n                .streamTo(fs.upload(filename)))\n        .then(() -> fs.download(filename))\n        .map(supplier -> supplier.map(buf -> buf.asString(StandardCharsets.US_ASCII)))\n        .then(supplier -> supplier.streamTo(ChannelConsumer.ofConsumer(System.out::println)));\n\neventloop.run();\n')),(0,a.mdx)("h2",{id:"add-activej-fs-to-your-project"},"Add ActiveJ FS to your project"),(0,a.mdx)("p",null,"You can add ActiveJ FS to your project by importing its Maven repository.\nThese docs cover the most recent release of ActiveJ FS ",(0,a.mdx)("strong",{parentName:"p"},(0,a.mdx)(i.Z,{name:"currentVersion",mdxType:"Variable"}))," (see on ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/activej/activej/tree/master/core-fs"},"Github")," or ",(0,a.mdx)("a",{parentName:"p",href:"https://mvnrepository.com/artifact/io.activej/activej-fs"},"Maven"),")."))}m.isMDXComponent=!0}}]);
(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[4162],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,v=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(v,o(o({ref:t},u),{},{components:n})):a.createElement(v,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},77618:function(e,t,n){"use strict";var a=n(67294),r=n(39962);t.Z=function(e){var t=e.url,n=e.text,i=e.isInline,o=void 0===i||i,c=e.children,l=(0,r.Z)().siteConfig;return a.createElement("a",{style:o?{}:{display:"block",marginBottom:"16px"},href:l.customFields.githubUrl+"/"+l.customFields.githubBranch+t,target:"_blank"},n||c)}},22647:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return m}});var a=n(22122),r=n(19756),i=(n(67294),n(3905)),o=n(77618),c=["components"],l={sidebar_label:"Quick Start"},s="Quick Start",u={unversionedId:"inject/quick-start",id:"inject/quick-start",isDocsHomePage:!1,title:"Quick Start",description:"In this tutorial we will create an Injector out of multiple DI modules.",source:"@site/docs/inject/quick-start.mdx",sourceDirName:"inject",slug:"/inject/quick-start",permalink:"/inject/quick-start",version:"current",frontMatter:{sidebar_label:"Quick Start"},sidebar:"docs",previous:{title:"Overview",permalink:"/inject"},next:{title:"Injecting instances",permalink:"/inject/injecting-instances"}},p=[{value:"Helper classes",id:"helper-classes",children:[]},{value:"Modules",id:"modules",children:[]},{value:"Injector",id:"injector",children:[]}],d={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,c);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quick-start"},"Quick Start"),(0,i.kt)("p",null,"In this tutorial we will create an ",(0,i.kt)(o.Z,{url:"/core-inject/src/main/java/io/activej/inject/Injector.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"p"},"Injector"))," out of multiple DI modules.\nThen we will use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Injector")," to create an instance of some service.\nWe will use annotation-based approach for defining modules as it is more readable."),(0,i.kt)("h2",{id:"helper-classes"},"Helper classes"),(0,i.kt)("p",null,"For the tutorial we will need 2 helper classes. A ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSource")," class that represents source of some data and a ",(0,i.kt)("inlineCode",{parentName:"p"},"Service")," class which uses data retrieved from a data source for some processing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultiModuleExample.java tag=REGION_4",url:"/examples/core/inject-2/src/main/java/MultiModuleExample.java",tag:"REGION_4"},'public static final class DataSource {\n  private final InetSocketAddress address;\n  private final String dbName;\n\n  @Inject\n  public DataSource(InetSocketAddress address, String dbName) {\n    this.address = address;\n    this.dbName = dbName;\n  }\n\n  public String queryData() {\n    System.out.printf("Querying %s:%s for data\\n", address, dbName);\n    return "data";\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultiModuleExample.java tag=REGION_5",url:"/examples/core/inject-2/src/main/java/MultiModuleExample.java",tag:"REGION_5"},"public static final class Service {\n  private final DataSource dataSource;\n\n  public Service(DataSource dataSource) {\n    this.dataSource = dataSource;\n  }\n\n  public void process() {\n    String data = dataSource.queryData();\n    System.out.printf(\"Processing data: '%s'\\n\", data);\n  }\n}\n")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Notice the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Inject")," annotation on the ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSource")," constructor. It will be explained later."))),(0,i.kt)("h2",{id:"modules"},"Modules"),(0,i.kt)("p",null,"We will define two different modules: one for the configuration and another one for the service itself."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultiModuleExample.java tag=REGION_1",url:"/examples/core/inject-2/src/main/java/MultiModuleExample.java",tag:"REGION_1"},'public static class ConfigModule extends AbstractModule {\n  @Provides\n  InetSocketAddress inetSocketAddress() {\n    return new InetSocketAddress(1234);\n  }\n\n  @Provides\n  String dbName() {\n    return "exampleDB";\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ConfigModule")," provides both the address for the ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSource")," as well as a database name."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultiModuleExample.java tag=REGION_2",url:"/examples/core/inject-2/src/main/java/MultiModuleExample.java",tag:"REGION_2"},"public static class ServiceModule extends AbstractModule {\n  @Provides\n  Service service(DataSource dataSource) {\n    return new Service(dataSource);\n  }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceModule")," only provides the ",(0,i.kt)("inlineCode",{parentName:"p"},"Service")," itself that requires ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSource")," to be instantiated."),(0,i.kt)("h2",{id:"injector"},"Injector"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Injector")," is creted out of two previously defined modules. After that, an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"Service")," is required from the injector."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultiModuleExample.java tag=REGION_3",url:"/examples/core/inject-2/src/main/java/MultiModuleExample.java",tag:"REGION_3"},"public static void main(String[] args) {\n  Injector injector = Injector.of(new ConfigModule(), new ServiceModule());\n  Service service = injector.getInstance(Service.class);\n  service.process();\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Service")," requires ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSource")," to be instantiated, but we have not provided ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSource")," explicitly in any of the modules.\nThanks to the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Inject")," annotation on ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSource"),"'s constructor, injector injected required dependencies and instantiated the ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSource"),"."),(0,i.kt)("p",null,"The output of ",(0,i.kt)("inlineCode",{parentName:"p"},"service.process()")," call is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Querying 0.0.0.0/0.0.0.0:1234:exampleDB for data\nProcessing data: 'data'\n")),(0,i.kt)("p",null,"You can find example sources on ",(0,i.kt)(o.Z,{text:"GitHub",url:"/examples/core/inject-2/src/main/java/MultiModuleExample.java",mdxType:"Githublink"})))}m.isMDXComponent=!0}}]);
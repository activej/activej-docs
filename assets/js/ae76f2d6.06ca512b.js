(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[77],{3905:function(e,t,a){"use strict";a.r(t),a.d(t,{MDXContext:function(){return p},MDXProvider:function(){return u},mdx:function(){return x},useMDXComponents:function(){return d},withMDXComponents:function(){return s}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){return function(t){var a=d(t.components);return n.createElement(e,l({},t,{components:a}))}},d=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),s=d(a),u=r,h=s["".concat(o,".").concat(u)]||s[u]||c[u]||l;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function x(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=h;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},77618:function(e,t,a){"use strict";var n=a(95318).default;t.Z=void 0;var r=n(a(67294)),l=n(a(39962)),o=function(e){var t=e.url,a=e.text,n=e.isInline,o=void 0===n||n,i=e.children,m=(0,l.default)().siteConfig;return r.default.createElement("a",{style:o?{}:{display:"block",marginBottom:"16px"},href:m.customFields.githubUrl+"/"+m.customFields.githubBranch+t,target:"_blank"},a||i)};t.Z=o},77815:function(e,t,a){"use strict";var n=a(95318).default;t.Z=void 0;n(a(67294));var r=n(a(39962)),l=function(e){var t=e.name,a=(0,r.default)().siteConfig;if(!t)throw new Error("Variable name is required");if(void 0===a.customFields[t])throw new Error("Variable "+t+" not exist");return a.customFields[t]};t.Z=l},89188:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return p},metadata:function(){return s},toc:function(){return d},default:function(){return c}});var n=a(22122),r=a(19756),l=(a(67294),a(3905)),o=a(77618),i=a(77815),m=["components"],p={},s={unversionedId:"http/examples",id:"http/examples",isDocsHomePage:!1,title:"Examples",description:'* Simple "Hello World" Server - simple async server created using',source:"@site/docs/http/examples.mdx",sourceDirName:"http",slug:"/http/examples",permalink:"/http/examples",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Benchmarks",permalink:"/http/benchmarks"},next:{title:"Overview",permalink:"/inject"}},d=[{value:"Simple &quot;Hello World&quot; Server",id:"simple-hello-world-server",children:[]},{value:"&quot;Hello World&quot; Server with pre-defined Launcher",id:"hello-world-server-with-pre-defined-launcher",children:[]},{value:"Custom Server",id:"custom-server",children:[]},{value:"Multithreaded Server Example",id:"multithreaded-server-example",children:[]},{value:"Request Parameters Example",id:"request-parameters-example",children:[]},{value:"Static Servlet Example",id:"static-servlet-example",children:[]},{value:"Servlet Decorator Example",id:"servlet-decorator-example",children:[]},{value:"Routing Servlet Example",id:"routing-servlet-example",children:[]},{value:"Dynamic Routing Examples",id:"dynamic-routing-examples",children:[]},{value:"Routing Servlet Multibinder",id:"routing-servlet-multibinder",children:[]},{value:"Blocking Servlet Example",id:"blocking-servlet-example",children:[]},{value:"File Upload Example",id:"file-upload-example",children:[]},{value:"Client Example",id:"client-example",children:[]},{value:"Multipart Data Handling Example",id:"multipart-data-handling-example",children:[]},{value:"WebSocket Pong Server",id:"websocket-pong-server",children:[]},{value:"WebSocket Ping Client",id:"websocket-ping-client",children:[]}],u={toc:d};function c(e){var t=e.components,a=(0,r.default)(e,m);return(0,l.mdx)("wrapper",(0,n.default)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#simple-hello-world-server"},'Simple "Hello World" Server')," - simple async server created using ",(0,l.mdx)(o.Z,{text:"AsyncHttpServer",url:"/core-http/src/main/java/io/activej/http/AsyncHttpServer.java",mdxType:"Githublink"})),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#hello-world-server-with-pre-defined-launcher"},'"Hello World" Server with Pre-defined Launcher')," - HTTP module provides you with some pre-defined launchers, which are extremely simple to use to create servers."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#custom-server"},"Custom Server")," - example of creating a server from scratch using ",(0,l.mdx)("a",{parentName:"li",href:"/boot/launcher"},(0,l.mdx)("strong",{parentName:"a"},"Launcher")),"."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#multithreaded-server-example"},"Multithreaded Server Example")," - HTTP multithreaded server example."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#request-parameters-example"},"Request Parameters Example")," - example of processing requests with parameter."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#static-servlet-example"},"Static Servlet Example")," - example of ",(0,l.mdx)(o.Z,{text:"AsyncHttpServer",url:"/core-http/src/main/java/io/activej/http/StaticServlet.java",mdxType:"Githublink"})," utilizing"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#servlet-decorator-example"},"Servlet Decorator Example")," - example of using ",(0,l.mdx)("inlineCode",{parentName:"li"},"AsyncServletDecorator"),", a wrapper over ",(0,l.mdx)("inlineCode",{parentName:"li"},"AsyncServlet"),"."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#routing-servlet-example"},"Routing Servlet Example")," - example of ",(0,l.mdx)("inlineCode",{parentName:"li"},"RoutingServlet")," usage for creating servlet tree."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#dynamic-routing-examples"},"Dynamic Routing Examples")," - various examples of routing based on host, cookie, mime-type, etc."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#routing-servlet-multibinder"},"Routing Servlet Multibinder")," - example of using ",(0,l.mdx)("strong",{parentName:"li"},"Multibinder")," to merge conflicting ",(0,l.mdx)("inlineCode",{parentName:"li"},"RoutingServlet"),"s"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#blocking-servlet-example"},"Blocking Servlet Example")," - example of handling complex operations on server in a new thread."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#file-upload-example"},"File Upload Example")," - example of uploading a file from client local storage to server."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#client-example"},"Client Example")," - creating an HTTP client utilizing ",(0,l.mdx)("strong",{parentName:"li"},"Launcher"),"."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#multipart-data-handling-example"},"Multipart Data Handling Example")," - simple server that handles ",(0,l.mdx)("strong",{parentName:"li"},"Multipart/form-data")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#websocket-pong-server"},"WebSocket Echo Server Example")," - creating a basic server with WebSocket communication protocol."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#websocket-ping-client"},"WebSocket Client Example")," - setting up a client with WebSocket communication protocol.")),(0,l.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,l.mdx)("h5",{parentName:"div"},(0,l.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,l.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.mdx)("div",{parentName:"div",className:"admonition-content"},(0,l.mdx)("p",{parentName:"div"},"To run the examples, you need to clone ActiveJ from GitHub:"),(0,l.mdx)("pre",{parentName:"div"},(0,l.mdx)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/activej/activej\n")),(0,l.mdx)("p",{parentName:"div"},"And import it as a Maven project. Check out tag ",(0,l.mdx)("strong",{parentName:"p"},(0,l.mdx)(i.Z,{name:"currentVersion",mdxType:"Variable"})),". Before running the examples, build the project. These examples are located at ",(0,l.mdx)("inlineCode",{parentName:"p"},"activej/examples/core/http")))),(0,l.mdx)("h3",{id:"simple-hello-world-server"},'Simple "Hello World" Server'),(0,l.mdx)(o.Z,{text:"HelloWorldExample",url:"/examples/core/http/src/main/java/HelloWorldExample.java",mdxType:"Githublink"})," uses **AsyncHttpServer** class of HTTP module. It is a non-blocking server, which works in an eventloop:",(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/HelloWorldExample.java tag=REGION_1",url:"/examples/core/http/src/main/java/HelloWorldExample.java",tag:"REGION_1"},'\npublic static void main(String[] args) throws IOException {\n  Eventloop eventloop = Eventloop.create();\n  AsyncHttpServer server = AsyncHttpServer.create(eventloop,\n      request -> HttpResponse.ok200()\n          .withPlainText("Hello world!"))\n      .withListenPort(8080);\n\n  server.listen();\n\n  System.out.println("Server is running");\n  System.out.println("You can connect from browser by visiting \'http://localhost:8080/\'");\n\n  eventloop.run();\n}\n')),(0,l.mdx)("p",null,"This server runs in the provided eventloop and waits for connections on port ",(0,l.mdx)("inlineCode",{parentName:"p"},"8080"),". When server receives a request, it sends back a ",(0,l.mdx)("strong",{parentName:"p"},"Promise")," of greeting response."),(0,l.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,l.mdx)("h5",{parentName:"div"},(0,l.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,l.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.mdx)("div",{parentName:"div",className:"admonition-content"},(0,l.mdx)("p",{parentName:"div"},"To add support for HTTPS to ",(0,l.mdx)("inlineCode",{parentName:"p"},"AsyncHttpServer")," you need to call ",(0,l.mdx)("inlineCode",{parentName:"p"},"withSslListenAddress")," or ",(0,l.mdx)("inlineCode",{parentName:"p"},"withSslListenAddresses")," method and pass ",(0,l.mdx)("inlineCode",{parentName:"p"},"SSLContext"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"Executor"),", and a port or address for the server to be listening on."))),(0,l.mdx)("p",null,"To check how the example works, open your favorite browser and go to ",(0,l.mdx)("a",{parentName:"p",href:"http://localhost:8080"},"localhost:8080"),"."),(0,l.mdx)(o.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/HelloWorldExample.java",mdxType:"Githublink"}),(0,l.mdx)("h3",{id:"hello-world-server-with-pre-defined-launcher"},'"Hello World" Server with pre-defined Launcher'),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Launcher"),"s manage application lifecycle and allow to create applications in a simple manner:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/getting-started/src/main/java/HttpHelloWorldExample.java tag=EXAMPLE",url:"/examples/tutorials/getting-started/src/main/java/HttpHelloWorldExample.java",tag:"EXAMPLE"},'public final class HttpHelloWorldExample extends HttpServerLauncher {\n  @Provides\n  AsyncServlet servlet() {\n    return request -> HttpResponse.ok200().withPlainText("Hello World");\n  }\n\n  public static void main(String[] args) throws Exception {\n    Launcher launcher = new HttpHelloWorldExample();\n    launcher.launch(args);\n  }\n}\n')),(0,l.mdx)("p",null,"All you need to do is provide a servlet which processes the requests and launch the application. ",(0,l.mdx)(o.Z,{text:"HttpServerLauncher",url:"/launchers/http/src/main/java/io/activej/launchers/http/HttpServerLauncher.java",mdxType:"Githublink"}),"  will take care of everything else."),(0,l.mdx)(o.Z,{text:"See full example on GitHub",url:"/examples/tutorials/getting-started/src/main/java/HttpHelloWorldExample.java",mdxType:"Githublink"}),(0,l.mdx)("h3",{id:"custom-server"},"Custom Server"),(0,l.mdx)("p",null,"With ",(0,l.mdx)("strong",{parentName:"p"},"Launcher")," you can easily create HTTP servers from scratch. In this example we're creating a simple server which\nsends a greeting:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/CustomHttpServerExample.java tag=EXAMPLE",url:"/examples/core/http/src/main/java/CustomHttpServerExample.java",tag:"EXAMPLE"},'public final class CustomHttpServerExample extends Launcher {\n  private static final int PORT = 8080;\n\n  @Provides\n  Eventloop eventloop() {\n    return Eventloop.create();\n  }\n\n  @Provides\n  AsyncServlet servlet() {\n    return request -> HttpResponse.ok200()\n        .withPlainText("Hello from HTTP server");\n  }\n\n  @Provides\n  @Eager\n  AsyncHttpServer server(Eventloop eventloop, AsyncServlet servlet) {\n    return AsyncHttpServer.create(eventloop, servlet).withListenPort(PORT);\n  }\n\n  @Override\n  protected Module getModule() {\n    return ServiceGraphModule.create();\n  }\n\n  @Override\n  protected void run() throws Exception {\n    logger.info("HTTP Server is now available at http://localhost:" + PORT);\n    awaitShutdown();\n  }\n\n  public static void main(String[] args) throws Exception {\n    Launcher launcher = new CustomHttpServerExample();\n    launcher.launch(args);\n  }\n}\n')),(0,l.mdx)("p",null,"First, we provide an eventloop, a servlet, and an async server itself. Then, we override ",(0,l.mdx)("em",{parentName:"p"},"getModule")," method to provide\nour server with configs and ",(0,l.mdx)(o.Z,{text:"ServiceGraphModule",url:"/boot-servicegraph/src/main/java/io/activej/service/ServiceGraphModule.java",mdxType:"Githublink"})," for building dependency graph of services."),(0,l.mdx)("p",null,"Finally, we override ",(0,l.mdx)("inlineCode",{parentName:"p"},"Launcher")," main method ",(0,l.mdx)("inlineCode",{parentName:"p"},"run()")," and then define ",(0,l.mdx)("inlineCode",{parentName:"p"},"main")," method of the example."),(0,l.mdx)("p",null,"To check how the example works, open your favorite browser and go to ",(0,l.mdx)("a",{parentName:"p",href:"http://localhost:8080"},"localhost:8080")),(0,l.mdx)(o.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/CustomHttpServerExample.java",mdxType:"Githublink"}),(0,l.mdx)("h3",{id:"multithreaded-server-example"},"Multithreaded Server Example"),(0,l.mdx)("p",null,"In this example we are using pre-defined ",(0,l.mdx)(o.Z,{text:"MultithreadedHttpServerLauncher",url:"/launchers/http/src/main/java/io/activej/launchers/http/MultithreadedHttpServerLauncher.java",mdxType:"Githublink"})," to create a multithreaded HTTP server. By\ndefault, there will be 4 worker servlets with ",(0,l.mdx)("em",{parentName:"p"},"workerId"),"s. Each of them sends back a greeting and number of the worker\nthat served the connection:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/MultithreadedHttpServerExample.java tag=EXAMPLE",url:"/examples/core/http/src/main/java/MultithreadedHttpServerExample.java",tag:"EXAMPLE"},'public final class MultithreadedHttpServerExample extends MultithreadedHttpServerLauncher {\n  @Provides\n  @Worker\n  AsyncServlet servlet(@WorkerId int workerId) {\n    return request -> HttpResponse.ok200()\n        .withPlainText("Hello from worker server #" + workerId + "\\n");\n  }\n\n  public static void main(String[] args) throws Exception {\n    MultithreadedHttpServerExample example = new MultithreadedHttpServerExample();\n    example.launch(args);\n  }\n}\n')),(0,l.mdx)("p",null,"To check how the example works, open your favorite browser and go to ",(0,l.mdx)("a",{parentName:"p",href:"http://localhost:8080"},"localhost:8080")),(0,l.mdx)(o.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/MultithreadedHttpServerExample.java",mdxType:"Githublink"}),(0,l.mdx)("h3",{id:"request-parameters-example"},"Request Parameters Example"),(0,l.mdx)("p",null,"This example represents requests with parameters which are received with methods ",(0,l.mdx)("inlineCode",{parentName:"p"},"getPostParameters")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"getQueryParameter")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/HttpRequestParametersExample.java tag=REGION_1",url:"/examples/core/http/src/main/java/HttpRequestParametersExample.java",tag:"REGION_1"},'@Provides\nAsyncServlet servlet(Executor executor) {\n  return RoutingServlet.create()\n      .map(POST, "/hello", loadBody()\n          .serve(request -> {\n            String name = request.getPostParameters().get("name");\n            return HttpResponse.ok200()\n                .withHtml("<h1><center>Hello from POST, " + name + "!</center></h1>");\n          }))\n      .map(GET, "/hello", request -> {\n        String name = request.getQueryParameter("name");\n        return HttpResponse.ok200()\n            .withHtml("<h1><center>Hello from GET, " + name + "!</center></h1>");\n      })\n      .map("/*", StaticServlet.ofClassPath(executor, RESOURCE_DIR)\n          .withIndexHtml());\n}\n')),(0,l.mdx)("p",null,"To check how the example works, open your favorite browser and go to ",(0,l.mdx)("a",{parentName:"p",href:"http://localhost:8080"},"localhost:8080")),(0,l.mdx)(o.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/HttpRequestParametersExample.java",mdxType:"Githublink"}),(0,l.mdx)("h3",{id:"static-servlet-example"},"Static Servlet Example"),(0,l.mdx)("p",null,"Shows how to set up and utilize ",(0,l.mdx)(o.Z,{text:"StaticServlet",url:"/examples/core/http/src/main/java/HttpRequestParametersExample.java",mdxType:"Githublink"})," to create servlets with some static content, in our case it will get\ncontent from ",(0,l.mdx)("inlineCode",{parentName:"p"},"static/site")," directory."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/StaticServletExample.java tag=EXAMPLE",url:"/examples/core/http/src/main/java/StaticServletExample.java",tag:"EXAMPLE"},'@Provides\nAsyncServlet servlet(Executor executor) {\n  return StaticServlet.ofClassPath(executor, "static/site")\n      .withIndexHtml();\n}\n')),(0,l.mdx)("p",null,"To check how the example works, open your favorite browser and go to ",(0,l.mdx)("a",{parentName:"p",href:"http://localhost:8080"},"localhost:8080")),(0,l.mdx)(o.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/StaticServletExample.java",mdxType:"Githublink"}),(0,l.mdx)("h3",{id:"servlet-decorator-example"},"Servlet Decorator Example"),(0,l.mdx)("p",null,"Shows basic functionality of ",(0,l.mdx)(o.Z,{text:"AsyncServletDecorator",url:"/core-http/src/main/java/io/activej/http/AsyncServletDecorator.java",mdxType:"Githublink"})," class. It creates a wrap over ",(0,l.mdx)("inlineCode",{parentName:"p"},"AsyncServlet"),"s and adds behaviour for particular events, for example, exception handling or\nprocessing received responses.\nIn the example, we made loading of request body default on the servlet using ",(0,l.mdx)("em",{parentName:"p"},"loadBody()"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/ServletDecoratorExample.java tag=REGION_1",url:"/examples/core/http/src/main/java/ServletDecoratorExample.java",tag:"REGION_1"},'@Provides\nAsyncServlet servlet(Executor executor) {\n  return loadBody().serve(\n      RoutingServlet.create()\n          .map(GET, "/", StaticServlet.ofClassPath(executor, "static/wrapper")\n              .withMappingTo("page.html"))\n          .map(POST, "/", request -> {\n            String text = request.getPostParameter("text");\n            if (text == null) {\n              return HttpResponse.redirect302("/");\n            }\n            return HttpResponse.ok200().withPlainText("Message: " + text);\n          })\n          .map(GET, "/failPage", request -> {\n            throw new RuntimeException("fail");\n          })\n          .then(catchRuntimeExceptions())\n          .then(mapException(e -> HttpResponse.ofCode(404).withPlainText("Error: " + e))));\n}\n')),(0,l.mdx)("p",null,"To check how the example works, open your favorite browser and go to ",(0,l.mdx)("a",{parentName:"p",href:"http://localhost:8080"},"localhost:8080")),(0,l.mdx)(o.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/ServletDecoratorExample.java",mdxType:"Githublink"}),(0,l.mdx)("h3",{id:"routing-servlet-example"},"Routing Servlet Example"),(0,l.mdx)("p",null,"Represents how to set up servlet routing tree. This process resembles Express approach. To add a route to a ",(0,l.mdx)(o.Z,{text:"RoutingServlet",url:"/examples/core/http/src/main/java/ServletDecoratorExample.java",mdxType:"Githublink"}),", you should use method ",(0,l.mdx)("inlineCode",{parentName:"p"},"map"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletExample.java tag=REGION_2",url:"/examples/core/http/src/main/java/RoutingServletExample.java",tag:"REGION_2"},'.map(GET, "/", request ->\n    HttpResponse.ok200()\n        .withHtml("<h1>Go to some pages</h1>" +\n            "<a href=\\"/path1\\"> Path 1 </a><br>" +\n            "<a href=\\"/path2\\"> Path 2 </a><br>" +\n            "<a href=\\"/user/0\\"> Data for user with ID 0 </a><br>" +\n            "<br>" +\n            "<a href=\\"/path3\\"> Non existent </a>"))\n')),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"method")," (optional) is one of the HTTP methods (",(0,l.mdx)("inlineCode",{parentName:"li"},"GET"),", ",(0,l.mdx)("inlineCode",{parentName:"li"},"POST"),", etc)"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"path")," is the path on the server"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"servlet")," defines the logic of request processing.")),(0,l.mdx)("p",null,"The whole servlet tree will look as follows:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletExample.java tag=REGION_1",url:"/examples/core/http/src/main/java/RoutingServletExample.java",tag:"REGION_1"},'@Provides\nAsyncServlet servlet() {\n  return RoutingServlet.create()\n      //[START REGION_2]\n      .map(GET, "/", request ->\n          HttpResponse.ok200()\n              .withHtml("<h1>Go to some pages</h1>" +\n                  "<a href=\\"/path1\\"> Path 1 </a><br>" +\n                  "<a href=\\"/path2\\"> Path 2 </a><br>" +\n                  "<a href=\\"/user/0\\"> Data for user with ID 0 </a><br>" +\n                  "<br>" +\n                  "<a href=\\"/path3\\"> Non existent </a>"))\n      //[END REGION_2]\n      .map(GET, "/path1", request ->\n          HttpResponse.ok200()\n              .withHtml("<h1>Hello from the first path!</h1>" +\n                  "<a href=\\"/\\">Go home</a>"))\n      .map(GET, "/path2", request ->\n          HttpResponse.ok200()\n              .withHtml("<h1>Hello from the second path!</h1>" +\n                  "<a href=\\"/\\">Go home</a>"))\n\n      //[START REGION_3]\n      .map(GET, "/user/:user_id", request -> {\n        String userId = request.getPathParameter("user_id");\n        return HttpResponse.ok200()\n            .withHtml("<h1>You have requested data for user with ID: " + userId + "</h1>" +\n                "<h3>Try changing URL after <i>\'.../user/\'</i> to get data for users with different IDs</h3>");\n      })\n      //[END REGION_3]\n\n      //[START REGION_4]\n      .map("/*", request ->\n          HttpResponse.ofCode(404)\n              .withHtml("<h1>404</h1><p>Path \'" + request.getRelativePath() + "\' not found</p>" +\n                  "<a href=\\"/\\">Go home</a>"));\n      //[END REGION_4]\n}\n')),(0,l.mdx)("p",null,"You can map path parameters with ",(0,l.mdx)("inlineCode",{parentName:"p"},"/:param")," syntax:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletExample.java tag=REGION_3",url:"/examples/core/http/src/main/java/RoutingServletExample.java",tag:"REGION_3"},'.map(GET, "/user/:user_id", request -> {\n  String userId = request.getPathParameter("user_id");\n  return HttpResponse.ok200()\n      .withHtml("<h1>You have requested data for user with ID: " + userId + "</h1>" +\n          "<h3>Try changing URL after <i>\'.../user/\'</i> to get data for users with different IDs</h3>");\n})\n')),(0,l.mdx)("p",null,"Path parameters can be retrieved by calling ",(0,l.mdx)("inlineCode",{parentName:"p"},"HttpRequest#getPathParameter")," method and passing the name of the path parameter."),(0,l.mdx)("p",null,"You may also use wildcard route ",(0,l.mdx)("inlineCode",{parentName:"p"},"*"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletExample.java tag=REGION_4",url:"/examples/core/http/src/main/java/RoutingServletExample.java",tag:"REGION_4"},'.map("/*", request ->\n    HttpResponse.ofCode(404)\n        .withHtml("<h1>404</h1><p>Path \'" + request.getRelativePath() + "\' not found</p>" +\n            "<a href=\\"/\\">Go home</a>"));\n')),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"*")," states that whichever next path segment is received, it will be processed by this servlet."),(0,l.mdx)("p",null,"To check how the example works, open your favorite browser and go to ",(0,l.mdx)("a",{parentName:"p",href:"http://localhost:8080"},"localhost:8080")),(0,l.mdx)(o.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/RoutingServletExample.java",mdxType:"Githublink"}),(0,l.mdx)("h3",{id:"dynamic-routing-examples"},"Dynamic Routing Examples"),(0,l.mdx)("p",null,"A few examples that demonstrate how to route HTTP requests by some dynamic values rather than by predefined paths:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)(o.Z,{text:"Routing based on host",url:"/examples/core/http/src/main/java/HostRoutingExample.java",mdxType:"Githublink"})),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)(o.Z,{text:"Routing based on MIME type",url:"/examples/core/http/src/main/java/MimeTypeRoutingExample.java",mdxType:"Githublink"})),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)(o.Z,{text:"Routing based on Cookie",url:"/examples/core/http/src/main/java/CookieRoutingExample.java",mdxType:"Githublink"})),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)(o.Z,{text:"Randomized routing",url:"/examples/core/http/src/main/java/DynamicRoutingExample.java",mdxType:"Githublink"}))),(0,l.mdx)("h3",{id:"routing-servlet-multibinder"},"Routing Servlet Multibinder"),(0,l.mdx)("p",null,"Using ",(0,l.mdx)("a",{parentName:"p",href:"/inject"},"Dependency Injection")," you may provide ",(0,l.mdx)("inlineCode",{parentName:"p"},"RoutingServlet"),"s in different modules.\nSuch bindings would result in ",(0,l.mdx)("strong",{parentName:"p"},"DI")," throwing an exception for conflicting keys ",(0,l.mdx)("inlineCode",{parentName:"p"},"RoutingServlet.class"),". However, you may\ninstruct the ",(0,l.mdx)("strong",{parentName:"p"},"DI")," to resolve conflicts by merging ",(0,l.mdx)("inlineCode",{parentName:"p"},"RoutingServlet"),"s into a single ",(0,l.mdx)("inlineCode",{parentName:"p"},"RoutingServlet")," that contains all of\nthe routes specified in other routing servlets."),(0,l.mdx)("p",null,"In the example we declare several modules that provide ",(0,l.mdx)("inlineCode",{parentName:"p"},"RoutingServlet")," with different routes:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletMultibinderExample.java tag=MODULE_A",url:"/examples/core/http/src/main/java/RoutingServletMultibinderExample.java",tag:"MODULE_A"},'private static final class ModuleA extends AbstractModule {\n  @Provides\n  RoutingServlet servlet() {\n    return RoutingServlet.create()\n        .map(GET, "/a", request -> HttpResponse.ok200().withPlainText("Hello from \'/a\' path\\n"))\n        .map(GET, "/b", request -> HttpResponse.ok200().withPlainText("Hello from \'/b\' path\\n"))\n        .map(GET, "/", request -> HttpResponse.ok200().withPlainText("Hello from \'/\' path\\n"));\n  }\n}\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletMultibinderExample.java tag=MODULE_B",url:"/examples/core/http/src/main/java/RoutingServletMultibinderExample.java",tag:"MODULE_B"},'private static final class ModuleB extends AbstractModule {\n  @Provides\n  RoutingServlet servlet() {\n    return RoutingServlet.create()\n        .map(GET, "/a/b", request -> HttpResponse.ok200().withPlainText("Hello from \'/a/b\' path\\n"))\n        .map(GET, "/b/a", request -> HttpResponse.ok200().withPlainText("Hello from \'/b/a\' path\\n"))\n        .map(GET, "/d", request -> HttpResponse.ok200().withPlainText("Hello from \'/d\' path\\n"));\n  }\n}\n')),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletMultibinderExample.java tag=MODULE_C",url:"/examples/core/http/src/main/java/RoutingServletMultibinderExample.java",tag:"MODULE_C"},'private static final class ModuleC extends AbstractModule {\n  @Provides\n  RoutingServlet servlet() {\n    return RoutingServlet.create()\n        .map(GET, "/a/c", request -> HttpResponse.ok200().withPlainText("Hello from \'/a/c\' path\\n"))\n        .map(GET, "/b/c", request -> HttpResponse.ok200().withPlainText("Hello from \'/b/c\' path\\n"))\n        .map(POST, "/d", request -> HttpResponse.ok200().withPlainText("Hello from POST \'/d\' path\\n"));\n  }\n}\n')),(0,l.mdx)("p",null,"Next, we define a ",(0,l.mdx)(o.Z,{text:"Multibinder",url:"/core-inject/src/main/java/io/activej/inject/binding/Multibinder.java",mdxType:"Githublink"}),"\nwhich merges conflicting servlets:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/RoutingServletMultibinderExample.java tag=MULTIBINDER",url:"/examples/core/http/src/main/java/RoutingServletMultibinderExample.java",tag:"MULTIBINDER"},"public static final Multibinder<RoutingServlet> SERVLET_MULTIBINDER = Multibinders.ofBinaryOperator((servlet1, servlet2) ->\n    servlet1.merge(servlet2));\n")),(0,l.mdx)("p",null,"At last, we override ",(0,l.mdx)("inlineCode",{parentName:"p"},"HttpServerLauncher#getBusinesLogicModule")," method to provide a combined DI ",(0,l.mdx)("inlineCode",{parentName:"p"},"Module")," that contains\n",(0,l.mdx)("inlineCode",{parentName:"p"},"ModuleA"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"ModuleB"),", ",(0,l.mdx)("inlineCode",{parentName:"p"},"ModuleC")," as well as an installed ",(0,l.mdx)("inlineCode",{parentName:"p"},"Multibinder")," for DI Key ",(0,l.mdx)("inlineCode",{parentName:"p"},"RoutingServlet.class"),"."),(0,l.mdx)("p",null,"If we launch the example, we can see that there are no conflicts as conflicting servlets where successfully merged together.\nWe may open a web browser and visit any of the specified routes to ensure that routing works correctly:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"http://localhost:8080"},"/")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"http://localhost:8080/a"},"/a")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"http://localhost:8080/a/b"},"/a/b")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"http://localhost:8080/a/c"},"/a/c")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"http://localhost:8080/b"},"/b")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"http://localhost:8080/b/a"},"/b/a")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"http://localhost:8080/b/c"},"/b/c")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"http://localhost:8080/d"},"/d"))),(0,l.mdx)("div",{className:"admonition admonition-warning alert alert--danger"},(0,l.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,l.mdx)("h5",{parentName:"div"},(0,l.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,l.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,l.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,l.mdx)("div",{parentName:"div",className:"admonition-content"},(0,l.mdx)("p",{parentName:"div"},"Note, that if you try to merge RoutingServlets that have identical routes mapped, an exception would be thrown"))),(0,l.mdx)("h3",{id:"blocking-servlet-example"},"Blocking Servlet Example"),(0,l.mdx)("p",null,"Shows how to create a new thread for processing some complex operations on a ",(0,l.mdx)(o.Z,{text:"BlockingServlet",url:"/core-http/src/main/java/io/activej/http/BlockingServlet.java",mdxType:"Githublink"})),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/BlockingServletExample.java tag=EXAMPLE",url:"/examples/core/http/src/main/java/BlockingServletExample.java",tag:"EXAMPLE"},'@Provides\nAsyncServlet servlet(Executor executor) {\n  return RoutingServlet.create()\n      .map("/", request -> HttpResponse.ok200()\n          .withHtml("<a href=\'hardWork\'>Do hard work</a>"))\n      .map("/hardWork", AsyncServlet.ofBlocking(executor, request -> {\n        Thread.sleep(2000); //Hard work\n        return HttpResponse.ok200()\n            .withHtml("Hard work is done");\n      }));\n}\n')),(0,l.mdx)("p",null,"To check how the example works, open your favorite browser and go to ",(0,l.mdx)("a",{parentName:"p",href:"http://localhost:8080"},"localhost:8080")),(0,l.mdx)(o.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/BlockingServletExample.java",mdxType:"Githublink"}),(0,l.mdx)("h3",{id:"file-upload-example"},"File Upload Example"),(0,l.mdx)("p",null,"In this example user uploads a file from local storage to the server:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/BlockingServletExample.java tag=EXAMPLE",url:"/examples/core/http/src/main/java/BlockingServletExample.java",tag:"EXAMPLE"},'@Provides\nAsyncServlet servlet(Executor executor) {\n  return RoutingServlet.create()\n      .map("/", request -> HttpResponse.ok200()\n          .withHtml("<a href=\'hardWork\'>Do hard work</a>"))\n      .map("/hardWork", AsyncServlet.ofBlocking(executor, request -> {\n        Thread.sleep(2000); //Hard work\n        return HttpResponse.ok200()\n            .withHtml("Hard work is done");\n      }));\n}\n')),(0,l.mdx)("p",null,"To check how the example works, open your favorite browser and go to ",(0,l.mdx)("a",{parentName:"p",href:"http://localhost:8080"},"localhost:8080")),(0,l.mdx)(o.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/FileUploadExample.java",mdxType:"Githublink"}),(0,l.mdx)("h3",{id:"client-example"},"Client Example"),(0,l.mdx)("p",null,"This example shows how to create an HTTP client using ",(0,l.mdx)("strong",{parentName:"p"},"Launcher"),", pre-defined"),(0,l.mdx)(o.Z,{text:"AsyncHttpClient",url:"/core-http/src/main/java/io/activej/http/AsyncHttpClient.java",mdxType:"Githublink"}),", and ",(0,l.mdx)(o.Z,{text:"AsyncDnsClient",url:"/core-http/src/main/java/io/activej/dns/AsyncDnsClient.java",mdxType:"Githublink"}),"(maps given domains to the corresponding IP addresses):",(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/HttpClientExample.java tag=REGION_1",url:"/examples/core/http/src/main/java/HttpClientExample.java",tag:"REGION_1"},'@Provides\nAsyncHttpClient client(Eventloop eventloop, AsyncDnsClient dnsClient) {\n  return AsyncHttpClient.create(eventloop)\n      .withDnsClient(dnsClient);\n}\n\n@Provides\nAsyncDnsClient dnsClient(Eventloop eventloop, Config config) {\n  return RemoteAsyncDnsClient.create(eventloop)\n      .withDnsServerAddress(config.get(ofInetAddress(), "dns.address"))\n      .withTimeout(config.get(ofDuration(), "dns.timeout"));\n}\n')),(0,l.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,l.mdx)("h5",{parentName:"div"},(0,l.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,l.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.mdx)("div",{parentName:"div",className:"admonition-content"},(0,l.mdx)("p",{parentName:"div"},"To add support for HTTPS to ",(0,l.mdx)("inlineCode",{parentName:"p"},"AsyncHttpClient")," you need to call ",(0,l.mdx)("inlineCode",{parentName:"p"},"withSslEnabled")," method and pass ",(0,l.mdx)("inlineCode",{parentName:"p"},"SSLContext")," and ",(0,l.mdx)("inlineCode",{parentName:"p"},"Executor")))),(0,l.mdx)("p",null,"Override Launcher ",(0,l.mdx)("inlineCode",{parentName:"p"},"getModule")," method to provide needed ",(0,l.mdx)("a",{parentName:"p",href:"/boot/config"},"configs")," and ",(0,l.mdx)("a",{parentName:"p",href:"/boot/servicegraph"},(0,l.mdx)("strong",{parentName:"a"},"ServiceGraph"))," dependency graph:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/HttpClientExample.java tag=REGION_2",url:"/examples/core/http/src/main/java/HttpClientExample.java",tag:"REGION_2"},'@Override\nprotected Module getModule() {\n  return combine(\n      ServiceGraphModule.create(),\n      ConfigModule.create()\n          .withEffectiveConfigLogger());\n}\n\n@Provides\nConfig config() {\n  return Config.create()\n      .with("dns.address", "8.8.8.8")\n      .with("dns.timeout", "5 seconds")\n      .overrideWith(Config.ofSystemProperties("config"));\n}\n')),(0,l.mdx)("p",null,"Since our client extends ",(0,l.mdx)("inlineCode",{parentName:"p"},"Launcher"),", it overrides method ",(0,l.mdx)("inlineCode",{parentName:"p"},"run")," which defines the main functionality. In our case, it\nsends a request, waits for server response (either successful or failed) and then processes it:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/HttpClientExample.java tag=REGION_3",url:"/examples/core/http/src/main/java/HttpClientExample.java",tag:"REGION_3"},'@Override\nprotected void run() throws ExecutionException, InterruptedException {\n  String url = args.length != 0 ? args[0] : "http://127.0.0.1:8080/";\n  System.out.println("\\nHTTP request: " + url);\n  CompletableFuture<String> future = eventloop.submit(() ->\n      httpClient.request(HttpRequest.get(url))\n          .then(HttpMessage::loadBody)\n          .map(body -> body.getString(UTF_8))\n  );\n  System.out.println("HTTP response: " + future.get());\n  System.out.println();\n}\n')),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"eventloop.submit")," submits request sending and response receiving to the eventloop thread. So, our main thread will wait until\n",(0,l.mdx)("em",{parentName:"p"},"future")," in the eventloop thread will return a result and only then the response will be printed out"),(0,l.mdx)("p",null,"To check how the client works, launch ",(0,l.mdx)("a",{parentName:"p",href:"#simple-hello-world-server"},'Simple "Hello World" Server')," or\n",(0,l.mdx)("a",{parentName:"p",href:"#custom-server"},"Custom HTTP server")," and then run ",(0,l.mdx)("strong",{parentName:"p"},"ClientExample")),(0,l.mdx)(o.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/HttpClientExample.java",mdxType:"Githublink"}),(0,l.mdx)("h3",{id:"multipart-data-handling-example"},"Multipart Data Handling Example"),(0,l.mdx)("p",null,"POST requests sometimes may be encoded as ",(0,l.mdx)("strong",{parentName:"p"},"Multipart/form-data"),". Such requests may contain multiple fields and files. To handle a request containing multipart data you may use ",(0,l.mdx)("inlineCode",{parentName:"p"},"HttpRequest#handleMultipart")," method. You need to pass an instance of ",(0,l.mdx)("inlineCode",{parentName:"p"},"MultipartDataHandler")," to this method. There are several common handlers in ",(0,l.mdx)("inlineCode",{parentName:"p"},"MultipartDataHandler")," class. You can use them to collect fields to a map, send a file to some ",(0,l.mdx)("inlineCode",{parentName:"p"},"ChannelConsumer<ByteBuf>"),", etc. Or you may write your own ",(0,l.mdx)("inlineCode",{parentName:"p"},"MultipartDataHandler")," if that is not enough."),(0,l.mdx)("p",null,"In this example we will collect fields to a map end upload received files to some directory. After this we will log the collected fields and the number of uploaded files:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/MultipartDataHandlingExample.java tag=SERVLET",url:"/examples/core/http/src/main/java/MultipartDataHandlingExample.java",tag:"SERVLET"},'@Provides\nAsyncServlet servlet() {\n  return RoutingServlet.create()\n      .map(POST, "/handleMultipart", request -> {\n        Map<String, String> fields = new HashMap<>();\n\n        return request.handleMultipart(MultipartDataHandler.fieldsToMap(fields, this::upload))\n            .map($ -> {\n              logger.info("Received fields: " + fields);\n              logger.info("Uploaded " + fileUploadsCount + " files total");\n              return HttpResponse.ok200();\n            });\n      });\n}\n')),(0,l.mdx)("p",null,"To upload the received file to a file system we will use a ",(0,l.mdx)(o.Z,{text:"ChannelFileWritter",url:"/core-csp/src/main/java/io/activej/csp/file/ChannelFileWriter.java",mdxType:"Githublink"}),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/MultipartDataHandlingExample.java tag=UPLOAD",url:"/examples/core/http/src/main/java/MultipartDataHandlingExample.java",tag:"UPLOAD"},"@NotNull\nprivate Promise<ChannelConsumer<ByteBuf>> upload(String filename) {\n  logger.info(\"Uploading file '{}' to {}\", filename, path);\n  return ChannelFileWriter.open(executor, path.resolve(filename))\n      .map(writer -> writer.withAcknowledgement(ack ->\n          ack.whenResult(() -> {\n            logger.info(\"Upload of file '{}' finished\", filename);\n            fileUploadsCount++;\n          })));\n}\n")),(0,l.mdx)("p",null,"The ",(0,l.mdx)("strong",{parentName:"p"},"Multipart/form-data")," request is manually forged and contains several fields and files. After running the example you\nshould see a similar logging output:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},"Uploading file 'data.txt' to /tmp/multipart-data-files4909047508332989372\nUpload of file 'data.txt' finished\nUploading file 'key.txt' to /tmp/multipart-data-files4909047508332989372\nUpload of file 'key.txt' finished\nReceived fields: {last name=Johnson, first name=Alice, id=12345}\nUploaded 2 files total\n")),(0,l.mdx)("p",null,"You may inspect the directory from logging output to ensure the files are uploaded."),(0,l.mdx)(o.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/MultipartDataHandlingExample.java",mdxType:"Githublink"}),(0,l.mdx)("h3",{id:"websocket-pong-server"},"WebSocket Pong Server"),(0,l.mdx)("p",null,'Let\'s create a "Pong" WebSocket server. For this purpose we need to\nprovide a ',(0,l.mdx)("inlineCode",{parentName:"p"},"RoutingServlet")," and use ",(0,l.mdx)("em",{parentName:"p"},"mapWebSocket")," method to map a ",(0,l.mdx)("strong",{parentName:"p"},"Consumer")," of ",(0,l.mdx)("strong",{parentName:"p"},"WebSocket")," as a servlet on ",(0,l.mdx)("inlineCode",{parentName:"p"},"/"),'path.\nOur server will simply accept messages, print them out, and stream back a "Pong" message.'),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/WebSocketPongServerExample.java tag=EXAMPLE",url:"/examples/core/http/src/main/java/WebSocketPongServerExample.java",tag:"EXAMPLE"},'@Provides\nAsyncServlet servlet() {\n  return RoutingServlet.create()\n      .mapWebSocket("/", webSocket -> webSocket.readMessage()\n          .whenResult(message -> System.out.println("Received:" + message.getText()))\n          .then(() -> webSocket.writeMessage(Message.text("Pong")))\n          .whenComplete(webSocket::close));\n}\n')),(0,l.mdx)(o.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/WebSocketPongServerExample.java",mdxType:"Githublink"}),(0,l.mdx)("h3",{id:"websocket-ping-client"},"WebSocket Ping Client"),(0,l.mdx)("p",null,'Now let\'s create a client that will send a "Ping" message to server via WebSocket connection.'),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/WebSocketPingClientExample.java tag=EXAMPLE",url:"/examples/core/http/src/main/java/WebSocketPingClientExample.java",tag:"EXAMPLE"},'@Override\nprotected void run() throws ExecutionException, InterruptedException {\n  String url = args.length != 0 ? args[0] : "ws://127.0.0.1:8080/";\n  System.out.println("\\nWeb Socket request: " + url);\n  CompletableFuture<?> future = eventloop.submit(() -> {\n    System.out.println("Sending: Ping");\n    return httpClient.webSocketRequest(HttpRequest.get(url))\n        .then(webSocket -> webSocket.writeMessage(Message.text("Ping"))\n            .then(webSocket::readMessage)\n            .whenResult(message -> System.out.println("Received: " + message.getText()))\n            .whenComplete(webSocket::close));\n  });\n  future.get();\n}\n')),(0,l.mdx)("p",null,"First, we create a supplier and override its ",(0,l.mdx)("inlineCode",{parentName:"p"},"get")," method via lambda. Here we call ",(0,l.mdx)("inlineCode",{parentName:"p"},"AsyncHttpClient.webSocketRequest")," that sends a\nrequest and returns a Promise of a ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/activej/activej/blob/v4.2/core-http/src/main/java/io/activej/http/WebSocket.java"},"WebSocket"),".\nThen we create a ",(0,l.mdx)("inlineCode",{parentName:"p"},"Function"),' that sends a "Ping" message and receives a response from server.'),(0,l.mdx)(o.Z,{text:"See full example on GitHub",url:"/examples/core/http/src/main/java/WebSocketPingClientExample.java",mdxType:"Githublink"}))}c.isMDXComponent=!0}}]);
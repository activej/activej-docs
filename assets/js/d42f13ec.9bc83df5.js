"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[3465],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return h}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(a),h=r,d=m["".concat(l,".").concat(h)]||m[h]||c[h]||i;return a?n.createElement(d,s(s({ref:t},u),{},{components:a})):n.createElement(d,s({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},77618:function(e,t,a){var n=a(67294),r=a(39962);t.Z=function(e){var t=e.url,a=e.text,i=e.isInline,s=void 0===i||i,o=e.children,l=(0,r.Z)().siteConfig;return n.createElement("a",{style:s?{}:{display:"block",marginBottom:"16px"},href:l.customFields.githubUrl+"/"+l.customFields.githubBranch+t,target:"_blank"},a||o)}},77815:function(e,t,a){a(67294);var n=a(39962);t.Z=function(e){var t=e.name,a=(0,n.Z)().siteConfig;if(!t)throw new Error("Variable name is required");if(void 0===a.customFields[t])throw new Error("Variable "+t+" not exist");return a.customFields[t]}},80704:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return p},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return m},default:function(){return d}});var n=a(87462),r=a(63366),i=(a(67294),a(3905)),s=a(77618),o=a(77815),l=["components"],p={title:"ActiveJ | Simple app with authorization and session management",sidebar_label:"Authorization and Session Management",keywords:["java","for beginners","java framework","guide","tutorial","web application","async","spring","spring alternative","netty alternative","jetty alternative","authorization","server","client","servlet"],description:"Create a Java web application with authorization and session management in about 100 lines of code using ActiveJ platform."},u="Authorization and Session Management",c={unversionedId:"tutorials/authorization-tutorial",id:"tutorials/authorization-tutorial",isDocsHomePage:!1,title:"ActiveJ | Simple app with authorization and session management",description:"Create a Java web application with authorization and session management in about 100 lines of code using ActiveJ platform.",source:"@site/docs/tutorials/authorization-tutorial.mdx",sourceDirName:"tutorials",slug:"/tutorials/authorization-tutorial",permalink:"/tutorials/authorization-tutorial",version:"current",frontMatter:{title:"ActiveJ | Simple app with authorization and session management",sidebar_label:"Authorization and Session Management",keywords:["java","for beginners","java framework","guide","tutorial","web application","async","spring","spring alternative","netty alternative","jetty alternative","authorization","server","client","servlet"],description:"Create a Java web application with authorization and session management in about 100 lines of code using ActiveJ platform."},sidebar:"tutorials",previous:{title:"HTTP Decoder",permalink:"/tutorials/http-decoder"},next:{title:"ActiveJ + Docker + AWS",permalink:"/tutorials/getting-started-advanced"}},m=[{value:"Creating Launcher",id:"creating-launcher",children:[]},{value:"Running the application",id:"running-the-application",children:[]}],h={toc:m};function d(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"authorization-and-session-management"},"Authorization and Session Management"),(0,i.kt)("p",null,"In this example we will create a simple authorization app with ",(0,i.kt)("strong",{parentName:"p"},"login"),"/",(0,i.kt)("strong",{parentName:"p"},"sign up")," scenarios\nand session management."),(0,i.kt)("p",null,"ActiveJ doesn't include built-in authorization modules or solutions, as this process may significantly vary depending\non the project's business logic. This example represents a simple \"best practice\" which you\ncan extend and modify depending on your needs. You can find full example sources on ",(0,i.kt)(s.Z,{text:"GitHub",url:"/examples/tutorials/auth",mdxType:"Githublink"})),(0,i.kt)("p",null,"In the example we will consider only the ",(0,i.kt)("a",{parentName:"p",href:"#creating-launcher"},"server")," which was created using ActiveJ ",(0,i.kt)("inlineCode",{parentName:"p"},"HttpServerLauncher")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"AsyncServlet"),". This approach allows to create an embedded application server in about 100 lines of code with no\nadditional XML configurations or third-party dependencies."),(0,i.kt)("h2",{id:"creating-launcher"},"Creating Launcher"),(0,i.kt)("p",null,"Let's create an ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthLauncher"),", which is the main part of the application as it manages the application lifecycle, routing\nand authorization processes. We will use ActiveJ ",(0,i.kt)("inlineCode",{parentName:"p"},"HttpServerLauncher")," and extend it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/auth/src/main/java/AuthLauncher.java tag=REGION_1",url:"/examples/tutorials/auth/src/main/java/AuthLauncher.java",tag:"REGION_1"},'public final class AuthLauncher extends HttpServerLauncher {\n  public static final String SESSION_ID = "SESSION_ID";\n\n  @Provides\n  AuthService loginService() {\n    return new AuthServiceImpl();\n  }\n\n  @Provides\n  Executor executor() {\n    return newSingleThreadExecutor();\n  }\n\n  @Provides\n  private StaticLoader staticLoader(Executor executor) {\n    return StaticLoader.ofClassPath(executor, "site/");\n  }\n\n  @Provides\n  SessionStore<String> sessionStore() {\n    return SessionStoreInMemory.<String>create()\n        .withLifetime(Duration.ofDays(30));\n  }\n\n  @Provides\n  AsyncServlet servlet(SessionStore<String> sessionStore,\n      @Named("public") AsyncServlet publicServlet, @Named("private") AsyncServlet privateServlet) {\n    return SessionServlet.create(sessionStore, SESSION_ID, publicServlet, privateServlet);\n  }\n')),(0,i.kt)("p",null,"Let's explore the provided objects in more detail:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"AuthService")," - authorization and register logic"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Executor")," - needed for StaticLoader"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)(s.Z,{text:"StaticLoader",url:"/core-http/src/main/java/io/activej/http/loader/StaticLoader.java",mdxType:"Githublink"}))," - loads static content from ",(0,i.kt)("inlineCode",{parentName:"li"},"/site")," directory"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)(s.Z,{text:"SessionStore",url:"/core-http/src/main/java/io/activej/http/session/SessionStore.java",mdxType:"Githublink"}))," - handy storage for information about sessions"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)(s.Z,{text:"AsyncServlet",url:"/core-http/src/main/java/io/activej/http/AsyncServlet.java",mdxType:"Githublink"}))," ",(0,i.kt)("em",{parentName:"li"},"servlet")," - the main servlet that combines public and private servlets (for authorized and unauthorized sessions). As you can see, due to DI, this servlet only requires two servlets without their own dependencies")),(0,i.kt)("p",null,"Now let's provide the ",(0,i.kt)("strong",{parentName:"p"},"public")," and ",(0,i.kt)("strong",{parentName:"p"},"private")," servlets."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AsyncServlet")," ",(0,i.kt)("em",{parentName:"li"},"publicServlet")," - manages unauthorized sessions:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/auth/src/main/java/AuthLauncher.java tag=REGION_2",url:"/examples/tutorials/auth/src/main/java/AuthLauncher.java",tag:"REGION_2"},'@Provides\n@Named("public")\nAsyncServlet publicServlet(AuthService authService, SessionStore<String> store, StaticLoader staticLoader) {\n  return RoutingServlet.create()\n      //[START REGION_3]\n      .map("/", request -> HttpResponse.redirect302("/login"))\n      //[END REGION_3]\n      .map(GET, "/signup", StaticServlet.create(staticLoader, "signup.html"))\n      .map(GET, "/login", StaticServlet.create(staticLoader, "login.html"))\n      //[START REGION_4]\n      .map(POST, "/login", loadBody()\n          .serveFirstSuccessful(\n              request -> {\n                Map<String, String> params = request.getPostParameters();\n                String username = params.get("username");\n                String password = params.get("password");\n                if (authService.authorize(username, password)) {\n                  String sessionId = UUID.randomUUID().toString();\n\n                  store.save(sessionId, "My object saved in session");\n                  return HttpResponse.redirect302("/members")\n                      .withCookie(HttpCookie.of(SESSION_ID, sessionId));\n                }\n                return AsyncServlet.NEXT;\n              },\n              StaticServlet.create(staticLoader, "errorPage.html")))\n      //[END REGION_4]\n      .map(POST, "/signup", loadBody()\n          .serve(request -> {\n            Map<String, String> params = request.getPostParameters();\n            String username = params.get("username");\n            String password = params.get("password");\n\n            if (username != null && password != null) {\n              authService.register(username, password);\n            }\n            return HttpResponse.redirect302("/login");\n          }));\n}\n')),(0,i.kt)("p",null,"Let's take a closer look at how we set up routing for servlets. ActiveJ approach resembles Express. For example,\nhere's the request to the homepage for unauthorized users:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/auth/src/main/java/AuthLauncher.java tag=REGION_3",url:"/examples/tutorials/auth/src/main/java/AuthLauncher.java",tag:"REGION_3"},'.map("/", request -> HttpResponse.redirect302("/login"))\n')),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"map(@Nullable HttpMethod method, String path, AsyncServlet servlet)")," adds the route to the ",(0,i.kt)(s.Z,{url:"/core-http/src/main/java/io/activej/http/RoutingServlet.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"p"},"RoutingServlet"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"method")," (optional) is one of the HTTP methods (",(0,i.kt)("inlineCode",{parentName:"li"},"GET"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"POST"),", etc.)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"path")," is the path on the server"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"servlet")," defines the logic of request processing. If you need to get some data from the ",(0,i.kt)("em",{parentName:"li"},"request")," while processing you can use:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"request.getPathParameter(String key)"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"request.getQueryParameter(String key)")," (",(0,i.kt)("a",{parentName:"li",href:"/http/examples#request-parameters-example"},"see example of query parameter usage"),")\nto provide the key of the needed parameter and receive back a corresponding String"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"request.getPostParameters()")," to get a Map of all request parameters")))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GET")," requests with paths ",(0,i.kt)("strong",{parentName:"p"},'"/login"')," and ",(0,i.kt)("strong",{parentName:"p"},'"/signup"')," upload the needed HTML pages.\n",(0,i.kt)("inlineCode",{parentName:"p"},"POST")," requests with paths ",(0,i.kt)("strong",{parentName:"p"},'"/login"')," and ",(0,i.kt)("strong",{parentName:"p"},'"/signup"')," take care of log in and sign up logic respectively:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/auth/src/main/java/AuthLauncher.java tag=REGION_4",url:"/examples/tutorials/auth/src/main/java/AuthLauncher.java",tag:"REGION_4"},'.map(POST, "/login", loadBody()\n    .serveFirstSuccessful(\n        request -> {\n          Map<String, String> params = request.getPostParameters();\n          String username = params.get("username");\n          String password = params.get("password");\n          if (authService.authorize(username, password)) {\n            String sessionId = UUID.randomUUID().toString();\n\n            store.save(sessionId, "My object saved in session");\n            return HttpResponse.redirect302("/members")\n                .withCookie(HttpCookie.of(SESSION_ID, sessionId));\n          }\n          return AsyncServlet.NEXT;\n        },\n        StaticServlet.create(staticLoader, "errorPage.html")))\n')),(0,i.kt)("p",null,"Pay attention at ",(0,i.kt)("inlineCode",{parentName:"p"},"POST")," ",(0,i.kt)("strong",{parentName:"p"},'"/login"')," route. ",(0,i.kt)("em",{parentName:"p"},"serveFirstSuccessful()")," takes two servlets and waits until one of them\nfinishes processing successfully. So if authorization fails, a Promise of ",(0,i.kt)("strong",{parentName:"p"},"null")," will be returned (",(0,i.kt)("strong",{parentName:"p"},"AsyncServlet.NEXT"),"),\nwhich means fail. In this case, a simple ",(0,i.kt)("inlineCode",{parentName:"p"},"StaticServlet")," will be created to load the ",(0,i.kt)("em",{parentName:"p"},"errorPage"),".\nSuccessful log in will generate a session ",(0,i.kt)("em",{parentName:"p"},"id")," for the user and will save string ",(0,i.kt)("inlineCode",{parentName:"p"},'"My saved object in session"')," to session store.\nAlso it will redirect user to ",(0,i.kt)("strong",{parentName:"p"},'"/members"'),"."),(0,i.kt)("p",null,"Now, let's get to the next servlet that handles authorized sessions."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AsyncServlet")," ",(0,i.kt)("em",{parentName:"li"},"privateServlet")," - manages authorized sessions:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/auth/src/main/java/AuthLauncher.java tag=REGION_5",url:"/examples/tutorials/auth/src/main/java/AuthLauncher.java",tag:"REGION_5"},'@Provides\n@Named("private")\nAsyncServlet privateServlet(StaticLoader staticLoader) {\n  return RoutingServlet.create()\n      //[START REGION_6]\n      .map("/", request -> HttpResponse.redirect302("/members"))\n      //[END REGION_6]\n      //[START REGION_7]\n      .map("/members/*", RoutingServlet.create()\n          .map(GET, "/", StaticServlet.create(staticLoader, "index.html"))\n          //[START REGION_8]\n          .map(GET, "/cookie", request ->\n              HttpResponse.ok200().withBody(wrapUtf8(request.getAttachment(String.class))))\n          //[END REGION_8]\n          .map(POST, "/logout", request ->\n              HttpResponse.redirect302("/")\n                  .withCookie(HttpCookie.of(SESSION_ID).withPath("/").withMaxAge(Duration.ZERO))));\n  //[END REGION_7]\n}\n')),(0,i.kt)("p",null,"First, it redirects requests from homepage to ",(0,i.kt)("strong",{parentName:"p"},'"/members"'),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/auth/src/main/java/AuthLauncher.java tag=REGION_6",url:"/examples/tutorials/auth/src/main/java/AuthLauncher.java",tag:"REGION_6"},'.map("/", request -> HttpResponse.redirect302("/members"))\n')),(0,i.kt)("p",null,"Next, it takes care of all of the requests that go after ",(0,i.kt)("strong",{parentName:"p"},'"/members"')," path:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/auth/src/main/java/AuthLauncher.java tag=REGION_7",url:"/examples/tutorials/auth/src/main/java/AuthLauncher.java",tag:"REGION_7"},'.map("/members/*", RoutingServlet.create()\n    .map(GET, "/", StaticServlet.create(staticLoader, "index.html"))\n    //[START REGION_8]\n    .map(GET, "/cookie", request ->\n        HttpResponse.ok200().withBody(wrapUtf8(request.getAttachment(String.class))))\n    //[END REGION_8]\n    .map(POST, "/logout", request ->\n        HttpResponse.redirect302("/")\n            .withCookie(HttpCookie.of(SESSION_ID).withPath("/").withMaxAge(Duration.ZERO))));\n')),(0,i.kt)("p",null,"Pay attention to the path ",(0,i.kt)("strong",{parentName:"p"},'"/members/*"'),".\n",(0,i.kt)("inlineCode",{parentName:"p"},"*")," is a variable for the next part of the path. It states that this servlet will process any path segment that goes after ",(0,i.kt)("strong",{parentName:"p"},'"/members/"'),".\nFor example, this route:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/auth/src/main/java/AuthLauncher.java tag=REGION_8",url:"/examples/tutorials/auth/src/main/java/AuthLauncher.java",tag:"REGION_8"},'.map(GET, "/cookie", request ->\n    HttpResponse.ok200().withBody(wrapUtf8(request.getAttachment(String.class))))\n')),(0,i.kt)("p",null,"is a GET request for ",(0,i.kt)("strong",{parentName:"p"},'"/members/cookie"')," path. This request shows all cookies stored in the session."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"A request can have an attachment map where any content can be mapped to some type, i.e. String. By default, requests have no attachments. In this case, the request contains 'cookies' as an attachment that's mapped to the ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," type."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},'"/members/logout"')," logs the user out, deletes all cookies related to this session and redirects the user to the homepage."),(0,i.kt)("p",null,"After ",(0,i.kt)("strong",{parentName:"p"},"public")," and ",(0,i.kt)("strong",{parentName:"p"},"private")," servlets are set up, we define ",(0,i.kt)("inlineCode",{parentName:"p"},"main()")," method, which will start our launcher:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/tutorials/auth/src/main/java/AuthLauncher.java tag=REGION_9",url:"/examples/tutorials/auth/src/main/java/AuthLauncher.java",tag:"REGION_9"},"public static void main(String[] args) throws Exception {\n  AuthLauncher launcher = new AuthLauncher();\n  launcher.launch(args);\n}\n")),(0,i.kt)("h2",{id:"running-the-application"},"Running the application"),(0,i.kt)("p",null,"If you want to run the example, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/activej/activej"},"clone ActiveJ")," and import it\nas a Maven project. Check out branch ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(o.Z,{name:"currentVersion",mdxType:"Variable"})),". Before running the example, build the project (",(0,i.kt)("strong",{parentName:"p"},"Ctrl + F9")," for IntelliJ IDEA)."),(0,i.kt)("p",null,"Open ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthLauncher")," class and run its ",(0,i.kt)("em",{parentName:"p"},"main()")," method.\nThen open your favorite browser and go to ",(0,i.kt)("a",{parentName:"p",href:"http://localhost:8080"},"localhost:8080"),". Try to sign up and then log in. When\nlogged in, check out your saved cookies for session. You will see the following content: ",(0,i.kt)("inlineCode",{parentName:"p"},"My saved object in session"),".\nFinally, try to log out. You can also try to log in with an invalid login or password."))}d.isMDXComponent=!0}}]);
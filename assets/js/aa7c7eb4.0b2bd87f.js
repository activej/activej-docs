"use strict";(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[7060],{3905:function(e,a,t){t.d(a,{Zo:function(){return c},kt:function(){return d}});var i=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,i,n=function(e,a){if(null==e)return{};var t,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var o=i.createContext({}),p=function(e){var a=i.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},c=function(e){var a=p(e.components);return i.createElement(o.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},u=i.forwardRef((function(e,a){var t=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),d=n,v=u["".concat(o,".").concat(d)]||u[d]||m[d]||r;return t?i.createElement(v,l(l({ref:a},c),{},{components:t})):i.createElement(v,l({ref:a},c))}));function d(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var r=t.length,l=new Array(r);l[0]=u;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var p=2;p<r;p++)l[p]=t[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},77618:function(e,a,t){var i=t(67294),n=t(39962);a.Z=function(e){var a=e.url,t=e.text,r=e.isInline,l=void 0===r||r,s=e.children,o=(0,n.Z)().siteConfig,p=a.startsWith("/examples")?o.customFields.githubExamplesBranch:o.customFields.githubBranch;return i.createElement("a",{style:l?{}:{display:"block",marginBottom:"16px"},href:o.customFields.githubUrl+"/"+p+a,target:"_blank"},t||s)}},77815:function(e,a,t){t(67294);var i=t(39962);a.Z=function(e){var a=e.name,t=(0,i.Z)().siteConfig;if(!a)throw new Error("Variable name is required");if(void 0===t.customFields[a])throw new Error("Variable "+a+" not exist");return t.customFields[a]}},1e4:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return u},default:function(){return v}});var i=t(83117),n=t(80102),r=(t(67294),t(3905)),l=t(77815),s=t(77618),o=["components"],p={title:"ActiveJ Serializer | World's fastest JVM serializer",description:"ActiveJ Serializer is world's fastest JVM serializer. It is streamlined and features powerful tools with intuitive DSL",sidebar_label:"Examples",keywords:["serializer","java","java framework","java for beginners","object serialization","spring alternative","bytecode generator"]},c="Examples",m={unversionedId:"serializer/examples",id:"serializer/examples",isDocsHomePage:!1,title:"ActiveJ Serializer | World's fastest JVM serializer",description:"ActiveJ Serializer is world's fastest JVM serializer. It is streamlined and features powerful tools with intuitive DSL",source:"@site/docs/serializer/examples.mdx",sourceDirName:"serializer",slug:"/serializer/examples",permalink:"/serializer/examples",tags:[],version:"current",frontMatter:{title:"ActiveJ Serializer | World's fastest JVM serializer",description:"ActiveJ Serializer is world's fastest JVM serializer. It is streamlined and features powerful tools with intuitive DSL",sidebar_label:"Examples",keywords:["serializer","java","java framework","java for beginners","object serialization","spring alternative","bytecode generator"]},sidebar:"docs",previous:{title:"Overview",permalink:"/serializer"},next:{title:"Overview",permalink:"/specializer"}},u=[{value:"Simple Object Serialization",id:"simple-object-serialization",children:[],level:2},{value:"Generics and Interfaces",id:"generics-and-interfaces",children:[],level:2},{value:"Path-based serialization",id:"path-based-serialization",children:[],level:2},{value:"Fixed Size and Nullable Fields Serialization",id:"fixed-size-and-nullable-fields-serialization",children:[],level:2},{value:"Custom serializer",id:"custom-serializer",children:[],level:2}],d={toc:u};function v(e){var a=e.components,t=(0,n.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"examples"},"Examples"),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"To run the examples, you need to clone ActiveJ from GitHub"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/activej/activej\n")),(0,r.kt)("p",{parentName:"div"},"And import it as a Maven project. Check out tag ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)(l.Z,{name:"currentVersion",mdxType:"Variable"})),". Before running the examples, build the project.\nThese examples are located at ",(0,r.kt)("inlineCode",{parentName:"p"},"activej/examples/core/serializer")))),(0,r.kt)("h2",{id:"simple-object-serialization"},"Simple Object Serialization"),(0,r.kt)("p",null,"In order to create classes whose instances can be serialized/deserialized, you should use special annotations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(s.Z,{text:"@Serialize",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/Serialize.java",mdxType:"Githublink"})," annotation with order number on property getter. Parameter `order` provides better compatibility in case classes are changed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(s.Z,{text:"@Deserialize",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/Deserialize.java",mdxType:"Githublink"})," annotation with property name (which should be the same name as the one in getter) in constructor.")),(0,r.kt)("p",null,"This is enough to create serializable POJOs, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_1",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",tag:"REGION_1"},'public static class Person {\n  public Person(@Deserialize("age") int age,\n      @Deserialize("name") String name) {\n    this.age = age;\n    this.name = name;\n  }\n\n  @Serialize\n  public final int age;\n\n  @Serialize\n  public final String name;\n\n  private String surname;\n\n  @Serialize\n  public String getSurname() {\n    return surname;\n  }\n\n  public void setSurname(String surname) {\n    this.surname = surname;\n  }\n}\n')),(0,r.kt)("p",null,"Now let's do some serialization. We'll create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," instance, a byte array that stores the result of the serialization, and a ",(0,r.kt)(s.Z,{text:"BinarySerializer",url:"/core-serializer/src/main/java/io/activej/serializer/BinarySerializer.java",mdxType:"Githublink"})," instance that represents a serializer that encodes and decodes ",(0,r.kt)("inlineCode",{parentName:"p"},"<T>")," values to byte arrays (",(0,r.kt)("inlineCode",{parentName:"p"},"<Person>")," values in this case):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_2",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",tag:"REGION_2"},'Person john = new Person(34, "Jim");\njohn.setSurname("Smith");\nbyte[] buffer = new byte[200];\nBinarySerializer<Person> serializer = SerializerBuilder.create()\n    .build(Person.class);\n')),(0,r.kt)("p",null,"That's it, now we can serialize and deserialize our ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_3",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",tag:"REGION_3"},"serializer.encode(buffer, 0, john);\nPerson johnCopy = serializer.decode(buffer, 0);\n")),(0,r.kt)("p",null,"Let's make a simple test to check if everything works correctly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_4",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",tag:"REGION_4"},'System.out.println(john.age + " " + johnCopy.age);\nSystem.out.println(john.name + " " + johnCopy.name);\nSystem.out.println(john.getSurname() + " " + johnCopy.getSurname());\n')),(0,r.kt)("p",null,"After you run the example, you'll receive the following output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"34 34\nJim Jim\nSmith Smith\n")),(0,r.kt)("p",null,"Which means that the serialization and deserialization worked correctly."),(0,r.kt)("p",null,"You can explore full example sources on ",(0,r.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",mdxType:"Githublink"})),(0,r.kt)("h2",{id:"generics-and-interfaces"},"Generics and Interfaces"),(0,r.kt)("p",null,"ActiveJ Serializer can simply manage more complex objects. For example, let's see how it works with interfaces and\ngenerics."),(0,r.kt)("p",null,"First, create a simple ",(0,r.kt)("inlineCode",{parentName:"p"},"Skill")," class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_1",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_1"},'public static class Skill<K, V> {\n  private final K key;\n  private final V value;\n\n  public Skill(@Deserialize("key") K key,\n      @Deserialize("value") V value) {\n    this.key = key;\n    this.value = value;\n  }\n\n  @Serialize\n  public K getKey() {\n    return key;\n  }\n\n  @Serialize\n  public V getValue() {\n    return value;\n  }\n}\n')),(0,r.kt)("p",null,"Next, create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," interface that has a single method returning a list of skills:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_2",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_2"},"public interface Person<K, V> {\n  @Serialize\n  List<Skill<K, V>> getSkills();\n}\n")),(0,r.kt)("p",null,"Finally create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Developer")," class that implements ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_3",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_3"},"public static class Developer implements Person<Integer, String> {\n  private List<Skill<Integer, String>> list;\n\n  @Serialize\n  @Override\n  public List<Skill<Integer, String>> getSkills() {\n    return list;\n  }\n\n  public void setSkills(List<Skill<Integer, String>> list) {\n    this.list = list;\n  }\n}\n")),(0,r.kt)("p",null,"Let's proceed to the serialization. Similarly to the previous example, we'll create an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Developer"),", a\nbyte array to store the result of the serialization and an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"BinarySerializer<Developer>")," serializer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_4",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_4"},'Developer developer = new Developer();\ndeveloper.setSkills(Arrays.asList(\n    new Skill<>(1, "Java"),\n    new Skill<>(2, "ActiveJ")));\n\nbyte[] buffer = new byte[200];\nBinarySerializer<Developer> serializer = SerializerBuilder.create()\n    .build(Developer.class);\n')),(0,r.kt)("p",null,"Now let's serialize and deserialize our ",(0,r.kt)("inlineCode",{parentName:"p"},"Developer")," instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_5",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_5"},"serializer.encode(buffer, 0, developer);\nDeveloper developer2 = serializer.decode(buffer, 0);\n")),(0,r.kt)("p",null,"Check if the serialization works correctly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_6",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_6"},'for (int i = 0; i < developer.getSkills().size(); i++) {\n  System.out.println(developer.getSkills().get(i).getKey() + " - " + developer.getSkills().get(i).getValue() +\n      ", " + developer2.getSkills().get(i).getKey() + " - " + developer2.getSkills().get(i).getValue());\n}\n')),(0,r.kt)("p",null,"If you run the example, you'll receive the following output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"1 - Java, 1 - Java\n2 - ActiveJ, 2 - ActiveJ\n")),(0,r.kt)("p",null,"Which means that the serialization worked correctly."),(0,r.kt)("p",null,"You can explore full example sources on ",(0,r.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",mdxType:"Githublink"})),(0,r.kt)("h2",{id:"path-based-serialization"},"Path-based serialization"),(0,r.kt)("p",null,"Sometimes you need to serialize a field that represents a generic type. Let's say a ",(0,r.kt)("inlineCode",{parentName:"p"},"Map"),". All you need to do is put a ",(0,r.kt)("inlineCode",{parentName:"p"},"@Serialize")," annotation on that field."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Serialize\npublic Map<Integer, String>> map;\n")),(0,r.kt)("p",null,"But what if you want a map to contain nullable values? You can use ",(0,r.kt)(s.Z,{text:"@SerializeNullable",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/SerializeNullable.java",mdxType:"Githublink"})," annotation.\nHowever, if you simply put this annotation on a field, it would mean that a whole map can be nullable."),(0,r.kt)("p",null,"We should put the annotation directly on a ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),"! Starting from ActiveJ v5.0 some serializer annotations are applicable to a type use.\nSo whenever you need to mark some type with additional serializer information, just put the annotation on a type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Serialize\npublic Map<Integer, @SerializeNullable String>> map;\n")),(0,r.kt)("p",null,"In older versions of ActiveJ the only way to specify which type should be nullable, for example, was by using ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," option from the annotation.\nTo serialize a map with nullable values you would need to do something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Serialize\n@SerializeNullable(path = 1)\npublic Map<Integer, String>> map;\n")),(0,r.kt)("p",null,"Each type parameter has its own index, starting from 0. So, ",(0,r.kt)("inlineCode",{parentName:"p"},"Integer")," has an index 0 and ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," has an index 1.\nIn order to specify that String may be null we add ",(0,r.kt)("inlineCode",{parentName:"p"},"path = 1")," to the annotation."),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," parameter is actually an array of ints, so you may specify a nullable type in a nested declaration.\nYou also may put multiple path-based annotations on a field (or getter)."),(0,r.kt)("p",null,"Here is an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Serialize\n@SerializeNullable // refers to Map<String, Map<Integer, Float[]>>\n@SerializeNullable(path = 1) // refers to Map<Integer, Float[]\n@SerializeNullable(path = 0) // refers to String\n@SerializeNullable(path = {1, 0}) // refers to Integer\n@SerializeNullable(path = {1, 1}) // refers to Float[]\n@SerializeNullable(path = {1, 1, 0}) //refers to the Float elements of the array\npublic Map<String, Map<Integer, Float[]>> complexMap;\n")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Unfortunately, in some cases the older versions of Java may not properly resolve which type parameter the annotation annotates if a type is annotated.\nIn this case you may use a path-based approach if you run your application using the version of Java less than 12."))),(0,r.kt)("p",null,"In this tutorial we will show you how to write serializers using either path approach or type use approach."),(0,r.kt)("p",null,"First, let's take a look at a type use approach."),(0,r.kt)("p",null,"We will define a parameterized class ",(0,r.kt)("inlineCode",{parentName:"p"},"Nested"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SerializePathExample.java tag=Nested",url:"/examples/core/serializer/src/main/java/SerializePathExample.java",tag:"Nested"},'public static class Nested<T1, T2> {\n  @Serialize\n  public final T1 first;\n  @Serialize\n  public final T2 second;\n\n  public Nested(@Deserialize("first") T1 first, @Deserialize("second") T2 second) {\n    this.first = first;\n    this.second = second;\n  }\n\n  @Override\n  public String toString() {\n    return "Nested{" + first + ", " + second + \'}\';\n  }\n}\n')),(0,r.kt)("p",null,"Then we define a ",(0,r.kt)("inlineCode",{parentName:"p"},"Storage")," class to be serialized:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SerializeNoPathExample.java tag=Storage",url:"/examples/core/serializer/src/main/java/SerializeNoPathExample.java",tag:"Storage"},"public static class Storage {\n  @Serialize\n  public List<@SerializeNullable Nested<Integer, @SerializeNullable String>> listOfNested;\n}\n")),(0,r.kt)("p",null,"A class has a single field which as a ",(0,r.kt)("inlineCode",{parentName:"p"},"List")," of nullable ",(0,r.kt)("inlineCode",{parentName:"p"},"Nested"),". In addition, a second type parameter of a ",(0,r.kt)("inlineCode",{parentName:"p"},"Nested")," class (",(0,r.kt)("inlineCode",{parentName:"p"},"String"),") is itself nullable."),(0,r.kt)("p",null,"We create a serializer as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SerializeNoPathExample.java tag=Serializer",url:"/examples/core/serializer/src/main/java/SerializeNoPathExample.java",tag:"Serializer"},"BinarySerializer<Storage> serializer = SerializerBuilder.create(definingClassLoader)\n    .build(Storage.class);\n")),(0,r.kt)("p",null,"We then construct a ",(0,r.kt)("inlineCode",{parentName:"p"},"Storage")," class and add nullable elements to the list. Once we run the example we should see the following output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[Nested{1, abc}, null, Nested{5, null}]\n[Nested{1, abc}, null, Nested{5, null}]\n")),(0,r.kt)("p",null,"This shows both an original ",(0,r.kt)("inlineCode",{parentName:"p"},"Storage")," contents as well as deserialized one."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"A special care should be taken when annotating arrays."),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Foo String @Bar []\n")),(0,r.kt)("p",{parentName:"div"},"Here, ",(0,r.kt)("inlineCode",{parentName:"p"},"@Foo")," annotates ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," while ",(0,r.kt)("inlineCode",{parentName:"p"},"@Bar")," annotates the whole array ",(0,r.kt)("inlineCode",{parentName:"p"},"String[]"),"."),(0,r.kt)("p",{parentName:"div"},"This is in accordance with ",(0,r.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.7.4"},"Java Language Specification")))),(0,r.kt)("p",null,"You can explore full example sources on ",(0,r.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/SerializeNoPathExample.java",mdxType:"Githublink"})),(0,r.kt)("p",null,"Now, let's see a path based approach."),(0,r.kt)("p",null,"We will use the same ",(0,r.kt)("inlineCode",{parentName:"p"},"Nested")," class. However we will annotate a field of ",(0,r.kt)("inlineCode",{parentName:"p"},"Storage")," class using annotations with ",(0,r.kt)("inlineCode",{parentName:"p"},"path"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SerializePathExample.java tag=Storage",url:"/examples/core/serializer/src/main/java/SerializePathExample.java",tag:"Storage"},"public static class Storage {\n  @Serialize\n  @SerializeNullable(path = 0)\n  @SerializeNullable(path = {0, 1})\n  public List<Nested<Integer, String>> listOfNested;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"When creating a serializer an annotation compatibility mode should be enabled:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SerializePathExample.java tag=Serializer",url:"/examples/core/serializer/src/main/java/SerializePathExample.java",tag:"Serializer"},"BinarySerializer<Storage> serializer = SerializerBuilder.create(definingClassLoader)\n    .withAnnotationCompatibilityMode() // Compatibility mode has to be enabled\n    .build(Storage.class);\n")),(0,r.kt)("p",null,"After running the ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," method we should see the same output as with type use approach."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[Nested{1, abc}, null, Nested{5, null}]\n[Nested{1, abc}, null, Nested{5, null}]\n")),(0,r.kt)("p",null,"You can explore full example sources on ",(0,r.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/SerializePathExample.java",mdxType:"Githublink"})),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You may not mix both annotaion styles. If you want to use type use approach, then use it as is.\nJust make sure that your version of Java may resolve annotations on types."),(0,r.kt)("p",{parentName:"div"},"For a path based approach do not forget to enable annotation compatibility mode on a ",(0,r.kt)("inlineCode",{parentName:"p"},"SerializerBuilder"),"."))),(0,r.kt)("h2",{id:"fixed-size-and-nullable-fields-serialization"},"Fixed Size and Nullable Fields Serialization"),(0,r.kt)("p",null,"ActiveJ Serializer has some ",(0,r.kt)(s.Z,{text:"helper annotations",url:"/core-serializer/src/main/java/io/activej/serializer/annotations",mdxType:"Githublink"}),", for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(s.Z,{text:"@SerializeNullable",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/SerializeNullable.java",mdxType:"Githublink"})," on properties that can have null values. This annotation also has a special `path` parameter. It represent a path of the tree of the variable's data types. It allows to indicate which of the 'nodes' is nullable.")),(0,r.kt)("p",null,"As you can see, you can write several annotations for the different paths of the same data structure."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(s.Z,{text:"@SerializeFixedSize",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/SerializeFixedSize.java",mdxType:"Githublink"})," on properties that should have a fixed size after serialization")),(0,r.kt)("p",null,"Let's create a simple example that illustrates how to use these annotations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_1",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java",tag:"REGION_1"},"public static class Storage {\n  @Serialize\n  public @SerializeNullable String @SerializeFixedSize(3) [] strings;\n\n  @Serialize\n  public byte @SerializeFixedSize(4) [] bytes;\n}\n")),(0,r.kt)("p",null,"Now let's serialize and deserialize an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Storage")," similarly to the previous examples. We'll create an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Storage"),", a byte array to store the result of the serialization and an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"BinarySerializer<Storage>")," serializer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_2",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java",tag:"REGION_2"},'Storage storage = new Storage();\nstorage.strings = new String[]{"abc", null, "123", "superfluous"};\nstorage.bytes = new byte[]{1, 2, 3, 4, 5, 6};\n\nbyte[] buffer = new byte[200];\nBinarySerializer<Storage> serializer = SerializerBuilder.create()\n    .build(Storage.class);\n')),(0,r.kt)("p",null,"Finally, serialize and deserialize ",(0,r.kt)("strong",{parentName:"p"},"Storage")," instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_3",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java",tag:"REGION_3"},"serializer.encode(buffer, 0, storage);\nStorage limitedStorage = serializer.decode(buffer, 0);\n")),(0,r.kt)("p",null,"Let's see how serialization affected the ",(0,r.kt)("em",{parentName:"p"},"storage"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_4",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java",tag:"REGION_4"},'System.out.println(Arrays.toString(storage.strings) + " -> " + Arrays.toString(limitedStorage.strings));\nSystem.out.println(Arrays.toString(storage.bytes) + " -> " + Arrays.toString(limitedStorage.bytes));\n')),(0,r.kt)("p",null,"If you run the example, you'll see the following output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[abc, null, 123, superfluous] -> [abc, null, 123]\n[1, 2, 3, 4, 5, 6] -> [1, 2, 3, 4]\n")),(0,r.kt)("p",null,"As you can see in the first line, ",(0,r.kt)("em",{parentName:"p"},"storage")," differs from ",(0,r.kt)("em",{parentName:"p"},"limitedStorage"),". This is because ",(0,r.kt)("inlineCode",{parentName:"p"},"@SerializeFixedSize"),"\nannotation  was set at value ",(0,r.kt)("strong",{parentName:"p"},"3")," for the ",(0,r.kt)("em",{parentName:"p"},"strings"),' property. Thus, "superfluous" was removed from the array while serialization took place.'),(0,r.kt)("p",null,"You can explore full example sources on ",(0,r.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java",mdxType:"Githublink"})),(0,r.kt)("h2",{id:"custom-serializer"},"Custom serializer"),(0,r.kt)("p",null,"In this example, we will demonstrate how you can write a custom serializer for a ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalDate")," class. You can use this example\nas a reference for writing serializers for other classes that you may need to serialize."),(0,r.kt)("p",null,"Let's imagine we need to serialize a class that contains ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalDate")," field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/LocalDateSerializerExample.java tag=HOLDER",url:"/examples/core/serializer/src/main/java/LocalDateSerializerExample.java",tag:"HOLDER"},'public static class LocalDateHolder {\n  @Serialize\n  public final LocalDate date;\n\n  public LocalDateHolder(@Deserialize("date") LocalDate date) {\n    this.date = date;\n  }\n\n  @Override\n  public String toString() {\n    return "LocalDateHolder{date=" + date + \'}\';\n  }\n}\n')),(0,r.kt)("p",null,"By default, ActiveJ Serializer does not know how to serialize a ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalDate")," class, so it would throw an exception if you\nnaively try to serialize it. We have to provide a custom serializer for a ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalDate")," class to serialize ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalDateHolder"),"\nclass:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/LocalDateSerializerExample.java tag=SERIALIZER",url:"/examples/core/serializer/src/main/java/LocalDateSerializerExample.java",tag:"SERIALIZER"},'public static class SerializerDefLocalDate extends AbstractSerializerDef {\n\n  @Override\n  public Class<?> getEncodeType() {\n    return LocalDate.class;\n  }\n\n  @Override\n  public Expression encoder(final StaticEncoders staticEncoders,\n      final Expression buf,\n      final Variable pos,\n      final Expression localDate,\n      final int version,\n      final CompatibilityLevel compatibilityLevel) {\n    return sequence(\n        writeVarInt(buf, pos, call(localDate, "getYear")),\n        writeVarInt(buf, pos, call(localDate, "getMonthValue")),\n        writeVarInt(buf, pos, call(localDate, "getDayOfMonth"))\n    );\n  }\n\n  @Override\n  public Expression decoder(final StaticDecoders staticDecoders,\n      final Expression input,\n      final int version,\n      final CompatibilityLevel compatibilityLevel) {\n    return staticCall(LocalDate.class, "of",\n        readVarInt(input),\n        readVarInt(input),\n        readVarInt(input)\n    );\n  }\n}\n')),(0,r.kt)("p",null,"We extend ",(0,r.kt)(s.Z,{text:"AbstractSerializerDef",url:"/core-serializer/src/main/java/io/activej/serializer/AbstractSerializerDef.java",mdxType:"Githublink"}),"\nclass and implement methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Class<?> getEncodeType()")," - specify ",(0,r.kt)("inlineCode",{parentName:"li"},"LocalDate.class")," as the type of data to be serialized"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Expression encoder(...)")," - here we instruct the serializer how to serialize a ",(0,r.kt)("inlineCode",{parentName:"li"},"LocalDate")," instance. We actually need to\nserialize 3 ",(0,r.kt)("inlineCode",{parentName:"li"},"int")," values (",(0,r.kt)("inlineCode",{parentName:"li"},"year"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"month"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"dayOfMonth"),") and write them to ",(0,r.kt)(s.Z,{text:"BinaryOutput",url:"/core-serializer/src/main/java/io/activej/serializer/BinaryOutput.java",mdxType:"Githublink"})," Using Lisp-like ",(0,r.kt)("inlineCode",{parentName:"li"},"Expression")," API we do just that."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Expression decoder(...)")," - here we need to instruct the serializer how to deserialize raw bytes into a ",(0,r.kt)("inlineCode",{parentName:"li"},"LocalDate")," instance.\nThe process is an inverse to encoding. First, we have to read 3 ",(0,r.kt)("inlineCode",{parentName:"li"},"int")," values (",(0,r.kt)("inlineCode",{parentName:"li"},"year"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"month"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"dayOfMonth"),") from ",(0,r.kt)(s.Z,{text:"BinaryInput",url:"/core-serializer/src/main/java/io/activej/serializer/BinaryInput.java",mdxType:"Githublink"}),"\nThen we can create a new ",(0,r.kt)("inlineCode",{parentName:"li"},"LocalDate")," instance by calling static factory method ",(0,r.kt)("inlineCode",{parentName:"li"},"static LocalDate of(int year, int month, int dayOfMonth)"),"\nand passing previously deserialized ",(0,r.kt)("inlineCode",{parentName:"li"},"int")," values. We once again use ",(0,r.kt)("inlineCode",{parentName:"li"},"Expression")," API for this task.")),(0,r.kt)("p",null,"At last, we need to add our serializer of ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalDate")," to ",(0,r.kt)(s.Z,{text:"SerializerBuilder",url:"/core-serializer/src/main/java/io/activej/serializer/SerializerBuilder.java",mdxType:"Githublink"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/LocalDateSerializerExample.java tag=SERIALIZER_CREATE",url:"/examples/core/serializer/src/main/java/LocalDateSerializerExample.java",tag:"SERIALIZER_CREATE"},"BinarySerializer<LocalDateHolder> serializer =\n    SerializerBuilder.create()\n        .with(LocalDate.class, ctx -> new SerializerDefLocalDate())\n        .build(LocalDateHolder.class);\n")),(0,r.kt)("p",null,"If we run ",(0,r.kt)("inlineCode",{parentName:"p"},"LocalDateSerializerExample#main")," method, we should see the following output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Serializing LocalDateHolder: LocalDateHolder{date=2021-03-17}\nByte array with serialized LocalDateHolder: [-27, 15, 3, 17]\nDeserialized LocalDateHolder: LocalDateHolder{date=2021-03-17}\n")),(0,r.kt)("p",null,"You can explore full example sources on ",(0,r.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/LocalDateSerializerExample.java",mdxType:"Githublink"})))}v.isMDXComponent=!0}}]);
(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[7060],{3905:function(e,a,r){"use strict";r.d(a,{kt:function(){return m}});var t=r(67294);function i(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function n(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?n(Object(r),!0).forEach((function(a){i(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function s(e,a){if(null==e)return{};var r,t,i=function(e,a){if(null==e)return{};var r,t,i={},n=Object.keys(e);for(t=0;t<n.length;t++)r=n[t],a.indexOf(r)>=0||(i[r]=e[r]);return i}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(t=0;t<n.length;t++)r=n[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var o=t.createContext({}),c=function(e){var a=t.useContext(o),r=a;return e&&(r="function"==typeof e?e(a):l(l({},a),e)),r},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var r=e.components,i=e.mdxType,n=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(r),d=i,v=m["".concat(o,".").concat(d)]||m[d]||p[d]||n;return r?t.createElement(v,l(l({ref:a},u),{},{components:r})):t.createElement(v,l({ref:a},u))}));function m(e,a){var r=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var n=r.length,l=new Array(n);l[0]=u;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var c=2;c<n;c++)l[c]=r[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},77618:function(e,a,r){"use strict";var t=r(95318).default;a.Z=void 0;var i=t(r(67294)),n=t(r(39962)),l=function(e){var a=e.url,r=e.text,t=e.isInline,l=void 0===t||t,s=e.children,o=(0,n.default)().siteConfig;return i.default.createElement("a",{style:l?{}:{display:"block",marginBottom:"16px"},href:o.customFields.githubUrl+"/"+o.customFields.githubBranch+a,target:"_blank"},r||s)};a.Z=l},77815:function(e,a,r){"use strict";var t=r(95318).default;a.Z=void 0;t(r(67294));var i=t(r(39962)),n=function(e){var a=e.name,r=(0,i.default)().siteConfig;if(!a)throw new Error("Variable name is required");if(void 0===r.customFields[a])throw new Error("Variable "+a+" not exist");return r.customFields[a]};a.Z=n},79617:function(e,a,r){"use strict";r.r(a),r.d(a,{frontMatter:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var t=r(22122),i=r(19756),n=(r(67294),r(3905)),l=r(77815),s=r(77618),o=["components"],c={title:"ActiveJ Serializer | World's fastest JVM serializer",description:"ActiveJ Serializer is world's fastest JVM serializer. It is streamlined and features powerful tools with intuitive DSL",keywords:"serializer,java,java framework,java for beginners,object serialization,spring alternative,bytecode generator"},p={unversionedId:"serializer/examples",id:"serializer/examples",isDocsHomePage:!1,title:"Examples",description:"ActiveJ Serializer is world's fastest JVM serializer. It is streamlined and features powerful tools with intuitive DSL",source:"@site/docs/serializer/examples.mdx",sourceDirName:"serializer",slug:"/serializer/examples",permalink:"/docs/serializer/examples",version:"current",frontMatter:{title:"ActiveJ Serializer | World's fastest JVM serializer",description:"ActiveJ Serializer is world's fastest JVM serializer. It is streamlined and features powerful tools with intuitive DSL",keywords:"serializer,java,java framework,java for beginners,object serialization,spring alternative,bytecode generator"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/serializer/overview"},next:{title:"Overview",permalink:"/docs/specializer/overview"}},u=[{value:"Simple Object Serialization",id:"simple-object-serialization",children:[]},{value:"Generics and Interfaces",id:"generics-and-interfaces",children:[]},{value:"Fixed Size and Nullable Fields Serialization",id:"fixed-size-and-nullable-fields-serialization",children:[]},{value:"Custom serializer",id:"custom-serializer",children:[]}],m={toc:u};function d(e){var a=e.components,r=(0,i.default)(e,o);return(0,n.kt)("wrapper",(0,t.default)({},m,r,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,n.kt)("div",{parentName:"div",className:"admonition-heading"},(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,n.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,n.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,n.kt)("div",{parentName:"div",className:"admonition-content"},(0,n.kt)("p",{parentName:"div"},"To run the examples, you need to clone ActiveJ from GitHub"),(0,n.kt)("pre",{parentName:"div"},(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/activej/activej\n")),(0,n.kt)("p",{parentName:"div"},"And import it as a Maven project. Check out tag ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)(l.Z,{name:"currentVersion",mdxType:"Variable"})),". Before running the examples, build the project.\nThese examples are located at ",(0,n.kt)("strong",{parentName:"p"},"activej/examples/core/serializer")))),(0,n.kt)("h2",{id:"simple-object-serialization"},"Simple Object Serialization"),(0,n.kt)("p",null,"In order to create classes whose instances can be serialized/deserialized, you should use special annotations:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)(s.Z,{text:"@Serialize",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/Serialize.java",mdxType:"Githublink"})," annotation with order number on property getter. Parameter `order` provides better compatibility in case classes are changed."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)(s.Z,{text:"@Deserialize",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/Deserialize.java",mdxType:"Githublink"})," annotation with property name (which should be the same name as the one in getter) in constructor.")),(0,n.kt)("p",null,"This is enough to create serializable POJOs, for example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_1",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",tag:"REGION_1"},'public static class Person {\n  public Person(@Deserialize("age") int age,\n          @Deserialize("name") String name) {\n    this.age = age;\n    this.name = name;\n  }\n\n  @Serialize(order = 0)\n  public final int age;\n\n  @Serialize(order = 1)\n  public final String name;\n\n  private String surname;\n\n  @Serialize(order = 2)\n  public String getSurname() {\n    return surname;\n  }\n\n  public void setSurname(String surname) {\n    this.surname = surname;\n  }\n}\n')),(0,n.kt)("p",null,"Now let's do some serialization. We'll create a ",(0,n.kt)("inlineCode",{parentName:"p"},"Person")," instance, a byte array that stores the result of the serialization, and a ",(0,n.kt)(s.Z,{text:"BinarySerializer",url:"/core-serializer/src/main/java/io/activej/serializer/BinarySerializer.java",mdxType:"Githublink"})," instance that represents a serializer that encodes and decodes ",(0,n.kt)("inlineCode",{parentName:"p"},"<T>")," values to byte arrays (",(0,n.kt)("inlineCode",{parentName:"p"},"<Person>")," values in this case):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_2",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",tag:"REGION_2"},'Person john = new Person(34, "Jim");\njohn.setSurname("Smith");\nbyte[] buffer = new byte[200];\nBinarySerializer<Person> serializer = SerializerBuilder.create()\n    .build(Person.class);\n')),(0,n.kt)("p",null,"That's it, now we can serialize and deserialize our ",(0,n.kt)("inlineCode",{parentName:"p"},"Person")," instance:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_3",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",tag:"REGION_3"},"serializer.encode(buffer, 0, john);\nPerson johnCopy = serializer.decode(buffer, 0);\n")),(0,n.kt)("p",null,"Let's make a simple test to check if everything works correctly:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/SimpleObjectExample.java tag=REGION_4",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",tag:"REGION_4"},'System.out.println(john.age + " " + johnCopy.age);\nSystem.out.println(john.name + " " + johnCopy.name);\nSystem.out.println(john.getSurname() + " " + johnCopy.getSurname());\n')),(0,n.kt)("p",null,"After you run the example, you'll receive the following output:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"34 34\nJim Jim\nSmith Smith\n")),(0,n.kt)("p",null,"Which means that the serialization and deserialization worked correctly."),(0,n.kt)("p",null,"You can explore full example sources on ",(0,n.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/SimpleObjectExample.java",mdxType:"Githublink"})),(0,n.kt)("h2",{id:"generics-and-interfaces"},"Generics and Interfaces"),(0,n.kt)("p",null,"ActiveJ Serializer can simply manage more complex objects. For example, let's see how it works with interfaces and\ngenerics."),(0,n.kt)("p",null,"First, create a simple ",(0,n.kt)("inlineCode",{parentName:"p"},"Skill")," class:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_1",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_1"},'public static class Skill<K, V> {\n  private final K key;\n  private final V value;\n\n  public Skill(@Deserialize("key") K key,\n         @Deserialize("value") V value) {\n    this.key = key;\n    this.value = value;\n  }\n\n  @Serialize(order = 0)\n  public K getKey() {\n    return key;\n  }\n\n  @Serialize(order = 1)\n  public V getValue() {\n    return value;\n  }\n}\n')),(0,n.kt)("p",null,"Next, create a ",(0,n.kt)("inlineCode",{parentName:"p"},"Person")," interface that has a single method returning a list of skills:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_2",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_2"},"public interface Person<K, V> {\n  @Serialize(order = 0)\n  List<Skill<K, V>> getSkills();\n}\n")),(0,n.kt)("p",null,"Finally create a ",(0,n.kt)("inlineCode",{parentName:"p"},"Developer")," class that implements ",(0,n.kt)("inlineCode",{parentName:"p"},"Person")," interface:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_3",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_3"},"public static class Developer implements Person<Integer, String> {\n  private List<Skill<Integer, String>> list;\n\n  @Serialize(order = 0)\n  @Override\n  public List<Skill<Integer, String>> getSkills() {\n    return list;\n  }\n\n  public void setSkills(List<Skill<Integer, String>> list) {\n    this.list = list;\n  }\n}\n")),(0,n.kt)("p",null,"Let's proceed to the serialization. Similarly to the previous example, we'll create an instance of the ",(0,n.kt)("inlineCode",{parentName:"p"},"Developer"),", a\nbyte array to store the result of the serialization and an instance of ",(0,n.kt)("inlineCode",{parentName:"p"},"BinarySerializer<Developer>")," serializer:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_4",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_4"},'Developer developer = new Developer();\ndeveloper.setSkills(Arrays.asList(\n    new Skill<>(1, "Java"),\n    new Skill<>(2, "ActiveJ")));\n\nbyte[] buffer = new byte[200];\nBinarySerializer<Developer> serializer = SerializerBuilder.create()\n    .build(Developer.class);\n')),(0,n.kt)("p",null,"Now let's serialize and deserialize our ",(0,n.kt)("inlineCode",{parentName:"p"},"Developer")," instance:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_5",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_5"},"serializer.encode(buffer, 0, developer);\nDeveloper developer2 = serializer.decode(buffer, 0);\n")),(0,n.kt)("p",null,"Check if the serialization works correctly:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java tag=REGION_6",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",tag:"REGION_6"},'for (int i = 0; i < developer.getSkills().size(); i++) {\n  System.out.println(developer.getSkills().get(i).getKey() + " - " + developer.getSkills().get(i).getValue() +\n      ", " + developer2.getSkills().get(i).getKey() + " - " + developer2.getSkills().get(i).getValue());\n}\n')),(0,n.kt)("p",null,"If you run the example, you'll receive the following output:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"1 - Java, 1 - Java\n2 - ActiveJ, 2 - ActiveJ\n")),(0,n.kt)("p",null,"Which means that the serialization worked correctly."),(0,n.kt)("p",null,"You can explore full example sources on ",(0,n.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/GenericsAndInterfacesExample.java",mdxType:"Githublink"})),(0,n.kt)("h2",{id:"fixed-size-and-nullable-fields-serialization"},"Fixed Size and Nullable Fields Serialization"),(0,n.kt)("p",null,"ActiveJ Serializer has some ",(0,n.kt)(s.Z,{text:"helper annotations",url:"/core-serializer/src/main/java/io/activej/serializer/annotations",mdxType:"Githublink"}),", for example:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},(0,n.kt)(s.Z,{text:"@SerializeNullable",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/SerializeNullable.java",mdxType:"Githublink"}))," on properties that can have null values. This annotation also has a special ",(0,n.kt)("inlineCode",{parentName:"li"},"path")," parameter. It represent a path of the tree of the variable's data types. It allows to indicate which of the 'nodes' is nullable.")),(0,n.kt)("p",null,"For example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"@Serialize(order = 0)\n@SerializeNullable() // refers to Map<String, Map<Integer, Float[]>>\n@SerializeNullable(path = {1}) // refers to Map<Integer, Float[]\n@SerializeNullable(path = {0}) // refers to String\n@SerializeNullable(path = {1, 0}) // refers to Integer\n@SerializeNullable(path = {1, 1}) // refers to Float[]\n@SerializeNullable(path = {1, 1, 0}) //refers to the Float elements of the array\npublic Map<String, Map<Integer, Float[]>> complexMap;\n")),(0,n.kt)("p",null,"As you can see, you can write several annotations for the different paths of the same data structure."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)(s.Z,{text:"@SerializeFixedSize",url:"/core-serializer/src/main/java/io/activej/serializer/annotations/SerializeFixedSize.java",mdxType:"Githublink"})," on properties that should have a fixed size after serialization")),(0,n.kt)("p",null,"Let's create a simple example that illustrates how to use these annotations:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_1",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java",tag:"REGION_1"},"public static class Storage {\n  @Serialize(order = 0)\n  @SerializeFixedSize(3)\n  @SerializeNullable(path = {0})\n  public String[] strings;\n\n  @Serialize(order = 1)\n  @SerializeFixedSize(4)\n  public byte[] bytes;\n}\n")),(0,n.kt)("p",null,"Now let's serialize and deserialize an instance of the ",(0,n.kt)("inlineCode",{parentName:"p"},"Storage")," similarly to the previous examples. We'll create an instance of the ",(0,n.kt)("inlineCode",{parentName:"p"},"Storage"),", a byte array to store the result of the serialization and an instance of ",(0,n.kt)("inlineCode",{parentName:"p"},"BinarySerializer<Storage>")," serializer:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_2",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java",tag:"REGION_2"},'Storage storage = new Storage();\nstorage.strings = new String[]{"abc", null, "123", "superfluous"};\nstorage.bytes = new byte[]{1, 2, 3, 4};\n\nbyte[] buffer = new byte[200];\nBinarySerializer<Storage> serializer = SerializerBuilder.create()\n    .build(Storage.class);\n')),(0,n.kt)("p",null,"Finally, serialize and deserialize ",(0,n.kt)("strong",{parentName:"p"},"Storage")," instance:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_3",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java",tag:"REGION_3"},"serializer.encode(buffer, 0, storage);\nStorage limitedStorage = serializer.decode(buffer, 0);\n")),(0,n.kt)("p",null,"Let's see how serialization affected the ",(0,n.kt)("em",{parentName:"p"},"storage"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java tag=REGION_4",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java",tag:"REGION_4"},'System.out.println(Arrays.toString(storage.strings) + " -> " + Arrays.toString(limitedStorage.strings));\nSystem.out.println(Arrays.toString(storage.bytes) + " -> " + Arrays.toString(limitedStorage.bytes));\n')),(0,n.kt)("p",null,"If you run the example, you'll see the following output:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"[abc, null, 123, superfluous] -> [abc, null, 123]\n[1, 2, 3, 4] -> [1, 2, 3, 4]\n")),(0,n.kt)("p",null,"As you can see in the first line, ",(0,n.kt)("em",{parentName:"p"},"storage")," differs from ",(0,n.kt)("em",{parentName:"p"},"limitedStorage"),". This is because ",(0,n.kt)("inlineCode",{parentName:"p"},"@SerializeFixedSize"),"\nannotation  was set at value ",(0,n.kt)("strong",{parentName:"p"},"3")," for the ",(0,n.kt)("em",{parentName:"p"},"strings"),' property. Thus, "superfluous" was removed from the array while serialization took place.'),(0,n.kt)("p",null,"You can explore full example sources on ",(0,n.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/FixedSizeFieldsExample.java",mdxType:"Githublink"})),(0,n.kt)("h2",{id:"custom-serializer"},"Custom serializer"),(0,n.kt)("p",null,"In this example, we will demonstrate how you can write a custom serializer for a ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDate")," class. You can use this example\nas a reference for writing serializers for other classes that you may need to serialize."),(0,n.kt)("p",null,"Let's imagine we need to serialize a class that contains ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDate")," field:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/LocalDateSerializerExample.java tag=HOLDER",url:"/examples/core/serializer/src/main/java/LocalDateSerializerExample.java",tag:"HOLDER"},'public static class LocalDateHolder {\n  @Serialize(order = 0)\n  public final LocalDate date;\n\n  public LocalDateHolder(@Deserialize("date") LocalDate date) {\n    this.date = date;\n  }\n\n  @Override\n  public String toString() {\n    return "LocalDateHolder{date=" + date + \'}\';\n  }\n}\n')),(0,n.kt)("p",null,"By default, ActiveJ Serializer does not know how to serialize a ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDate")," class, so it would throw an exception if you\nnaively try to serialize it. We have to provide a custom serializer for a ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDate")," class to serialize ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDateHolder"),"\nclass:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/LocalDateSerializerExample.java tag=SERIALIZER",url:"/examples/core/serializer/src/main/java/LocalDateSerializerExample.java",tag:"SERIALIZER"},'public static class SerializerDefLocalDate extends AbstractSerializerDef {\n\n  @Override\n  public Class<?> getEncodeType() {\n    return LocalDate.class;\n  }\n\n  @Override\n  public Expression encoder(final StaticEncoders staticEncoders,\n                final Expression buf,\n                final Variable pos,\n                final Expression localDate,\n                final int version,\n                final CompatibilityLevel compatibilityLevel) {\n    return sequence(\n        writeVarInt(buf, pos, call(localDate, "getYear")),\n        writeVarInt(buf, pos, call(localDate, "getMonthValue")),\n        writeVarInt(buf, pos, call(localDate, "getDayOfMonth"))\n    );\n  }\n\n  @Override\n  public Expression decoder(final StaticDecoders staticDecoders,\n                final Expression input,\n                final int version,\n                final CompatibilityLevel compatibilityLevel) {\n    return staticCall(LocalDate.class, "of",\n        readVarInt(input),\n        readVarInt(input),\n        readVarInt(input)\n    );\n  }\n}\n')),(0,n.kt)("p",null,"We extend ",(0,n.kt)(s.Z,{text:"AbstractSerializerDef",url:"/core-serializer/src/main/java/io/activej/serializer/AbstractSerializerDef.java",mdxType:"Githublink"}),"\nclass and implement methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Class<?> getEncodeType()")," - specify ",(0,n.kt)("inlineCode",{parentName:"li"},"LocalDate.class")," as the type of data to be serialized"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Expression encoder(...)")," - here we instruct the serializer how to serialize a ",(0,n.kt)("inlineCode",{parentName:"li"},"LocalDate")," instance. We actually need to\nserialize 3 ",(0,n.kt)("inlineCode",{parentName:"li"},"int")," values (",(0,n.kt)("inlineCode",{parentName:"li"},"year"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"month"),", and ",(0,n.kt)("inlineCode",{parentName:"li"},"dayOfMonth"),") and write them to ",(0,n.kt)(s.Z,{text:"BinaryOutput",url:"/core-serializer/src/main/java/io/activej/serializer/BinaryOutput.java",mdxType:"Githublink"})," Using Lisp-like ",(0,n.kt)("inlineCode",{parentName:"li"},"Expression")," API we do just that."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Expression decoder(...)")," - here we need to instruct the serializer how to deserialize raw bytes into a ",(0,n.kt)("inlineCode",{parentName:"li"},"LocalDate")," instance.\nThe process is an inverse to encoding. First, we have to read 3 ",(0,n.kt)("inlineCode",{parentName:"li"},"int")," values (",(0,n.kt)("inlineCode",{parentName:"li"},"year"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"month"),", and ",(0,n.kt)("inlineCode",{parentName:"li"},"dayOfMonth"),") from ",(0,n.kt)(s.Z,{text:"BinaryInput",url:"/core-serializer/src/main/java/io/activej/serializer/BinaryInput.java",mdxType:"Githublink"}),"\nThen we can create a new ",(0,n.kt)("inlineCode",{parentName:"li"},"LocalDate")," instance by calling static factory method ",(0,n.kt)("inlineCode",{parentName:"li"},"static LocalDate of(int year, int month, int dayOfMonth)"),"\nand passing previously deserialized ",(0,n.kt)("inlineCode",{parentName:"li"},"int")," values. We once again use ",(0,n.kt)("inlineCode",{parentName:"li"},"Expression")," API for this task.")),(0,n.kt)("p",null,"At last, we need to add our serializer of ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDate")," to ",(0,n.kt)(s.Z,{text:"SerializerBuilder",url:"/core-serializer/src/main/java/io/activej/serializer/SerializerBuilder.java",mdxType:"Githublink"})),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/serializer/src/main/java/LocalDateSerializerExample.java tag=SERIALIZER_CREATE",url:"/examples/core/serializer/src/main/java/LocalDateSerializerExample.java",tag:"SERIALIZER_CREATE"},"BinarySerializer<LocalDateHolder> serializer =\n    SerializerBuilder.create()\n        .withSerializer(LocalDate.class, new SerializerDefLocalDate())\n        .build(LocalDateHolder.class);\n")),(0,n.kt)("p",null,"If we run ",(0,n.kt)("inlineCode",{parentName:"p"},"LocalDateSerializerExample#main")," method, we should see the following output:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-text"},"Serializing LocalDateHolder: LocalDateHolder{date=2021-03-17}\nByte array with serialized LocalDateHolder: [-27, 15, 3, 17]\nDeserialized LocalDateHolder: LocalDateHolder{date=2021-03-17}\n")),(0,n.kt)("p",null,"You can explore full example sources on ",(0,n.kt)(s.Z,{text:"GitHub",url:"/examples/core/serializer/src/main/java/LocalDateSerializerExample.java",mdxType:"Githublink"})))}d.isMDXComponent=!0}}]);
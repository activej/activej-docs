(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[9750],{2735:function(e,t,n){"use strict";function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function o(e){return void 0!==e&&!r(e)}n.d(t,{b:function(){return r},Z:function(){return o}})},79524:function(e,t,n){"use strict";n.d(t,{C:function(){return a},Z:function(){return i}});var r=n(39962),o=n(2735);function a(){var e=(0,r.Z)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,a=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,r){var a=void 0===r?{}:r,i=a.forcePrependBaseUrl,l=void 0!==i&&i,s=a.absolute,d=void 0!==s&&s;if(!n)return n;if(n.startsWith("#"))return n;if((0,o.b)(n))return n;if(l)return t+n;var c=n.startsWith(t)?n:t+n.replace(/^\//,"");return d?e+c:c}(a,n,e,t)}}}function i(e,t){return void 0===t&&(t={}),(0,a().withBaseUrl)(e,t)}},25406:function(e,t,n){"use strict";var r=n(67294).createContext(void 0);t.Z=r},14087:function(e,t,n){"use strict";n.d(t,{Z:function(){return p}});var r=n(22122),o=n(19756),a=n(67294),i=n(86010),l=n(39962),s=n(48002),d={themedImage:"themedImage_1VuW","themedImage--light":"themedImage--light_3UqQ","themedImage--dark":"themedImage--dark_hz6m"},c=["sources","className","alt"],p=function(e){var t=(0,l.Z)().isClient,n=(0,s.Z)().isDarkTheme,p=e.sources,u=e.className,m=e.alt,h=void 0===m?"":m,k=(0,o.Z)(e,c),v=t?n?["dark"]:["light"]:["light","dark"];return a.createElement(a.Fragment,null,v.map((function(e){return a.createElement("img",(0,r.Z)({key:e,src:p[e],alt:h,className:(0,i.Z)(d.themedImage,d["themedImage--"+e],u)},k))})))}},48002:function(e,t,n){"use strict";var r=n(67294),o=n(25406);t.Z=function(){var e=(0,r.useContext)(o.Z);if(null==e)throw new Error('"useThemeContext" is used outside of "Layout" component. Please see https://docusaurus.io/docs/api/themes/configuration#usethemecontext.');return e}},77618:function(e,t,n){"use strict";var r=n(67294),o=n(39962);t.Z=function(e){var t=e.url,n=e.text,a=e.isInline,i=void 0===a||a,l=e.children,s=(0,o.Z)().siteConfig;return r.createElement("a",{style:i?{}:{display:"block",marginBottom:"16px"},href:s.customFields.githubUrl+"/"+s.customFields.githubBranch+t,target:"_blank"},n||l)}},14304:function(e,t,n){"use strict";var r=n(67294),o=n(21140),a=n.n(o);a().initialize({startOnLoad:!0});t.Z=function(e){var t=e.chart;return(0,r.useEffect)((function(){a().contentLoaded()}),[]),r.createElement("div",{className:"mermaid"},t)}},8460:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return m},metadata:function(){return h},toc:function(){return k},default:function(){return f}});var r,o=n(22122),a=n(19756),i=(n(67294),n(3905)),l=n(14304),s=n(77618),d=n(14087),c=n(79524),p=["components"],u={title:"ActiveJ | Workers, overcome the complexities and overheads of multithreaded programming model",description:"ActiveJ Workers allow to overcome the complexities and overheads of multithreaded programming model yet preserve Java multithreading capabilities",sidebar_position:3},m="Workers",h={unversionedId:"boot/workers",id:"boot/workers",isDocsHomePage:!1,title:"ActiveJ | Workers, overcome the complexities and overheads of multithreaded programming model",description:"ActiveJ Workers allow to overcome the complexities and overheads of multithreaded programming model yet preserve Java multithreading capabilities",source:"@site/docs/boot/workers.mdx",sourceDirName:"boot",slug:"/boot/workers",permalink:"/boot/workers",version:"current",sidebarPosition:3,frontMatter:{title:"ActiveJ | Workers, overcome the complexities and overheads of multithreaded programming model",description:"ActiveJ Workers allow to overcome the complexities and overheads of multithreaded programming model yet preserve Java multithreading capabilities",sidebar_position:3},sidebar:"docs",previous:{title:"ActiveJ | Launcher, efficiently manage application lifecycle",permalink:"/boot/launcher"},next:{title:"ActiveJ | Config, efficiently manage application configuration and property values",permalink:"/boot/config"}},k=[{value:"Overview",id:"overview",children:[]},{value:"ActiveJ threading model",id:"activej-threading-model",children:[]},{value:"Worker Scope",id:"worker-scope",children:[{value:"Problem",id:"problem",children:[]},{value:"Solution",id:"solution",children:[]}]},{value:"Examples",id:"examples",children:[{value:"Basic Worker Pool Example",id:"basic-worker-pool-example",children:[]},{value:"Multithreaded Worker Pools Collaboration",id:"multithreaded-worker-pools-collaboration",children:[]}]}],v=(r="Variable",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),g={toc:k};function f(e){var t=e.components,n=(0,a.Z)(e,p);return(0,i.kt)("wrapper",(0,o.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"workers"},"Workers"),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Workers (",(0,i.kt)(s.Z,{url:"/boot-workers/src/main/java/io/activej/worker/WorkerPoolModule.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"p"},"WorkerPoolModule"))," in particular) is a handy way of\ninjecting multiple dependencies of the same type. It is useful when you need, for example, same set of dependencies for each thread. ActiveJ heavily utilizes workers\nto implement multithreading. Workers are the base of ActiveJ threading model."),(0,i.kt)("h2",{id:"activej-threading-model"},"ActiveJ threading model"),(0,i.kt)("p",null,"The primary mission of ActiveJ is to create ultimately fast, scalable, simple to use, and high-abstraction level I/O async\nprogramming model.\nTo achieve this, ActiveJ design principles overcome all the performance overhead and complexities of the traditional\nmultithreaded programming model, yet fully utilize Java multithreading capabilities.\nActiveJ offers means of splitting the application into a ",(0,i.kt)("inlineCode",{parentName:"p"},"Primary Eventloop")," thread and ",(0,i.kt)("inlineCode",{parentName:"p"},"Worker\nEventloop")," threads. These threads communicate with each other via message passing and thread-safe application-specific\nsingleton services."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/async-io/eventloop"},(0,i.kt)("inlineCode",{parentName:"a"},"Eventloop"))," thread is essentially a single-threaded mini-application\n(similar to Node.js), which handles its part of I/O tasks and executes Runnables submitted from other threads.\nPrimary Eventloop threads distribute and balance I/O tasks between Worker threads."),(0,i.kt)(l.Z,{style:{margin:"0 auto"},chart:"\ngraph TB\n    id1(Primary Event Loop) --\x3e id2(Worker Balancer)\n    id2 --\x3e id4\n    subgraph Worker Scope\n    id3(Event Loop) --\x3e id4(HTTP Server)\n    end\n    id2 --\x3e id6\n    subgraph Worker Scope\n    id5(Event Loop) --\x3e id6(HTTP Server)\n    end\n",mdxType:"Mermaid"}),(0,i.kt)("p",null,"The benefits of ActiveJ threading model:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each primary/worker Eventloop thread works as a single-threaded application, which is simple to program and to reason about"),(0,i.kt)("li",{parentName:"ul"},"There is no multithreaded overhead, races, and thread synchronization overhead"),(0,i.kt)("li",{parentName:"ul"},"Traditional strength of Java in multithreaded programming is fully preserved:"),(0,i.kt)("li",{parentName:"ul"},"typical I/O load can be easily split between worker threads"),(0,i.kt)("li",{parentName:"ul"},"the application can have thread-safe singleton services, which are used by Eventloop threads, and a huge singleton\ndata state, shared among all worker threads"),(0,i.kt)("li",{parentName:"ul"},"you can still use some thread synchronization / lock-free algorithms, just try to avoid excessive blocking of\nconcurrent threads"),(0,i.kt)("li",{parentName:"ul"},"full interoperability between Java Threads, Thread Pools, Java Futures, and even blocking I/O operations")),(0,i.kt)("h2",{id:"worker-scope"},"Worker Scope"),(0,i.kt)("h3",{id:"problem"},"Problem"),(0,i.kt)("p",null,"This design raises some implementation questions.\nFor example, if we want to implement multithreaded HTTP web application with worker eventloops:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"according to these design principles, we need to create separate instances of a working eventloop, a single-threaded HTTP\nserver, and its servlets for each working thread"),(0,i.kt)("li",{parentName:"ul"},"but what if our application has 8 eventloop threads with 10 worker-thread components inside, do we have to create 80 of\ncomponents in total and assign them to each worker thread?"),(0,i.kt)("li",{parentName:"ul"},"how is it even possible to manually instantiate, wire, initialize, and start/stop all those components in a\ncorrect order and also gracefully shutdown application on start/stop errors?")),(0,i.kt)("h3",{id:"solution"},"Solution"),(0,i.kt)("p",null,"Luckily, due to ",(0,i.kt)("a",{parentName:"p",href:"/inject"},"ActiveJ Inject"),", we have a solution - ",(0,i.kt)("inlineCode",{parentName:"p"},"@Worker")," scope. If you need to implement several worker threads:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"include ",(0,i.kt)(s.Z,{url:"/boot-workers/src/main/java/io/activej/worker/WorkerPoolModule.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"li"},"WorkerPoolModule")),"\nmodule and create a ",(0,i.kt)(s.Z,{url:"/boot-workers/src/main/java/io/activej/worker/WorkerPool.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"li"},"WorkerPool"))," instance"),(0,i.kt)("li",{parentName:"ul"},"annotate the components you wish to put into each worker thread with ",(0,i.kt)("inlineCode",{parentName:"li"},"@Worker")," scope annotation")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"WorkerPool")," will automatically instantiate identical dependency graphs for each of those worker threads\nYou are by no means limited to the aforementioned scheme with one primary Eventloop and N worker eventloops:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"you can still have completely unrelated / standalone eventloops (nor primary, neither worker)"),(0,i.kt)("li",{parentName:"ul"},"several primary eventloops sharing the same pool of worker eventloops or several sets of worker pools with different number or threads"),(0,i.kt)("li",{parentName:"ul"},"you can even define your own ",(0,i.kt)("inlineCode",{parentName:"li"},"@Worker")," annotations, and create multiple worker pools with completely unrelated and\ndifferent dependency graphs\nAll this is in fully transparent and easy-to-understand modules - just mark different components with appropriate\nworker annotations and let ",(0,i.kt)("inlineCode",{parentName:"li"},"WorkerPool")," create all the instances")),(0,i.kt)("p",null,"To automatically start/stop application components in correct order, simply include ",(0,i.kt)("inlineCode",{parentName:"p"},"ServiceGraph")," module into your ",(0,i.kt)("strong",{parentName:"p"},"Launcher")," - it is aware of worker pools and will treat vectors of worker instances as special compound singleton-like instances."),(0,i.kt)("p",null,"For example, here is an example of utilizing ",(0,i.kt)(s.Z,{url:"/launchers/http/src/main/java/io/activej/launchers/http/MultithreadedHttpServerLauncher.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"p"},"MultithreadedHttpServerLauncher"))," which features ",(0,i.kt)("inlineCode",{parentName:"p"},"ServiceGraphModule"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/http/src/main/java/MultithreadedHttpServerExample.java tag=EXAMPLE",url:"/examples/core/http/src/main/java/MultithreadedHttpServerExample.java",tag:"EXAMPLE"},'public final class MultithreadedHttpServerExample extends MultithreadedHttpServerLauncher {\n  @Provides\n  @Worker\n  AsyncServlet servlet(@WorkerId int workerId) {\n    return request -> HttpResponse.ok200()\n        .withPlainText("Hello from worker server #" + workerId + "\\n");\n  }\n\n  public static void main(String[] args) throws Exception {\n    MultithreadedHttpServerExample example = new MultithreadedHttpServerExample();\n    example.launch(args);\n  }\n}\n')),(0,i.kt)("p",null,"And its dependency graph looks as follows:"),(0,i.kt)(l.Z,{chart:'\ngraph\n    subgraph "@Worker()"\n    id1(AsyncHTTPServer) --\x3e id2(EventLoop)\n    id1 --\x3e id3(Async Servlet)\n    id3 --\x3e id4("@WorkerId() int")\n    end\n    id2 -.-> ThrottlingController\n    id2 --\x3e id5(Config)\n    id1 --\x3e id5\n    id9 --\x3e id5\n    id6(EventLoop) --\x3e id5\n    id7(Primary Server) --\x3e id5\n    id7 --\x3e id6\n    id7 --\x3e id8(WorkerPool$Intsnces)\n    id8 --\x3e id9(WorkerPool)\n    id9 --\x3e id10(WorkerPools)\n    id10 --\x3e Injector\n',mdxType:"Mermaid"}),(0,i.kt)("p",null,"To help you understand how worker pools work, here is a simplified ",(0,i.kt)("strong",{parentName:"p"},"WorkerPool")," implementation in a nutshell (the actual implementation differs, but not much):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public final class WorkerPool {\n    private final Scope scope;\n    private final Injector[] scopeInjectors;\n\n    WorkerPool(Injector injector, Scope scope, int workers) {\n        this.scope = scope;\n        this.scopeInjectors = new Injector[workers];\n        for (int i = 0; i < workers; i++) {\n            scopeInjectors[i] = injector.enterScope(scope, new HashMap<>(), false);\n        }\n    }\n\n    public <T> Instances<T> getInstances(Key<T> key) {\n        Instances<T> instances = new Instances<>(new Object[scopeInjectors.length]);\n        for (int i = 0; i < scopeInjectors.length; i++) {\n            instances.instances[i] = scopeInjectors[i].getInstance(key);\n        }\n        return instances;\n    }\n}\n")),(0,i.kt)("p",null,"As you can see, the root ",(0,i.kt)(s.Z,{url:"/core-inject/src/main/java/io/activej/inject/Injector.java",mdxType:"Githublink"},(0,i.kt)("inlineCode",{parentName:"p"},"Injector")),"\nsimply \u2018enters\u2019 the worker scope ",(0,i.kt)("inlineCode",{parentName:"p"},"N")," times, so we have ",(0,i.kt)("inlineCode",{parentName:"p"},"N")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Injector"),"s with identical bindings/dependency graphs, but\ndifferent containers of instances. Each time we need to create some ",(0,i.kt)("em",{parentName:"p"},"worker")," instances, they are created ",(0,i.kt)("inlineCode",{parentName:"p"},"N")," times by\neach ",(0,i.kt)("em",{parentName:"p"},"injector")," and returned as a vector of ",(0,i.kt)("inlineCode",{parentName:"p"},"N")," instances."),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"To run the examples, you need to clone ActiveJ from GitHub"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/activej/activej\n")),(0,i.kt)("p",{parentName:"div"},"And import it as a Maven project. Check out tag ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(v,{name:"currentVersion",mdxType:"Variable"})),". Before running the examples, build the project.\nThese examples are located at ",(0,i.kt)("strong",{parentName:"p"},"activej -> examples -> core -> boot")))),(0,i.kt)("h3",{id:"basic-worker-pool-example"},"Basic Worker Pool Example"),(0,i.kt)("p",null,"An example of creating a worker pool with 4 workers:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/boot/src/main/java/WorkerPoolModuleExample.java tag=EXAMPLE",url:"/examples/core/boot/src/main/java/WorkerPoolModuleExample.java",tag:"EXAMPLE"},'public final class WorkerPoolModuleExample extends AbstractModule {\n  @Provides\n  WorkerPool workerPool(WorkerPools workerPools) {\n    return workerPools.createPool(4);\n  }\n\n  @Provides\n  @Worker\n  String string(@WorkerId int workerId) {\n    return "Hello from worker #" + workerId;\n  }\n\n  public static void main(String[] args) {\n    Injector injector = Injector.of(WorkerPoolModule.create(), new WorkerPoolModuleExample());\n    WorkerPool workerPool = injector.getInstance(WorkerPool.class);\n    WorkerPool.Instances<String> strings = workerPool.getInstances(String.class);\n    strings.forEach(System.out::println);\n  }\n}\n')),(0,i.kt)("p",null,"The dependency graph of the example includes the created worker pool and looks as follows:"),(0,i.kt)("div",{style:{width:"100%",display:"flex"}},(0,i.kt)(d.Z,{style:{margin:"0 auto"},alt:"Dependency graph",sources:{light:(0,c.Z)("/img/worker-pool-dependencies_dark.svg"),dark:(0,c.Z)("/img/worker-pool-dependencies_light.svg")},mdxType:"ThemedImage"})),(0,i.kt)("h3",{id:"multithreaded-worker-pools-collaboration"},"Multithreaded Worker Pools Collaboration"),(0,i.kt)("p",null,"Several Worker Pools can co-work to calculate a single task. In this example we have 25 Workers and each of them has its\nown Eventloop. These Eventloops are wrapped in Threads and then added to the list of ",(0,i.kt)("em",{parentName:"p"},"threads"),". After that the\nlist is permuted and the threads with Eventloop tasks start. The task is to put Eventloop ",(0,i.kt)("em",{parentName:"p"},"id")," in the ",(0,i.kt)("strong",{parentName:"p"},"ConcurrentLinkedQueue"),"\nin accordance to the delay (the ",(0,i.kt)("em",{parentName:"p"},"id")," multiplied by 100). In this way we receive an ordered queue of Eventloop ids, after that\nthe Threads park and the queue is emptied."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/boot/src/main/java/MultithreadedWorkerCollab.java tag=EXAMPLE",url:"/examples/core/boot/src/main/java/MultithreadedWorkerCollab.java",tag:"EXAMPLE"},"public final class MultithreadedWorkerCollab extends AbstractModule {\n\n  @Provides\n  @Worker\n  Eventloop eventloop(@WorkerId int wid, ConcurrentLinkedQueue<Integer> queue) {\n    Eventloop eventloop = Eventloop.create();\n    eventloop.delay(100L * wid, () -> queue.add(wid));\n    return eventloop;\n  }\n\n  @Provides\n  WorkerPool workerPool(WorkerPools workerPools) {\n    return workerPools.createPool(25);\n  }\n\n  @Provides\n  ConcurrentLinkedQueue<Integer> queue() {\n    return new ConcurrentLinkedQueue<>();\n  }\n\n  public static void main(String[] args) throws InterruptedException {\n    Injector injector = Injector.of(WorkerPoolModule.create(), new MultithreadedWorkerCollab());\n    WorkerPool workerPool = injector.getInstance(WorkerPool.class);\n    WorkerPool.Instances<Eventloop> eventloops = workerPool.getInstances(Eventloop.class);\n\n    List<Thread> threads = new ArrayList<>();\n    for (Eventloop eventloop : eventloops.getList()) {\n      Thread thread = new Thread(eventloop);\n      threads.add(thread);\n    }\n\n    Collections.shuffle(threads);\n    threads.forEach(Thread::start);\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    ConcurrentLinkedQueue<Integer> queue = injector.getInstance(new Key<ConcurrentLinkedQueue<Integer>>() {});\n\n    while (!queue.isEmpty()) {\n      System.out.println(queue.poll());\n    }\n\n  }\n}\n")))}f.isMDXComponent=!0},86010:function(e,t,n){"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:function(){return o}})},11748:function(e,t,n){var r={"./locale":89234,"./locale.js":89234};function o(e){var t=a(e);return n(t)}function a(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}o.keys=function(){return Object.keys(r)},o.resolve=a,e.exports=o,o.id=11748}}]);
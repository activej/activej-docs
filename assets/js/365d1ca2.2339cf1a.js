(self.webpackChunkactivejdocs=self.webpackChunkactivejdocs||[]).push([[4162],{3905:function(e,n,t){"use strict";t.r(n),t.d(n,{MDXContext:function(){return s},MDXProvider:function(){return m},mdx:function(){return f},useMDXComponents:function(){return u},withMDXComponents:function(){return d}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){return function(n){var t=u(n.components);return a.createElement(e,i({},n,{components:t}))}},u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},v=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,v=d["".concat(o,".").concat(m)]||d[m]||p[m]||i;return t?a.createElement(v,c(c({ref:n},s),{},{components:t})):a.createElement(v,c({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=v;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}v.displayName="MDXCreateElement"},77618:function(e,n,t){"use strict";var a=t(95318).default;n.Z=void 0;var r=a(t(67294)),i=a(t(39962)),o=function(e){var n=e.url,t=e.text,a=e.isInline,o=void 0===a||a,c=e.children,l=(0,i.default)().siteConfig;return r.default.createElement("a",{style:o?{}:{display:"block",marginBottom:"16px"},href:l.customFields.githubUrl+"/"+l.customFields.githubBranch+n,target:"_blank"},t||c)};n.Z=o},22647:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d},default:function(){return m}});var a=t(22122),r=t(19756),i=(t(67294),t(3905)),o=t(77618),c=["components"],l={},s={unversionedId:"inject/quick-start",id:"inject/quick-start",isDocsHomePage:!1,title:"Quick Start",description:"In this tutorial we will create an Injector out of multiple DI modules.",source:"@site/docs/inject/quick-start.mdx",sourceDirName:"inject",slug:"/inject/quick-start",permalink:"/docs/inject/quick-start",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/inject/overview"},next:{title:"Injecting instances",permalink:"/docs/inject/injecting-instances"}},d=[{value:"Helper classes",id:"helper-classes",children:[]},{value:"Modules",id:"modules",children:[]},{value:"Injector",id:"injector",children:[]}],u={toc:d};function m(e){var n=e.components,t=(0,r.default)(e,c);return(0,i.mdx)("wrapper",(0,a.default)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"In this tutorial we will create an ",(0,i.mdx)(o.Z,{url:"/core-inject/src/main/java/io/activej/inject/Injector.java",mdxType:"Githublink"},(0,i.mdx)("inlineCode",{parentName:"p"},"Injector"))," out of multiple DI modules.\nThen we will use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Injector")," to create an instance of some service.\nWe will use annotation-based approach for defining modules as it is more readable."),(0,i.mdx)("h2",{id:"helper-classes"},"Helper classes"),(0,i.mdx)("p",null,"For the tutorial we will need 2 helper classes. A ",(0,i.mdx)("inlineCode",{parentName:"p"},"DataSource")," class that represents source of some data and a ",(0,i.mdx)("inlineCode",{parentName:"p"},"Service")," class which uses data retrieved from a data source for some processing."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultiModuleExample.java tag=REGION_4",url:"/examples/core/inject-2/src/main/java/MultiModuleExample.java",tag:"REGION_4"},'public static final class DataSource {\n  private final InetSocketAddress address;\n  private final String dbName;\n\n  @Inject\n  public DataSource(InetSocketAddress address, String dbName) {\n    this.address = address;\n    this.dbName = dbName;\n  }\n\n  public String queryData() {\n    System.out.printf("Querying %s:%s for data\\n", address, dbName);\n    return "data";\n  }\n}\n')),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultiModuleExample.java tag=REGION_5",url:"/examples/core/inject-2/src/main/java/MultiModuleExample.java",tag:"REGION_5"},"public static final class Service {\n  private final DataSource dataSource;\n\n  public Service(DataSource dataSource) {\n    this.dataSource = dataSource;\n  }\n\n  public void process() {\n    String data = dataSource.queryData();\n    System.out.printf(\"Processing data: '%s'\\n\", data);\n  }\n}\n")),(0,i.mdx)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.mdx)("div",{parentName:"div",className:"admonition-heading"},(0,i.mdx)("h5",{parentName:"div"},(0,i.mdx)("span",{parentName:"h5",className:"admonition-icon"},(0,i.mdx)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.mdx)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.mdx)("div",{parentName:"div",className:"admonition-content"},(0,i.mdx)("p",{parentName:"div"},"Notice the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Inject")," annotation on the ",(0,i.mdx)("inlineCode",{parentName:"p"},"DataSource")," constructor. It will be explained later."))),(0,i.mdx)("h2",{id:"modules"},"Modules"),(0,i.mdx)("p",null,"We will define two different modules: one for the configuration and another one for the service itself."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultiModuleExample.java tag=REGION_1",url:"/examples/core/inject-2/src/main/java/MultiModuleExample.java",tag:"REGION_1"},'public static class ConfigModule extends AbstractModule {\n  @Provides\n  InetSocketAddress inetSocketAddress() {\n    return new InetSocketAddress(1234);\n  }\n\n  @Provides\n  String dbName() {\n    return "exampleDB";\n  }\n}\n')),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"ConfigModule")," provides both the address for the ",(0,i.mdx)("inlineCode",{parentName:"p"},"DataSource")," as well as a database name."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultiModuleExample.java tag=REGION_2",url:"/examples/core/inject-2/src/main/java/MultiModuleExample.java",tag:"REGION_2"},"public static class ServiceModule extends AbstractModule {\n  @Provides\n  Service service(DataSource dataSource) {\n    return new Service(dataSource);\n  }\n}\n")),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"ServiceModule")," only provides the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Service")," itself that requires ",(0,i.mdx)("inlineCode",{parentName:"p"},"DataSource")," to be instantiated."),(0,i.mdx)("h2",{id:"injector"},"Injector"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"Injector")," is creted out of two previously defined modules. After that, an instance of ",(0,i.mdx)("inlineCode",{parentName:"p"},"Service")," is required from the injector."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java",metastring:"url=/examples/core/inject-2/src/main/java/MultiModuleExample.java tag=REGION_3",url:"/examples/core/inject-2/src/main/java/MultiModuleExample.java",tag:"REGION_3"},"public static void main(String[] args) {\n  Injector injector = Injector.of(new ConfigModule(), new ServiceModule());\n  Service service = injector.getInstance(Service.class);\n  service.process();\n}\n")),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"Service")," requires ",(0,i.mdx)("inlineCode",{parentName:"p"},"DataSource")," to be instantiated, but we have not provided ",(0,i.mdx)("inlineCode",{parentName:"p"},"DataSource")," explicitly in any of the modules.\nThanks to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Inject")," annotation on ",(0,i.mdx)("inlineCode",{parentName:"p"},"DataSource"),"'s constructor, injector injected required dependencies and instantiated the ",(0,i.mdx)("inlineCode",{parentName:"p"},"DataSource"),"."),(0,i.mdx)("p",null,"The output of ",(0,i.mdx)("inlineCode",{parentName:"p"},"service.process()")," call is:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"Querying 0.0.0.0/0.0.0.0:1234:exampleDB for data\nProcessing data: 'data'\n")))}m.isMDXComponent=!0}}]);